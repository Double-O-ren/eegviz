



<!DOCTYPE html>
<html lang="en" class="">
  <head prefix="og: http://ogp.me/ns# fb: http://ogp.me/ns/fb# object: http://ogp.me/ns/object# article: http://ogp.me/ns/article# profile: http://ogp.me/ns/profile#">
    <meta charset='utf-8'>
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta http-equiv="Content-Language" content="en">
    
    
    <title>threex.laser/three.min.js at master Â· jeromeetienne/threex.laser</title>
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch.xml" title="GitHub">
    <link rel="fluid-icon" href="https://github.com/fluidicon.png" title="GitHub">
    <link rel="apple-touch-icon" sizes="57x57" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/apple-touch-icon-114.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/apple-touch-icon-144.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/apple-touch-icon-144.png">
    <meta property="fb:app_id" content="1401488693436528">

      <meta content="@github" name="twitter:site" /><meta content="summary" name="twitter:card" /><meta content="jeromeetienne/threex.laser" name="twitter:title" /><meta content="threex.laser - three.js extension provide a laser-like display" name="twitter:description" /><meta content="https://avatars2.githubusercontent.com/u/252962?v=2&amp;s=400" name="twitter:image:src" />
<meta content="GitHub" property="og:site_name" /><meta content="object" property="og:type" /><meta content="https://avatars2.githubusercontent.com/u/252962?v=2&amp;s=400" property="og:image" /><meta content="jeromeetienne/threex.laser" property="og:title" /><meta content="https://github.com/jeromeetienne/threex.laser" property="og:url" /><meta content="threex.laser - three.js extension provide a laser-like display" property="og:description" />

      <meta name="browser-stats-url" content="/_stats">
    <link rel="assets" href="https://assets-cdn.github.com/">
    <link rel="conduit-xhr" href="https://ghconduit.com:25035">
    <link rel="xhr-socket" href="/_sockets">
    <meta name="pjax-timeout" content="1000">

    <meta name="msapplication-TileImage" content="/windows-tile.png">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="selected-link" value="repo_source" data-pjax-transient>
      <meta name="google-analytics" content="UA-3769691-2">

    <meta content="collector.githubapp.com" name="octolytics-host" /><meta content="collector-cdn.github.com" name="octolytics-script-host" /><meta content="github" name="octolytics-app-id" /><meta content="C0C35372:5B17:32566861:5430CCBB" name="octolytics-dimension-request_id" /><meta content="24706" name="octolytics-actor-id" /><meta content="geneshuman" name="octolytics-actor-login" /><meta content="cef619dc0437b6cd822fd3d9c7e0f9c75c53ee8034797eee310468ee8d272627" name="octolytics-actor-hash" />
    <meta content="Rails, view, blob#show" name="analytics-event" />

    
    
    <link rel="icon" type="image/x-icon" href="https://assets-cdn.github.com/favicon.ico">


    <meta content="authenticity_token" name="csrf-param" />
<meta content="MTA+mkol36lnSoMdwmYygbuzMFqlPph8N0KUy9XrIYnTTL3I8umVVZ5npvTfg47WdRVhbulLDTfjUOOcd9wBKw==" name="csrf-token" />

    <link href="https://assets-cdn.github.com/assets/github-7ac1eb11eed98adb8eb769d637e00db1cb2c02f9.css" media="all" rel="stylesheet" type="text/css" />
    <link href="https://assets-cdn.github.com/assets/github2-9ae9325bdf8dd21253fde438acbd4e158d45b029.css" media="all" rel="stylesheet" type="text/css" />
    


    <meta http-equiv="x-pjax-version" content="1059a99e7bf3380b10f57c485232e692">

      
  <meta name="description" content="threex.laser - three.js extension provide a laser-like display">
  <meta name="go-import" content="github.com/jeromeetienne/threex.laser git https://github.com/jeromeetienne/threex.laser.git">

  <meta content="252962" name="octolytics-dimension-user_id" /><meta content="jeromeetienne" name="octolytics-dimension-user_login" /><meta content="12505078" name="octolytics-dimension-repository_id" /><meta content="jeromeetienne/threex.laser" name="octolytics-dimension-repository_nwo" /><meta content="true" name="octolytics-dimension-repository_public" /><meta content="false" name="octolytics-dimension-repository_is_fork" /><meta content="12505078" name="octolytics-dimension-repository_network_root_id" /><meta content="jeromeetienne/threex.laser" name="octolytics-dimension-repository_network_root_nwo" />
  <link href="https://github.com/jeromeetienne/threex.laser/commits/master.atom" rel="alternate" title="Recent Commits to threex.laser:master" type="application/atom+xml">

  </head>


  <body class="logged_in  env-production macintosh vis-public page-blob">
    <a href="#start-of-content" tabindex="1" class="accessibility-aid js-skip-to-content">Skip to content</a>
    <div class="wrapper">
      
      
      
      


      <div class="header header-logged-in true" role="banner">
  <div class="container clearfix">

    <a class="header-logo-invertocat" href="https://github.com/" data-hotkey="g d" aria-label="Homepage" ga-data-click="Header, go to dashboard, icon:logo">
  <span class="mega-octicon octicon-mark-github"></span>
</a>


      <div class="site-search repo-scope js-site-search" role="search">
          <form accept-charset="UTF-8" action="/jeromeetienne/threex.laser/search" class="js-site-search-form" data-global-search-url="/search" data-repo-search-url="/jeromeetienne/threex.laser/search" method="get"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /></div>
  <input type="text"
    class="js-site-search-field is-clearable"
    data-hotkey="s"
    name="q"
    placeholder="Search"
    data-global-scope-placeholder="Search GitHub"
    data-repo-scope-placeholder="Search"
    tabindex="1"
    autocapitalize="off">
  <div class="scope-badge">This repository</div>
</form>
      </div>
      <ul class="header-nav left" role="navigation">
        <li class="header-nav-item explore">
          <a class="header-nav-link" href="/explore" data-ga-click="Header, go to explore, text:explore">Explore</a>
        </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="https://gist.github.com" data-ga-click="Header, go to gist, text:gist">Gist</a>
          </li>
          <li class="header-nav-item">
            <a class="header-nav-link" href="/blog" data-ga-click="Header, go to blog, text:blog">Blog</a>
          </li>
        <li class="header-nav-item">
          <a class="header-nav-link" href="https://help.github.com" data-ga-click="Header, go to help, text:help">Help</a>
        </li>
      </ul>

    
<ul class="header-nav user-nav right" id="user-links">
  <li class="header-nav-item dropdown js-menu-container">
    <a class="header-nav-link name" href="/geneshuman" data-ga-click="Header, go to profile, text:username">
      <img alt="gene" class="avatar" data-user="24706" height="20" src="https://avatars0.githubusercontent.com/u/24706?v=2&amp;s=40" width="20" />
      <span class="css-truncate">
        <span class="css-truncate-target">geneshuman</span>
      </span>
    </a>
  </li>

  <li class="header-nav-item dropdown js-menu-container">
    <a class="header-nav-link js-menu-target tooltipped tooltipped-s" href="#" aria-label="Create new..." data-ga-click="Header, create new, icon:add">
      <span class="octicon octicon-plus"></span>
      <span class="dropdown-caret"></span>
    </a>

    <div class="dropdown-menu-content js-menu-content">
      
<ul class="dropdown-menu">
  <li>
    <a href="/new"><span class="octicon octicon-repo"></span> New repository</a>
  </li>
  <li>
    <a href="/organizations/new"><span class="octicon octicon-organization"></span> New organization</a>
  </li>


    <li class="dropdown-divider"></li>
    <li class="dropdown-header">
      <span title="jeromeetienne/threex.laser">This repository</span>
    </li>
      <li>
        <a href="/jeromeetienne/threex.laser/issues/new"><span class="octicon octicon-issue-opened"></span> New issue</a>
      </li>
</ul>

    </div>
  </li>

  <li class="header-nav-item">
        <a href="/notifications" aria-label="You have no unread notifications" class="header-nav-link notification-indicator tooltipped tooltipped-s" data-ga-click="Header, go to notifications, icon:read" data-hotkey="g n">
        <span class="mail-status all-read"></span>
        <span class="octicon octicon-inbox"></span>
</a>
  </li>

  <li class="header-nav-item">
    <a class="header-nav-link tooltipped tooltipped-s" href="/settings/profile" id="account_settings" aria-label="Settings" data-ga-click="Header, go to settings, icon:settings">
      <span class="octicon octicon-gear"></span>
    </a>
  </li>

  <li class="header-nav-item">
    <form accept-charset="UTF-8" action="/logout" class="logout-form" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="eIVObzySrxXrMzr58BtFTjJHVfAbS50TAi+mixac8Dj2SxW5u0u10zn8Cky69aHiAKgRK1iNYh+j0WJ6BGB4WQ==" /></div>
      <button class="header-nav-link sign-out-button tooltipped tooltipped-s" aria-label="Sign out" data-ga-click="Header, sign out, icon:logout">
        <span class="octicon octicon-sign-out"></span>
      </button>
</form>  </li>

</ul>


    
  </div>
</div>

      

        


      <div id="start-of-content" class="accessibility-aid"></div>
          <div class="site" itemscope itemtype="http://schema.org/WebPage">
    <div id="js-flash-container">
      
    </div>
    <div class="pagehead repohead instapaper_ignore readability-menu">
      <div class="container">
        
<ul class="pagehead-actions">

    <li class="subscription">
      <form accept-charset="UTF-8" action="/notifications/subscribe" class="js-social-container" data-autosubmit="true" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="SRmYHL5isE802XM54FOTSToYytqhwI4EtMGLnECQ41Fggs9BkB9bpIBR9Xo3LTbjgKcFvl2oybz+kq04eYJPsA==" /></div>  <input id="repository_id" name="repository_id" type="hidden" value="12505078" />

    <div class="select-menu js-menu-container js-select-menu">
      <a class="social-count js-social-count" href="/jeromeetienne/threex.laser/watchers">
        1
      </a>
      <a href="/jeromeetienne/threex.laser/subscription"
        class="minibutton select-menu-button with-count js-menu-target" role="button" tabindex="0" aria-haspopup="true">
        <span class="js-select-button">
          <span class="octicon octicon-eye"></span>
          Watch
        </span>
      </a>

      <div class="select-menu-modal-holder">
        <div class="select-menu-modal subscription-menu-modal js-menu-content" aria-hidden="true">
          <div class="select-menu-header">
            <span class="select-menu-title">Notifications</span>
            <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
          </div> <!-- /.select-menu-header -->

          <div class="select-menu-list js-navigation-container" role="menu">

            <div class="select-menu-item js-navigation-item selected" role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input checked="checked" id="do_included" name="do" type="radio" value="included" />
                <h4>Not watching</h4>
                <span class="description">Be notified when participating or @mentioned.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-eye"></span>
                  Watch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input id="do_subscribed" name="do" type="radio" value="subscribed" />
                <h4>Watching</h4>
                <span class="description">Be notified of all conversations.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-eye"></span>
                  Unwatch
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

            <div class="select-menu-item js-navigation-item " role="menuitem" tabindex="0">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <div class="select-menu-item-text">
                <input id="do_ignore" name="do" type="radio" value="ignore" />
                <h4>Ignoring</h4>
                <span class="description">Never be notified.</span>
                <span class="js-select-button-text hidden-select-button-text">
                  <span class="octicon octicon-mute"></span>
                  Stop ignoring
                </span>
              </div>
            </div> <!-- /.select-menu-item -->

          </div> <!-- /.select-menu-list -->

        </div> <!-- /.select-menu-modal -->
      </div> <!-- /.select-menu-modal-holder -->
    </div> <!-- /.select-menu -->

</form>
    </li>

  <li>
    
  <div class="js-toggler-container js-social-container starring-container ">

    <form accept-charset="UTF-8" action="/jeromeetienne/threex.laser/unstar" class="js-toggler-form starred js-unstar-button" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="FlcomJ+aMG2TORwHSbYg1/E5ac5BqJFagPhkrPfG4PTy+W0UYyu0JoZ/rv89AVcVD3DuZw9gWLKgWFZXKxqXlQ==" /></div>
      <button
        class="minibutton with-count js-toggler-target star-button"
        aria-label="Unstar this repository" title="Unstar jeromeetienne/threex.laser">
        <span class="octicon octicon-star"></span>
        Unstar
      </button>
        <a class="social-count js-social-count" href="/jeromeetienne/threex.laser/stargazers">
          8
        </a>
</form>
    <form accept-charset="UTF-8" action="/jeromeetienne/threex.laser/star" class="js-toggler-form unstarred js-star-button" data-remote="true" method="post"><div style="margin:0;padding:0;display:inline"><input name="utf8" type="hidden" value="&#x2713;" /><input name="authenticity_token" type="hidden" value="KTiVFC5ASBUJ7TdnTvMx7syzD9trF6fEgszGAk/RPOWX/MI0qV3wrDhLziazF3awoZ73Un1w5dxsgWZ6Ia4jaw==" /></div>
      <button
        class="minibutton with-count js-toggler-target star-button"
        aria-label="Star this repository" title="Star jeromeetienne/threex.laser">
        <span class="octicon octicon-star"></span>
        Star
      </button>
        <a class="social-count js-social-count" href="/jeromeetienne/threex.laser/stargazers">
          8
        </a>
</form>  </div>

  </li>


        <li>
          <a href="/jeromeetienne/threex.laser/fork" class="minibutton with-count js-toggler-target fork-button tooltipped-n" title="Fork your own copy of jeromeetienne/threex.laser to your account" aria-label="Fork your own copy of jeromeetienne/threex.laser to your account" rel="facebox nofollow">
            <span class="octicon octicon-repo-forked"></span>
            Fork
          </a>
          <a href="/jeromeetienne/threex.laser/network" class="social-count">5</a>
        </li>

</ul>

        <h1 itemscope itemtype="http://data-vocabulary.org/Breadcrumb" class="entry-title public">
          <span class="mega-octicon octicon-repo"></span>
          <span class="author"><a href="/jeromeetienne" class="url fn" itemprop="url" rel="author"><span itemprop="title">jeromeetienne</span></a></span><!--
       --><span class="path-divider">/</span><!--
       --><strong><a href="/jeromeetienne/threex.laser" class="js-current-repository js-repo-home-link">threex.laser</a></strong>

          <span class="page-context-loader">
            <img alt="" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
          </span>

        </h1>
      </div><!-- /.container -->
    </div><!-- /.repohead -->

    <div class="container">
      <div class="repository-with-sidebar repo-container new-discussion-timeline  ">
        <div class="repository-sidebar clearfix">
            
<div class="sunken-menu vertical-right repo-nav js-repo-nav js-repository-container-pjax js-octicon-loaders" role="navigation" data-issue-count-url="/jeromeetienne/threex.laser/issues/counts">
  <div class="sunken-menu-contents">
    <ul class="sunken-menu-group">
      <li class="tooltipped tooltipped-w" aria-label="Code">
        <a href="/jeromeetienne/threex.laser" aria-label="Code" class="selected js-selected-navigation-item sunken-menu-item" data-hotkey="g c" data-pjax="true" data-selected-links="repo_source repo_downloads repo_commits repo_releases repo_tags repo_branches /jeromeetienne/threex.laser">
          <span class="octicon octicon-code"></span> <span class="full-word">Code</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

        <li class="tooltipped tooltipped-w" aria-label="Issues">
          <a href="/jeromeetienne/threex.laser/issues" aria-label="Issues" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g i" data-selected-links="repo_issues repo_labels repo_milestones /jeromeetienne/threex.laser/issues">
            <span class="octicon octicon-issue-opened"></span> <span class="full-word">Issues</span>
            <span class="js-issue-replace-counter"></span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>

      <li class="tooltipped tooltipped-w" aria-label="Pull Requests">
        <a href="/jeromeetienne/threex.laser/pulls" aria-label="Pull Requests" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g p" data-selected-links="repo_pulls /jeromeetienne/threex.laser/pulls">
            <span class="octicon octicon-git-pull-request"></span> <span class="full-word">Pull Requests</span>
            <span class="js-pull-replace-counter"></span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>


        <li class="tooltipped tooltipped-w" aria-label="Wiki">
          <a href="/jeromeetienne/threex.laser/wiki" aria-label="Wiki" class="js-selected-navigation-item sunken-menu-item js-disable-pjax" data-hotkey="g w" data-selected-links="repo_wiki /jeromeetienne/threex.laser/wiki">
            <span class="octicon octicon-book"></span> <span class="full-word">Wiki</span>
            <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>        </li>
    </ul>
    <div class="sunken-menu-separator"></div>
    <ul class="sunken-menu-group">

      <li class="tooltipped tooltipped-w" aria-label="Pulse">
        <a href="/jeromeetienne/threex.laser/pulse/weekly" aria-label="Pulse" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="pulse /jeromeetienne/threex.laser/pulse/weekly">
          <span class="octicon octicon-pulse"></span> <span class="full-word">Pulse</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>

      <li class="tooltipped tooltipped-w" aria-label="Graphs">
        <a href="/jeromeetienne/threex.laser/graphs" aria-label="Graphs" class="js-selected-navigation-item sunken-menu-item" data-pjax="true" data-selected-links="repo_graphs repo_contributors /jeromeetienne/threex.laser/graphs">
          <span class="octicon octicon-graph"></span> <span class="full-word">Graphs</span>
          <img alt="" class="mini-loader" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32.gif" width="16" />
</a>      </li>
    </ul>


  </div>
</div>

              <div class="only-with-full-nav">
                
  
<div class="clone-url open"
  data-protocol-type="http"
  data-url="/users/set_protocol?protocol_selector=http&amp;protocol_type=clone">
  <h3><span class="text-emphasized">HTTPS</span> clone URL</h3>
  <div class="input-group">
    <input type="text" class="input-mini input-monospace js-url-field"
           value="https://github.com/jeromeetienne/threex.laser.git" readonly="readonly">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="https://github.com/jeromeetienne/threex.laser.git" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  
<div class="clone-url "
  data-protocol-type="ssh"
  data-url="/users/set_protocol?protocol_selector=ssh&amp;protocol_type=clone">
  <h3><span class="text-emphasized">SSH</span> clone URL</h3>
  <div class="input-group">
    <input type="text" class="input-mini input-monospace js-url-field"
           value="git@github.com:jeromeetienne/threex.laser.git" readonly="readonly">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="git@github.com:jeromeetienne/threex.laser.git" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>

  
<div class="clone-url "
  data-protocol-type="subversion"
  data-url="/users/set_protocol?protocol_selector=subversion&amp;protocol_type=clone">
  <h3><span class="text-emphasized">Subversion</span> checkout URL</h3>
  <div class="input-group">
    <input type="text" class="input-mini input-monospace js-url-field"
           value="https://github.com/jeromeetienne/threex.laser" readonly="readonly">
    <span class="input-group-button">
      <button aria-label="Copy to clipboard" class="js-zeroclipboard minibutton zeroclipboard-button" data-clipboard-text="https://github.com/jeromeetienne/threex.laser" data-copied-hint="Copied!" type="button"><span class="octicon octicon-clippy"></span></button>
    </span>
  </div>
</div>


<p class="clone-options">You can clone with
      <a href="#" class="js-clone-selector" data-protocol="http">HTTPS</a>,
      <a href="#" class="js-clone-selector" data-protocol="ssh">SSH</a>,
      or <a href="#" class="js-clone-selector" data-protocol="subversion">Subversion</a>.
  <a href="https://help.github.com/articles/which-remote-url-should-i-use" class="help tooltipped tooltipped-n" aria-label="Get help on which URL is right for you.">
    <span class="octicon octicon-question"></span>
  </a>
</p>

  <a href="http://mac.github.com" data-url="github-mac://openRepo/https://github.com/jeromeetienne/threex.laser" class="minibutton sidebar-button js-conduit-rewrite-url" title="Save jeromeetienne/threex.laser to your computer and use it in GitHub Desktop." aria-label="Save jeromeetienne/threex.laser to your computer and use it in GitHub Desktop.">
    <span class="octicon octicon-device-desktop"></span>
    Clone in Desktop
  </a>


                <a href="/jeromeetienne/threex.laser/archive/master.zip"
                   class="minibutton sidebar-button"
                   aria-label="Download the contents of jeromeetienne/threex.laser as a zip file"
                   title="Download the contents of jeromeetienne/threex.laser as a zip file"
                   rel="nofollow">
                  <span class="octicon octicon-cloud-download"></span>
                  Download ZIP
                </a>
              </div>
        </div><!-- /.repository-sidebar -->

        <div id="js-repo-pjax-container" class="repository-content context-loader-container" data-pjax-container>
          

<a href="/jeromeetienne/threex.laser/blob/c8b2fa5006368e57dfb89ce1445a6bf3f907e545/examples/vendor/three.js/build/three.min.js" class="hidden js-permalink-shortcut" data-hotkey="y">Permalink</a>

<!-- blob contrib key: blob_contributors:v21:722476d61cff39a993ac48936d307acd -->

<div class="file-navigation">
  
<div class="select-menu js-menu-container js-select-menu left">
  <span class="minibutton select-menu-button js-menu-target css-truncate" data-hotkey="w"
    data-master-branch="master"
    data-ref="master"
    title="master"
    role="button" aria-label="Switch branches or tags" tabindex="0" aria-haspopup="true">
    <span class="octicon octicon-git-branch"></span>
    <i>branch:</i>
    <span class="js-select-button css-truncate-target">master</span>
  </span>

  <div class="select-menu-modal-holder js-menu-content js-navigation-container" data-pjax aria-hidden="true">

    <div class="select-menu-modal">
      <div class="select-menu-header">
        <span class="select-menu-title">Switch branches/tags</span>
        <span class="octicon octicon-x js-menu-close" role="button" aria-label="Close"></span>
      </div> <!-- /.select-menu-header -->

      <div class="select-menu-filters">
        <div class="select-menu-text-filter">
          <input type="text" aria-label="Filter branches/tags" id="context-commitish-filter-field" class="js-filterable-field js-navigation-enable" placeholder="Filter branches/tags">
        </div>
        <div class="select-menu-tabs">
          <ul>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="branches" class="js-select-menu-tab">Branches</a>
            </li>
            <li class="select-menu-tab">
              <a href="#" data-tab-filter="tags" class="js-select-menu-tab">Tags</a>
            </li>
          </ul>
        </div><!-- /.select-menu-tabs -->
      </div><!-- /.select-menu-filters -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="branches">

        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


            <div class="select-menu-item js-navigation-item ">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/jeromeetienne/threex.laser/blob/gh-pages/examples/vendor/three.js/build/three.min.js"
                 data-name="gh-pages"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="gh-pages">gh-pages</a>
            </div> <!-- /.select-menu-item -->
            <div class="select-menu-item js-navigation-item selected">
              <span class="select-menu-item-icon octicon octicon-check"></span>
              <a href="/jeromeetienne/threex.laser/blob/master/examples/vendor/three.js/build/three.min.js"
                 data-name="master"
                 data-skip-pjax="true"
                 rel="nofollow"
                 class="js-navigation-open select-menu-item-text css-truncate-target"
                 title="master">master</a>
            </div> <!-- /.select-menu-item -->
        </div>

          <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

      <div class="select-menu-list select-menu-tab-bucket js-select-menu-tab-bucket" data-tab-filter="tags">
        <div data-filterable-for="context-commitish-filter-field" data-filterable-type="substring">


        </div>

        <div class="select-menu-no-results">Nothing to show</div>
      </div> <!-- /.select-menu-list -->

    </div> <!-- /.select-menu-modal -->
  </div> <!-- /.select-menu-modal-holder -->
</div> <!-- /.select-menu -->

  <div class="button-group right">
    <a href="/jeromeetienne/threex.laser/find/master"
          class="js-show-file-finder minibutton empty-icon tooltipped tooltipped-s"
          data-pjax
          data-hotkey="t"
          aria-label="Quickly jump between files">
      <span class="octicon octicon-list-unordered"></span>
    </a>
    <button class="js-zeroclipboard minibutton zeroclipboard-button"
          data-clipboard-text="examples/vendor/three.js/build/three.min.js"
          aria-label="Copy to clipboard"
          data-copied-hint="Copied!">
      <span class="octicon octicon-clippy"></span>
    </button>
  </div>

  <div class="breadcrumb">
    <span class='repo-root js-repo-root'><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/jeromeetienne/threex.laser" class="" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">threex.laser</span></a></span></span><span class="separator"> / </span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/jeromeetienne/threex.laser/tree/master/examples" class="" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">examples</span></a></span><span class="separator"> / </span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/jeromeetienne/threex.laser/tree/master/examples/vendor" class="" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">vendor</span></a></span><span class="separator"> / </span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/jeromeetienne/threex.laser/tree/master/examples/vendor/three.js" class="" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">three.js</span></a></span><span class="separator"> / </span><span itemscope="" itemtype="http://data-vocabulary.org/Breadcrumb"><a href="/jeromeetienne/threex.laser/tree/master/examples/vendor/three.js/build" class="" data-branch="master" data-direction="back" data-pjax="true" itemscope="url"><span itemprop="title">build</span></a></span><span class="separator"> / </span><strong class="final-path">three.min.js</strong>
  </div>
</div>


  <div class="commit commit-loader file-history-tease js-deferred-content" data-url="/jeromeetienne/threex.laser/contributors/master/examples/vendor/three.js/build/three.min.js">
    <div class="file-history-tease-header">
      Fetching contributors&hellip;
    </div>

    <div class="participation">
      <p class="loader-loading"><img alt="" height="16" src="https://assets-cdn.github.com/images/spinners/octocat-spinner-32-EAF2F5.gif" width="16" /></p>
      <p class="loader-error">Cannot retrieve contributors at this time</p>
    </div>
  </div>

<div class="file-box">
  <div class="file">
    <div class="meta clearfix">
      <div class="info file-name">
          <span>725 lines (724 sloc)</span>
          <span class="meta-divider"></span>
        <span>422.285 kb</span>
      </div>
      <div class="actions">
        <div class="button-group">
          <a href="/jeromeetienne/threex.laser/raw/master/examples/vendor/three.js/build/three.min.js" class="minibutton " id="raw-url">Raw</a>
            <a href="/jeromeetienne/threex.laser/blame/master/examples/vendor/three.js/build/three.min.js" class="minibutton js-update-url-with-hash">Blame</a>
          <a href="/jeromeetienne/threex.laser/commits/master/examples/vendor/three.js/build/three.min.js" class="minibutton " rel="nofollow">History</a>
        </div><!-- /.button-group -->

          <a class="octicon-button tooltipped tooltipped-nw js-conduit-openfile-check"
             href="http://mac.github.com"
             data-url="github-mac://openRepo/https://github.com/jeromeetienne/threex.laser?branch=master&amp;filepath=examples%2Fvendor%2Fthree.js%2Fbuild%2Fthree.min.js"
             aria-label="Open this file in GitHub for Mac"
             data-failed-title="Your version of GitHub for Mac is too old to open this file. Try checking for updates.">
              <span class="octicon octicon-device-desktop"></span>
          </a>

              <a class="octicon-button tooltipped tooltipped-n js-update-url-with-hash"
                 aria-label="Clicking this button will fork this project so you can edit the file"
                 href="/jeromeetienne/threex.laser/edit/master/examples/vendor/three.js/build/three.min.js"
                 data-method="post" rel="nofollow"><span class="octicon octicon-pencil"></span></a>

            <a class="octicon-button danger tooltipped tooltipped-s"
               href="/jeromeetienne/threex.laser/delete/master/examples/vendor/three.js/build/three.min.js"
               aria-label="Fork this project and delete file"
               data-method="post" data-test-id="delete-blob-file" rel="nofollow">
          <span class="octicon octicon-trashcan"></span>
        </a>
      </div><!-- /.actions -->
    </div>
    
  <div class="blob-wrapper data type-javascript">
      <table class="highlight tab-size-8 js-file-line-container">
      <tr>
        <td id="L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="LC1" class="blob-code js-file-line"><span class="c1">// three.js - http://github.com/mrdoob/three.js</span></td>
      </tr>
      <tr>
        <td id="L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="LC2" class="blob-code js-file-line"><span class="s1">&#39;use strict&#39;</span><span class="p">;</span><span class="kd">var</span> <span class="nx">THREE</span><span class="o">=</span><span class="nx">THREE</span><span class="o">||</span><span class="p">{</span><span class="nx">REVISION</span><span class="o">:</span><span class="s2">&quot;59&quot;</span><span class="p">};</span><span class="nx">self</span><span class="p">.</span><span class="nx">console</span><span class="o">=</span><span class="nx">self</span><span class="p">.</span><span class="nx">console</span><span class="o">||</span><span class="p">{</span><span class="nx">info</span><span class="o">:</span><span class="kd">function</span><span class="p">(){},</span><span class="nx">log</span><span class="o">:</span><span class="kd">function</span><span class="p">(){},</span><span class="nx">debug</span><span class="o">:</span><span class="kd">function</span><span class="p">(){},</span><span class="nx">warn</span><span class="o">:</span><span class="kd">function</span><span class="p">(){},</span><span class="nx">error</span><span class="o">:</span><span class="kd">function</span><span class="p">(){}};</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">trim</span><span class="o">=</span><span class="nb">String</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">trim</span><span class="o">||</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\s+|\s+$/g</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">extend</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">keys</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nb">Object</span><span class="p">.</span><span class="nx">getOwnPropertyDescriptor</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">))}</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">f</span> <span class="k">in</span> <span class="nx">c</span><span class="o">=</span><span class="p">{}.</span><span class="nx">hasOwnProperty</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">]);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="LC3" class="blob-code js-file-line"><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;ms&quot;</span><span class="p">,</span><span class="s2">&quot;moz&quot;</span><span class="p">,</span><span class="s2">&quot;webkit&quot;</span><span class="p">,</span><span class="s2">&quot;o&quot;</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;!</span><span class="nx">self</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="p">;</span><span class="o">++</span><span class="nx">c</span><span class="p">)</span><span class="nx">self</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="o">=</span><span class="nx">self</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">+</span><span class="s2">&quot;RequestAnimationFrame&quot;</span><span class="p">],</span><span class="nx">self</span><span class="p">.</span><span class="nx">cancelAnimationFrame</span><span class="o">=</span><span class="nx">self</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">+</span><span class="s2">&quot;CancelAnimationFrame&quot;</span><span class="p">]</span><span class="o">||</span><span class="nx">self</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">+</span><span class="s2">&quot;CancelRequestAnimationFrame&quot;</span><span class="p">];</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">self</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">self</span><span class="p">.</span><span class="nx">setTimeout</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">requestAnimationFrame</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">16</span><span class="o">-</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">a</span><span class="p">)),</span><span class="nx">h</span><span class="o">=</span><span class="nx">self</span><span class="p">.</span><span class="nx">setTimeout</span><span class="p">(</span><span class="kd">function</span><span class="p">(){</span><span class="nx">b</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="nx">f</span><span class="p">)},</span><span class="nx">f</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="nx">h</span><span class="p">});</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">self</span><span class="p">.</span><span class="nx">cancelAnimationFrame</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span></td>
      </tr>
      <tr>
        <td id="L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="LC4" class="blob-code js-file-line"><span class="nx">self</span><span class="p">.</span><span class="nx">clearTimeout</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">self</span><span class="p">.</span><span class="nx">cancelAnimationFrame</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">self</span><span class="p">.</span><span class="nx">clearTimeout</span><span class="p">(</span><span class="nx">a</span><span class="p">)})})();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CullFaceNone</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CullFaceBack</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CullFaceFront</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CullFaceFrontBack</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FrontFaceDirectionCW</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FrontFaceDirectionCCW</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BasicShadowMap</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PCFShadowMap</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PCFSoftShadowMap</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FrontSide</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BackSide</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DoubleSide</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoShading</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FlatShading</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoColors</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceColors</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoBlending</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="LC5" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AdditiveBlending</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SubtractiveBlending</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyBlending</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CustomBlending</span><span class="o">=</span><span class="mi">5</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AddEquation</span><span class="o">=</span><span class="mi">100</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SubtractEquation</span><span class="o">=</span><span class="mi">101</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ReverseSubtractEquation</span><span class="o">=</span><span class="mi">102</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ZeroFactor</span><span class="o">=</span><span class="mi">200</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneFactor</span><span class="o">=</span><span class="mi">201</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcColorFactor</span><span class="o">=</span><span class="mi">202</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusSrcColorFactor</span><span class="o">=</span><span class="mi">203</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcAlphaFactor</span><span class="o">=</span><span class="mi">204</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusSrcAlphaFactor</span><span class="o">=</span><span class="mi">205</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DstAlphaFactor</span><span class="o">=</span><span class="mi">206</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusDstAlphaFactor</span><span class="o">=</span><span class="mi">207</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DstColorFactor</span><span class="o">=</span><span class="mi">208</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusDstColorFactor</span><span class="o">=</span><span class="mi">209</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="LC6" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcAlphaSaturateFactor</span><span class="o">=</span><span class="mi">210</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyOperation</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MixOperation</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AddOperation</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UVMapping</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeReflectionMapping</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeRefractionMapping</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SphericalReflectionMapping</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SphericalRefractionMapping</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="o">=</span><span class="mi">1</span><span class="nx">E3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ClampToEdgeWrapping</span><span class="o">=</span><span class="mi">1001</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MirroredRepeatWrapping</span><span class="o">=</span><span class="mi">1002</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestFilter</span><span class="o">=</span><span class="mi">1003</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestMipMapNearestFilter</span><span class="o">=</span><span class="mi">1004</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestMipMapLinearFilter</span><span class="o">=</span><span class="mi">1005</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="LC7" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="o">=</span><span class="mi">1006</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearMipMapNearestFilter</span><span class="o">=</span><span class="mi">1007</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearMipMapLinearFilter</span><span class="o">=</span><span class="mi">1008</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedByteType</span><span class="o">=</span><span class="mi">1009</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ByteType</span><span class="o">=</span><span class="mi">1010</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShortType</span><span class="o">=</span><span class="mi">1011</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedShortType</span><span class="o">=</span><span class="mi">1012</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">IntType</span><span class="o">=</span><span class="mi">1013</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedIntType</span><span class="o">=</span><span class="mi">1014</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FloatType</span><span class="o">=</span><span class="mi">1015</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedShort4444Type</span><span class="o">=</span><span class="mi">1016</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedShort5551Type</span><span class="o">=</span><span class="mi">1017</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedShort565Type</span><span class="o">=</span><span class="mi">1018</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AlphaFormat</span><span class="o">=</span><span class="mi">1019</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBFormat</span><span class="o">=</span><span class="mi">1020</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBAFormat</span><span class="o">=</span><span class="mi">1021</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LuminanceFormat</span><span class="o">=</span><span class="mi">1022</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LuminanceAlphaFormat</span><span class="o">=</span><span class="mi">1023</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="LC8" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGB_S3TC_DXT1_Format</span><span class="o">=</span><span class="mi">2001</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBA_S3TC_DXT1_Format</span><span class="o">=</span><span class="mi">2002</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBA_S3TC_DXT3_Format</span><span class="o">=</span><span class="mi">2003</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBA_S3TC_DXT5_Format</span><span class="o">=</span><span class="mi">2004</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="LC9" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">r</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;number&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">setStyle</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setHex</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="o">&amp;</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="mi">255</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="o">&amp;</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="mi">255</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;</span><span class="mi">255</span><span class="p">)</span><span class="o">/</span><span class="mi">255</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setRGB</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setHSL</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">+=</span><span class="mi">1</span><span class="p">);</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">-=</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">/</span><span class="mi">6</span><span class="o">?</span><span class="nx">a</span><span class="o">+</span><span class="mi">6</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="LC10" class="blob-code js-file-line"><span class="nx">c</span><span class="o">:</span><span class="mf">0.5</span><span class="o">&gt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">c</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">/</span><span class="mi">3</span><span class="o">?</span><span class="nx">a</span><span class="o">+</span><span class="mi">6</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">/</span><span class="mi">3</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="nx">b</span><span class="o">=</span><span class="mf">0.5</span><span class="o">&gt;=</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">)}</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setStyle</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="sr">/^rgb\((\d+),(\d+),(\d+)\)$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="nx">a</span><span class="o">=</span><span class="sr">/^rgb\((\d+),(\d+),(\d+)\)$/i</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mi">10</span><span class="p">))</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mi">10</span><span class="p">))</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">255</span><span class="p">,</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="mi">10</span><span class="p">))</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="sr">/^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="nx">a</span><span class="o">=</span><span class="sr">/^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="LC11" class="blob-code js-file-line"><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mi">10</span><span class="p">))</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="mi">10</span><span class="p">))</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">100</span><span class="p">,</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="mi">10</span><span class="p">))</span><span class="o">/</span><span class="mi">100</span><span class="p">,</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="sr">/^\#([0-9a-f]{6})$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="nx">a</span><span class="o">=</span><span class="sr">/^\#([0-9a-f]{6})$/i</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="mi">16</span><span class="p">)),</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="sr">/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="nx">a</span><span class="o">=</span><span class="sr">/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="mi">16</span><span class="p">)),</span><span class="k">this</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="sr">/^(\w+)$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ColorKeywords</span><span class="p">[</span><span class="nx">a</span><span class="p">]),</span><span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="LC12" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copyGammaToLinear</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copyLinearToGamma</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">convertGammaToLinear</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">convertLinearToGamma</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">getHex</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="mi">255</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="o">^</span><span class="mi">255</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="o">^</span><span class="mi">255</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="LC13" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">&lt;&lt;</span><span class="mi">0</span><span class="p">},</span><span class="nx">getHexString</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="s2">&quot;000000&quot;</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">getHex</span><span class="p">().</span><span class="nx">toString</span><span class="p">(</span><span class="mi">16</span><span class="p">)).</span><span class="nx">slice</span><span class="p">(</span><span class="o">-</span><span class="mi">6</span><span class="p">)},</span><span class="nx">getHSL</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="nx">h</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">l</span><span class="o">:</span><span class="mi">0</span><span class="p">};</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">===</span><span class="nx">e</span><span class="p">)</span><span class="nx">f</span><span class="o">=</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mf">0.5</span><span class="o">&gt;=</span><span class="nx">g</span><span class="o">?</span><span class="nx">i</span><span class="o">/</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">-</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="p">);</span><span class="k">switch</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span><span class="k">case</span> <span class="nx">b</span><span class="o">:</span><span class="nx">h</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">/</span><span class="nx">i</span><span class="o">+</span><span class="p">(</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="o">?</span><span class="mi">6</span><span class="o">:</span><span class="mi">0</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">c</span><span class="o">:</span><span class="nx">h</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">/</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">d</span><span class="o">:</span><span class="nx">h</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">/</span><span class="nx">i</span><span class="o">+</span><span class="mi">4</span><span class="p">}</span><span class="nx">h</span><span class="o">/=</span><span class="mi">6</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">s</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">}}(),</span><span class="nx">getStyle</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="s2">&quot;rgb(&quot;</span><span class="o">+</span><span class="p">(</span><span class="mi">255</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">|</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="p">(</span><span class="mi">255</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">|</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="p">(</span><span class="mi">255</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">|</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">},</span><span class="nx">offsetHSL</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="LC14" class="blob-code js-file-line"><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getHSL</span><span class="p">();</span><span class="nx">d</span><span class="p">.</span><span class="nx">h</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">s</span><span class="o">+=</span><span class="nx">b</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">l</span><span class="o">+=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setHSL</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">h</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">s</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">l</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">addColors</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">addScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiply</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">*=</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">*=</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">*=</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">lerp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">+=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">+=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="LC15" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">+=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">).</span><span class="nx">setRGB</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">)}};</span></td>
      </tr>
      <tr>
        <td id="L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="LC16" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ColorKeywords</span><span class="o">=</span><span class="p">{</span><span class="nx">aliceblue</span><span class="o">:</span><span class="mi">15792383</span><span class="p">,</span><span class="nx">antiquewhite</span><span class="o">:</span><span class="mi">16444375</span><span class="p">,</span><span class="nx">aqua</span><span class="o">:</span><span class="mi">65535</span><span class="p">,</span><span class="nx">aquamarine</span><span class="o">:</span><span class="mi">8388564</span><span class="p">,</span><span class="nx">azure</span><span class="o">:</span><span class="mi">15794175</span><span class="p">,</span><span class="nx">beige</span><span class="o">:</span><span class="mi">16119260</span><span class="p">,</span><span class="nx">bisque</span><span class="o">:</span><span class="mi">16770244</span><span class="p">,</span><span class="nx">black</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">blanchedalmond</span><span class="o">:</span><span class="mi">16772045</span><span class="p">,</span><span class="nx">blue</span><span class="o">:</span><span class="mi">255</span><span class="p">,</span><span class="nx">blueviolet</span><span class="o">:</span><span class="mi">9055202</span><span class="p">,</span><span class="nx">brown</span><span class="o">:</span><span class="mi">10824234</span><span class="p">,</span><span class="nx">burlywood</span><span class="o">:</span><span class="mi">14596231</span><span class="p">,</span><span class="nx">cadetblue</span><span class="o">:</span><span class="mi">6266528</span><span class="p">,</span><span class="nx">chartreuse</span><span class="o">:</span><span class="mi">8388352</span><span class="p">,</span><span class="nx">chocolate</span><span class="o">:</span><span class="mi">13789470</span><span class="p">,</span><span class="nx">coral</span><span class="o">:</span><span class="mi">16744272</span><span class="p">,</span><span class="nx">cornflowerblue</span><span class="o">:</span><span class="mi">6591981</span><span class="p">,</span><span class="nx">cornsilk</span><span class="o">:</span><span class="mi">16775388</span><span class="p">,</span><span class="nx">crimson</span><span class="o">:</span><span class="mi">14423100</span><span class="p">,</span><span class="nx">cyan</span><span class="o">:</span><span class="mi">65535</span><span class="p">,</span><span class="nx">darkblue</span><span class="o">:</span><span class="mi">139</span><span class="p">,</span><span class="nx">darkcyan</span><span class="o">:</span><span class="mi">35723</span><span class="p">,</span><span class="nx">darkgoldenrod</span><span class="o">:</span><span class="mi">12092939</span><span class="p">,</span><span class="nx">darkgray</span><span class="o">:</span><span class="mi">11119017</span><span class="p">,</span><span class="nx">darkgreen</span><span class="o">:</span><span class="mi">25600</span><span class="p">,</span><span class="nx">darkgrey</span><span class="o">:</span><span class="mi">11119017</span><span class="p">,</span><span class="nx">darkkhaki</span><span class="o">:</span><span class="mi">12433259</span><span class="p">,</span><span class="nx">darkmagenta</span><span class="o">:</span><span class="mi">9109643</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="LC17" class="blob-code js-file-line"><span class="nx">darkolivegreen</span><span class="o">:</span><span class="mi">5597999</span><span class="p">,</span><span class="nx">darkorange</span><span class="o">:</span><span class="mi">16747520</span><span class="p">,</span><span class="nx">darkorchid</span><span class="o">:</span><span class="mi">10040012</span><span class="p">,</span><span class="nx">darkred</span><span class="o">:</span><span class="mi">9109504</span><span class="p">,</span><span class="nx">darksalmon</span><span class="o">:</span><span class="mi">15308410</span><span class="p">,</span><span class="nx">darkseagreen</span><span class="o">:</span><span class="mi">9419919</span><span class="p">,</span><span class="nx">darkslateblue</span><span class="o">:</span><span class="mi">4734347</span><span class="p">,</span><span class="nx">darkslategray</span><span class="o">:</span><span class="mi">3100495</span><span class="p">,</span><span class="nx">darkslategrey</span><span class="o">:</span><span class="mi">3100495</span><span class="p">,</span><span class="nx">darkturquoise</span><span class="o">:</span><span class="mi">52945</span><span class="p">,</span><span class="nx">darkviolet</span><span class="o">:</span><span class="mi">9699539</span><span class="p">,</span><span class="nx">deeppink</span><span class="o">:</span><span class="mi">16716947</span><span class="p">,</span><span class="nx">deepskyblue</span><span class="o">:</span><span class="mi">49151</span><span class="p">,</span><span class="nx">dimgray</span><span class="o">:</span><span class="mi">6908265</span><span class="p">,</span><span class="nx">dimgrey</span><span class="o">:</span><span class="mi">6908265</span><span class="p">,</span><span class="nx">dodgerblue</span><span class="o">:</span><span class="mi">2003199</span><span class="p">,</span><span class="nx">firebrick</span><span class="o">:</span><span class="mi">11674146</span><span class="p">,</span><span class="nx">floralwhite</span><span class="o">:</span><span class="mi">16775920</span><span class="p">,</span><span class="nx">forestgreen</span><span class="o">:</span><span class="mi">2263842</span><span class="p">,</span><span class="nx">fuchsia</span><span class="o">:</span><span class="mi">16711935</span><span class="p">,</span><span class="nx">gainsboro</span><span class="o">:</span><span class="mi">14474460</span><span class="p">,</span><span class="nx">ghostwhite</span><span class="o">:</span><span class="mi">16316671</span><span class="p">,</span><span class="nx">gold</span><span class="o">:</span><span class="mi">16766720</span><span class="p">,</span><span class="nx">goldenrod</span><span class="o">:</span><span class="mi">14329120</span><span class="p">,</span><span class="nx">gray</span><span class="o">:</span><span class="mi">8421504</span><span class="p">,</span><span class="nx">green</span><span class="o">:</span><span class="mi">32768</span><span class="p">,</span><span class="nx">greenyellow</span><span class="o">:</span><span class="mi">11403055</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="LC18" class="blob-code js-file-line"><span class="nx">grey</span><span class="o">:</span><span class="mi">8421504</span><span class="p">,</span><span class="nx">honeydew</span><span class="o">:</span><span class="mi">15794160</span><span class="p">,</span><span class="nx">hotpink</span><span class="o">:</span><span class="mi">16738740</span><span class="p">,</span><span class="nx">indianred</span><span class="o">:</span><span class="mi">13458524</span><span class="p">,</span><span class="nx">indigo</span><span class="o">:</span><span class="mi">4915330</span><span class="p">,</span><span class="nx">ivory</span><span class="o">:</span><span class="mi">16777200</span><span class="p">,</span><span class="nx">khaki</span><span class="o">:</span><span class="mi">15787660</span><span class="p">,</span><span class="nx">lavender</span><span class="o">:</span><span class="mi">15132410</span><span class="p">,</span><span class="nx">lavenderblush</span><span class="o">:</span><span class="mi">16773365</span><span class="p">,</span><span class="nx">lawngreen</span><span class="o">:</span><span class="mi">8190976</span><span class="p">,</span><span class="nx">lemonchiffon</span><span class="o">:</span><span class="mi">16775885</span><span class="p">,</span><span class="nx">lightblue</span><span class="o">:</span><span class="mi">11393254</span><span class="p">,</span><span class="nx">lightcoral</span><span class="o">:</span><span class="mi">15761536</span><span class="p">,</span><span class="nx">lightcyan</span><span class="o">:</span><span class="mi">14745599</span><span class="p">,</span><span class="nx">lightgoldenrodyellow</span><span class="o">:</span><span class="mi">16448210</span><span class="p">,</span><span class="nx">lightgray</span><span class="o">:</span><span class="mi">13882323</span><span class="p">,</span><span class="nx">lightgreen</span><span class="o">:</span><span class="mi">9498256</span><span class="p">,</span><span class="nx">lightgrey</span><span class="o">:</span><span class="mi">13882323</span><span class="p">,</span><span class="nx">lightpink</span><span class="o">:</span><span class="mi">16758465</span><span class="p">,</span><span class="nx">lightsalmon</span><span class="o">:</span><span class="mi">16752762</span><span class="p">,</span><span class="nx">lightseagreen</span><span class="o">:</span><span class="mi">2142890</span><span class="p">,</span><span class="nx">lightskyblue</span><span class="o">:</span><span class="mi">8900346</span><span class="p">,</span><span class="nx">lightslategray</span><span class="o">:</span><span class="mi">7833753</span><span class="p">,</span><span class="nx">lightslategrey</span><span class="o">:</span><span class="mi">7833753</span><span class="p">,</span><span class="nx">lightsteelblue</span><span class="o">:</span><span class="mi">11584734</span><span class="p">,</span><span class="nx">lightyellow</span><span class="o">:</span><span class="mi">16777184</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="LC19" class="blob-code js-file-line"><span class="nx">lime</span><span class="o">:</span><span class="mi">65280</span><span class="p">,</span><span class="nx">limegreen</span><span class="o">:</span><span class="mi">3329330</span><span class="p">,</span><span class="nx">linen</span><span class="o">:</span><span class="mi">16445670</span><span class="p">,</span><span class="nx">magenta</span><span class="o">:</span><span class="mi">16711935</span><span class="p">,</span><span class="nx">maroon</span><span class="o">:</span><span class="mi">8388608</span><span class="p">,</span><span class="nx">mediumaquamarine</span><span class="o">:</span><span class="mi">6737322</span><span class="p">,</span><span class="nx">mediumblue</span><span class="o">:</span><span class="mi">205</span><span class="p">,</span><span class="nx">mediumorchid</span><span class="o">:</span><span class="mi">12211667</span><span class="p">,</span><span class="nx">mediumpurple</span><span class="o">:</span><span class="mi">9662683</span><span class="p">,</span><span class="nx">mediumseagreen</span><span class="o">:</span><span class="mi">3978097</span><span class="p">,</span><span class="nx">mediumslateblue</span><span class="o">:</span><span class="mi">8087790</span><span class="p">,</span><span class="nx">mediumspringgreen</span><span class="o">:</span><span class="mi">64154</span><span class="p">,</span><span class="nx">mediumturquoise</span><span class="o">:</span><span class="mi">4772300</span><span class="p">,</span><span class="nx">mediumvioletred</span><span class="o">:</span><span class="mi">13047173</span><span class="p">,</span><span class="nx">midnightblue</span><span class="o">:</span><span class="mi">1644912</span><span class="p">,</span><span class="nx">mintcream</span><span class="o">:</span><span class="mi">16121850</span><span class="p">,</span><span class="nx">mistyrose</span><span class="o">:</span><span class="mi">16770273</span><span class="p">,</span><span class="nx">moccasin</span><span class="o">:</span><span class="mi">16770229</span><span class="p">,</span><span class="nx">navajowhite</span><span class="o">:</span><span class="mi">16768685</span><span class="p">,</span><span class="nx">navy</span><span class="o">:</span><span class="mi">128</span><span class="p">,</span><span class="nx">oldlace</span><span class="o">:</span><span class="mi">16643558</span><span class="p">,</span><span class="nx">olive</span><span class="o">:</span><span class="mi">8421376</span><span class="p">,</span><span class="nx">olivedrab</span><span class="o">:</span><span class="mi">7048739</span><span class="p">,</span><span class="nx">orange</span><span class="o">:</span><span class="mi">16753920</span><span class="p">,</span><span class="nx">orangered</span><span class="o">:</span><span class="mi">16729344</span><span class="p">,</span><span class="nx">orchid</span><span class="o">:</span><span class="mi">14315734</span><span class="p">,</span><span class="nx">palegoldenrod</span><span class="o">:</span><span class="mi">15657130</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="LC20" class="blob-code js-file-line"><span class="nx">palegreen</span><span class="o">:</span><span class="mi">10025880</span><span class="p">,</span><span class="nx">paleturquoise</span><span class="o">:</span><span class="mi">11529966</span><span class="p">,</span><span class="nx">palevioletred</span><span class="o">:</span><span class="mi">14381203</span><span class="p">,</span><span class="nx">papayawhip</span><span class="o">:</span><span class="mi">16773077</span><span class="p">,</span><span class="nx">peachpuff</span><span class="o">:</span><span class="mi">16767673</span><span class="p">,</span><span class="nx">peru</span><span class="o">:</span><span class="mi">13468991</span><span class="p">,</span><span class="nx">pink</span><span class="o">:</span><span class="mi">16761035</span><span class="p">,</span><span class="nx">plum</span><span class="o">:</span><span class="mi">14524637</span><span class="p">,</span><span class="nx">powderblue</span><span class="o">:</span><span class="mi">11591910</span><span class="p">,</span><span class="nx">purple</span><span class="o">:</span><span class="mi">8388736</span><span class="p">,</span><span class="nx">red</span><span class="o">:</span><span class="mi">16711680</span><span class="p">,</span><span class="nx">rosybrown</span><span class="o">:</span><span class="mi">12357519</span><span class="p">,</span><span class="nx">royalblue</span><span class="o">:</span><span class="mi">4286945</span><span class="p">,</span><span class="nx">saddlebrown</span><span class="o">:</span><span class="mi">9127187</span><span class="p">,</span><span class="nx">salmon</span><span class="o">:</span><span class="mi">16416882</span><span class="p">,</span><span class="nx">sandybrown</span><span class="o">:</span><span class="mi">16032864</span><span class="p">,</span><span class="nx">seagreen</span><span class="o">:</span><span class="mi">3050327</span><span class="p">,</span><span class="nx">seashell</span><span class="o">:</span><span class="mi">16774638</span><span class="p">,</span><span class="nx">sienna</span><span class="o">:</span><span class="mi">10506797</span><span class="p">,</span><span class="nx">silver</span><span class="o">:</span><span class="mi">12632256</span><span class="p">,</span><span class="nx">skyblue</span><span class="o">:</span><span class="mi">8900331</span><span class="p">,</span><span class="nx">slateblue</span><span class="o">:</span><span class="mi">6970061</span><span class="p">,</span><span class="nx">slategray</span><span class="o">:</span><span class="mi">7372944</span><span class="p">,</span><span class="nx">slategrey</span><span class="o">:</span><span class="mi">7372944</span><span class="p">,</span><span class="nx">snow</span><span class="o">:</span><span class="mi">16775930</span><span class="p">,</span><span class="nx">springgreen</span><span class="o">:</span><span class="mi">65407</span><span class="p">,</span><span class="nx">steelblue</span><span class="o">:</span><span class="mi">4620980</span><span class="p">,</span><span class="nx">tan</span><span class="o">:</span><span class="mi">13808780</span><span class="p">,</span><span class="nx">teal</span><span class="o">:</span><span class="mi">32896</span><span class="p">,</span><span class="nx">thistle</span><span class="o">:</span><span class="mi">14204888</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="LC21" class="blob-code js-file-line"><span class="nx">tomato</span><span class="o">:</span><span class="mi">16737095</span><span class="p">,</span><span class="nx">turquoise</span><span class="o">:</span><span class="mi">4251856</span><span class="p">,</span><span class="nx">violet</span><span class="o">:</span><span class="mi">15631086</span><span class="p">,</span><span class="nx">wheat</span><span class="o">:</span><span class="mi">16113331</span><span class="p">,</span><span class="nx">white</span><span class="o">:</span><span class="mi">16777215</span><span class="p">,</span><span class="nx">whitesmoke</span><span class="o">:</span><span class="mi">16119285</span><span class="p">,</span><span class="nx">yellow</span><span class="o">:</span><span class="mi">16776960</span><span class="p">,</span><span class="nx">yellowgreen</span><span class="o">:</span><span class="mi">10145074</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="mi">1</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="LC22" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">,</span><span class="nx">_x</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">_y</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">_z</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">_w</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">_euler</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">_updateEuler</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">_euler</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_euler</span><span class="p">.</span><span class="nx">setFromQuaternion</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)},</span><span class="nx">get</span> <span class="nx">x</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="p">},</span><span class="nx">set</span> <span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateEuler</span><span class="p">()},</span><span class="nx">get</span> <span class="nx">y</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="p">},</span><span class="nx">set</span> <span class="nx">y</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateEuler</span><span class="p">()},</span><span class="nx">get</span> <span class="nx">z</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="p">},</span><span class="nx">set</span> <span class="nx">z</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateEuler</span><span class="p">()},</span><span class="nx">get</span> <span class="nx">w</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="p">},</span><span class="nx">set</span> <span class="nx">w</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateEuler</span><span class="p">()},</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="LC23" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">_updateEuler</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_w</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateEuler</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromEuler</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;ERROR: Quaternion&#39;s .setFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">_x</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">_y</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">_z</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">_x</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">_y</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">_z</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">||</span><span class="s2">&quot;XYZ&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="LC24" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;YXZ&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;ZXY&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;ZYX&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;YZX&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;XZY&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="LC25" class="blob-code js-file-line"><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">);</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateEuler</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromAxisAngle</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateEuler</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromRotationMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">f</span><span class="o">+</span><span class="nx">b</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">j</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mf">0.5</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="mf">0.25</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="p">(</span><span class="nx">i</span><span class="o">-</span><span class="nx">h</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">g</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="nx">c</span><span class="o">-</span><span class="nx">f</span><span class="o">-</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="p">(</span><span class="nx">i</span><span class="o">-</span><span class="nx">h</span><span class="p">)</span><span class="o">/</span></td>
      </tr>
      <tr>
        <td id="L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="LC26" class="blob-code js-file-line"><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="mf">0.25</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">g</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="nx">f</span><span class="o">-</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">g</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="mf">0.25</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="p">(</span><span class="nx">h</span><span class="o">+</span><span class="nx">i</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="o">-</span><span class="nx">f</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">g</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="p">(</span><span class="nx">h</span><span class="o">+</span><span class="nx">i</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="mf">0.25</span><span class="o">*</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateEuler</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">inverse</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">conjugate</span><span class="p">().</span><span class="nx">normalize</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">conjugate</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">*=-</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">*=-</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">*=-</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateEuler</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">lengthSq</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="p">},</span></td>
      </tr>
      <tr>
        <td id="L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="LC27" class="blob-code js-file-line"><span class="nx">length</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="p">)},</span><span class="nx">normalize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">();</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">*=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">*=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">*=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">*=</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiply</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Quaternion&#39;s .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead.&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplyQuaternions</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">))</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplyQuaternions</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)},</span><span class="nx">multiplyQuaternions</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="LC28" class="blob-code js-file-line"><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_z</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_w</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">_x</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">_y</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">_z</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">_w</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">j</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">j</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">i</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">j</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">i</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">j</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">i</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateEuler</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyVector3</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Quaternion&#39;s .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">applyQuaternion</span><span class="p">(</span><span class="k">this</span><span class="p">)},</span><span class="nx">slerp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">_w</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">_x</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">_y</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">_z</span><span class="p">;</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">h</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=-</span><span class="nx">a</span><span class="p">.</span><span class="nx">_w</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="LC29" class="blob-code js-file-line"><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">_x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=-</span><span class="nx">a</span><span class="p">.</span><span class="nx">_y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=-</span><span class="nx">a</span><span class="p">.</span><span class="nx">_z</span><span class="p">,</span><span class="nx">h</span><span class="o">=-</span><span class="nx">h</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;=</span><span class="nx">h</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">acos</span><span class="p">(</span><span class="nx">h</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">h</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mf">0.001</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="p">),</span><span class="k">this</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">((</span><span class="mi">1</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">*</span><span class="nx">g</span><span class="p">)</span><span class="o">/</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">b</span><span class="o">*</span><span class="nx">g</span><span class="p">)</span><span class="o">/</span><span class="nx">i</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateEuler</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">_x</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">_y</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">_z</span><span class="o">===</span></td>
      </tr>
      <tr>
        <td id="L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="LC30" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">_w</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="p">},</span><span class="nx">fromArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateEuler</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">toArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="p">]},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_w</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">.</span><span class="nx">slerp</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">slerp</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="LC31" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setX</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setY</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setComponent</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;index is out of range: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">);}},</span><span class="nx">getComponent</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;index is out of range: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">);}},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="LC32" class="blob-code js-file-line"><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Vector2&#39;s .add() now only accepts one argument. Use .addVectors( a, b ) instead.&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">addVectors</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">addVectors</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">addScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">sub</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Vector2&#39;s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">-=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">-=</span></td>
      </tr>
      <tr>
        <td id="L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="LC33" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">subVectors</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">divideScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">min</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">max</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">clamp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="LC34" class="blob-code js-file-line"><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">negate</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)},</span><span class="nx">dot</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">},</span><span class="nx">lengthSq</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">},</span><span class="nx">length</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)},</span><span class="nx">normalize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">())},</span><span class="nx">distanceTo</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">distanceToSquared</span><span class="p">(</span><span class="nx">a</span><span class="p">))},</span><span class="nx">distanceToSquared</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="p">},</span><span class="nx">setLength</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">();</span><span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="o">/</span></td>
      </tr>
      <tr>
        <td id="L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="LC35" class="blob-code js-file-line"><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">lerp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">},</span><span class="nx">fromArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">toArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">]},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="LC36" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setX</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setY</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setZ</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setComponent</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;index is out of range: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">);}},</span><span class="nx">getComponent</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;index is out of range: &quot;</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="LC37" class="blob-code js-file-line"><span class="nx">a</span><span class="p">);}},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Vector3&#39;s .add() now only accepts one argument. Use .addVectors( a, b ) instead.&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">addVectors</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">addScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">addVectors</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">sub</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Vector3&#39;s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.&quot;</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="LC38" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">-=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">-=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">-=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">subVectors</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiply</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Vector3&#39;s .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplyVectors</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyVectors</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L39" class="blob-num js-line-number" data-line-number="39"></td>
        <td id="LC39" class="blob-code js-file-line"><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">applyMatrix3</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">applyMatrix4</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">applyProjection</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">15</span><span class="p">]);</span></td>
      </tr>
      <tr>
        <td id="L40" class="blob-num js-line-number" data-line-number="40"></td>
        <td id="LC40" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">])</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">])</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">])</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">applyQuaternion</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">b</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="o">=-</span><span class="nx">e</span><span class="o">*</span><span class="nx">b</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="o">*-</span><span class="nx">e</span><span class="o">+</span><span class="nx">i</span><span class="o">*-</span><span class="nx">h</span><span class="o">-</span><span class="nx">j</span><span class="o">*-</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">i</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="o">*-</span><span class="nx">f</span><span class="o">+</span><span class="nx">j</span><span class="o">*-</span><span class="nx">e</span><span class="o">-</span><span class="nx">g</span><span class="o">*-</span><span class="nx">h</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="o">*-</span><span class="nx">h</span><span class="o">+</span><span class="nx">g</span><span class="o">*-</span><span class="nx">f</span><span class="o">-</span><span class="nx">i</span><span class="o">*-</span><span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">transformDirection</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L41" class="blob-num js-line-number" data-line-number="41"></td>
        <td id="LC41" class="blob-code js-file-line"><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">divide</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">/=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">/=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">/=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">divideScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*=</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">min</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">max</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">clamp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span></td>
      </tr>
      <tr>
        <td id="L42" class="blob-num js-line-number" data-line-number="42"></td>
        <td id="LC42" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">negate</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)},</span><span class="nx">dot</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">},</span><span class="nx">lengthSq</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">},</span><span class="nx">length</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">)},</span><span class="nx">lengthManhattan</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">)},</span><span class="nx">normalize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">())},</span></td>
      </tr>
      <tr>
        <td id="L43" class="blob-num js-line-number" data-line-number="43"></td>
        <td id="LC43" class="blob-code js-file-line"><span class="nx">setLength</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">();</span><span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="o">/</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">lerp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">cross</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Vector3&#39;s .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">crossVectors</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L44" class="blob-num js-line-number" data-line-number="44"></td>
        <td id="LC44" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">angleTo</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">()</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">());</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">acos</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">clamp</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">))},</span><span class="nx">distanceTo</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">distanceToSquared</span><span class="p">(</span><span class="nx">a</span><span class="p">))},</span><span class="nx">distanceToSquared</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="p">},</span><span class="nx">setEulerFromRotationMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;REMOVED: Vector3&#39;s setEulerFromRotationMatrix has been removed in favor of Euler.setFromRotationMatrix(), please update your code.&quot;</span><span class="p">)},</span></td>
      </tr>
      <tr>
        <td id="L45" class="blob-num js-line-number" data-line-number="45"></td>
        <td id="LC45" class="blob-code js-file-line"><span class="nx">setEulerFromQuaternion</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;REMOVED: Vector3&#39;s setEulerFromQuaternion: has been removed in favor of Euler.setFromQuaternion(), please update your code.&quot;</span><span class="p">)},</span><span class="nx">getPositionFromMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">getScaleFromMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">2</span><span class="p">]).</span><span class="nx">length</span><span class="p">(),</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">6</span><span class="p">]).</span><span class="nx">length</span><span class="p">(),</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">10</span><span class="p">]).</span><span class="nx">length</span><span class="p">();</span></td>
      </tr>
      <tr>
        <td id="L46" class="blob-num js-line-number" data-line-number="46"></td>
        <td id="LC46" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">getColumnFromMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">4</span><span class="o">*</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">},</span><span class="nx">fromArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">toArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">]},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">)}};</span></td>
      </tr>
      <tr>
        <td id="L47" class="blob-num js-line-number" data-line-number="47"></td>
        <td id="LC47" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">extend</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">.</span><span class="nx">prototype</span><span class="p">,{</span><span class="nx">applyEuler</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">b</span><span class="p">.</span><span class="nx">order</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;ERROR: Vector3&#39;s .applyEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.&quot;</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">setFromEuler</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">applyQuaternion</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">applyAxisAngle</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">setFromAxisAngle</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">applyQuaternion</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">projectOnVector</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L48" class="blob-num js-line-number" data-line-number="48"></td>
        <td id="LC48" class="blob-code js-file-line"><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">b</span><span class="p">)}}(),</span><span class="nx">projectOnPlane</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">projectOnVector</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">a</span><span class="p">)}}(),</span><span class="nx">reflect</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nx">projectOnVector</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">)}}()});</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="mi">1</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L49" class="blob-num js-line-number" data-line-number="49"></td>
        <td id="LC49" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setX</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setY</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setZ</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setW</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setComponent</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="mi">3</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;index is out of range: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">);}},</span><span class="nx">getComponent</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">case</span> <span class="mi">0</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L50" class="blob-num js-line-number" data-line-number="50"></td>
        <td id="LC50" class="blob-code js-file-line"><span class="k">case</span> <span class="mi">1</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">case</span> <span class="mi">2</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">case</span> <span class="mi">3</span><span class="o">:</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;index is out of range: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">);}},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Vector4&#39;s .add() now only accepts one argument. Use .addVectors( a, b ) instead.&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">addVectors</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">addScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">+=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span></td>
      </tr>
      <tr>
        <td id="L51" class="blob-num js-line-number" data-line-number="51"></td>
        <td id="LC51" class="blob-code js-file-line"><span class="nx">addVectors</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">sub</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Vector4&#39;s .sub() now only accepts one argument. Use .subVectors( a, b ) instead.&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">-=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">-=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">-=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">-=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">subVectors</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span></td>
      </tr>
      <tr>
        <td id="L52" class="blob-num js-line-number" data-line-number="52"></td>
        <td id="LC52" class="blob-code js-file-line"><span class="nx">applyMatrix4</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">divideScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*=</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">*=</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setAxisAngleFromQuaternion</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">acos</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">);</span><span class="mi">1</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L53" class="blob-num js-line-number" data-line-number="53"></td>
        <td id="LC53" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">/</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setAxisAngleFromRotationMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="mf">0.01</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">h</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mf">0.01</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mf">0.01</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">i</span><span class="o">-</span><span class="nx">b</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="mf">0.1</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">h</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mf">0.1</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mf">0.1</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mf">0.1</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="nx">g</span><span class="o">+</span><span class="nx">j</span><span class="o">-</span><span class="mi">3</span><span class="p">))</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="p">(</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">h</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="nx">b</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">j</span><span class="o">?</span><span class="mf">0.01</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="o">=</span><span class="mf">0.707106781</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">e</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="o">/</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="nx">g</span><span class="o">&gt;</span><span class="nx">j</span><span class="o">?</span><span class="mf">0.01</span><span class="o">&gt;</span><span class="nx">g</span><span class="o">?</span></td>
      </tr>
      <tr>
        <td id="L54" class="blob-num js-line-number" data-line-number="54"></td>
        <td id="LC54" class="blob-code js-file-line"><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mf">0.707106781</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mf">0.707106781</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">g</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">i</span><span class="o">/</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="mf">0.01</span><span class="o">&gt;</span><span class="nx">j</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">=</span><span class="mf">0.707106781</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">j</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">f</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="o">/</span><span class="nx">d</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">((</span><span class="nx">b</span><span class="o">-</span><span class="nx">i</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">i</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">h</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">h</span><span class="o">-</span><span class="nx">d</span><span class="p">));</span><span class="mf">0.001</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">i</span><span class="p">)</span><span class="o">/</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">/</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="p">(</span><span class="nx">h</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">/</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">acos</span><span class="p">((</span><span class="nx">e</span><span class="o">+</span><span class="nx">g</span><span class="o">+</span><span class="nx">j</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">min</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">max</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L55" class="blob-num js-line-number" data-line-number="55"></td>
        <td id="LC55" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">clamp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">negate</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">)},</span><span class="nx">dot</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">},</span><span class="nx">lengthSq</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">},</span><span class="nx">length</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L56" class="blob-num js-line-number" data-line-number="56"></td>
        <td id="LC56" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">)},</span><span class="nx">lengthManhattan</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">)},</span><span class="nx">normalize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">())},</span><span class="nx">setLength</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">();</span><span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="o">/</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">lerp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">+=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">+=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L57" class="blob-num js-line-number" data-line-number="57"></td>
        <td id="LC57" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">},</span><span class="nx">fromArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">toArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">]},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">w</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Euler</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Euler</span><span class="p">.</span><span class="nx">DefaultOrder</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Euler</span><span class="p">.</span><span class="nx">RotationOrders</span><span class="o">=</span><span class="s2">&quot;XYZ YZX ZXY XZY YXZ ZYX&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Euler</span><span class="p">.</span><span class="nx">DefaultOrder</span><span class="o">=</span><span class="s2">&quot;XYZ&quot;</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L58" class="blob-num js-line-number" data-line-number="58"></td>
        <td id="LC58" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Euler</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Euler</span><span class="p">,</span><span class="nx">_x</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">_y</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">_z</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">_order</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Euler</span><span class="p">.</span><span class="nx">DefaultOrder</span><span class="p">,</span><span class="nx">_quaternion</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">_updateQuaternion</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">_quaternion</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_quaternion</span><span class="p">.</span><span class="nx">setFromEuler</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)},</span><span class="nx">get</span> <span class="nx">x</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="p">},</span><span class="nx">set</span> <span class="nx">x</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateQuaternion</span><span class="p">()},</span><span class="nx">get</span> <span class="nx">y</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="p">},</span><span class="nx">set</span> <span class="nx">y</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateQuaternion</span><span class="p">()},</span><span class="nx">get</span> <span class="nx">z</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="p">},</span><span class="nx">set</span> <span class="nx">z</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateQuaternion</span><span class="p">()},</span><span class="nx">get</span> <span class="nx">order</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="p">},</span><span class="nx">set</span> <span class="nx">order</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateQuaternion</span><span class="p">()},</span></td>
      </tr>
      <tr>
        <td id="L59" class="blob-num js-line-number" data-line-number="59"></td>
        <td id="LC59" class="blob-code js-file-line"><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateQuaternion</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_x</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_y</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_order</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateQuaternion</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromRotationMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="p">;</span><span class="s2">&quot;XYZ&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">asin</span><span class="p">(</span><span class="nx">c</span><span class="p">(</span><span class="nx">h</span><span class="p">)),</span><span class="mf">0.99999</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="o">-</span><span class="nx">j</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L60" class="blob-num js-line-number" data-line-number="60"></td>
        <td id="LC60" class="blob-code js-file-line"><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="o">-</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span><span class="o">:</span><span class="s2">&quot;YXZ&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">asin</span><span class="p">(</span><span class="o">-</span><span class="nx">c</span><span class="p">(</span><span class="nx">j</span><span class="p">)),</span><span class="mf">0.99999</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="o">-</span><span class="nx">l</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span><span class="o">:</span><span class="s2">&quot;ZXY&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">asin</span><span class="p">(</span><span class="nx">c</span><span class="p">(</span><span class="nx">m</span><span class="p">)),</span><span class="mf">0.99999</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">m</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="o">-</span><span class="nx">l</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="o">-</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">e</span><span class="p">)))</span><span class="o">:</span><span class="s2">&quot;ZYX&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">asin</span><span class="p">(</span><span class="o">-</span><span class="nx">c</span><span class="p">(</span><span class="nx">l</span><span class="p">)),</span><span class="mf">0.99999</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">e</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="o">-</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="p">)))</span><span class="o">:</span><span class="s2">&quot;YZX&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L61" class="blob-num js-line-number" data-line-number="61"></td>
        <td id="LC61" class="blob-code js-file-line"><span class="nb">Math</span><span class="p">.</span><span class="nx">asin</span><span class="p">(</span><span class="nx">c</span><span class="p">(</span><span class="nx">g</span><span class="p">)),</span><span class="mf">0.99999</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="o">-</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="o">-</span><span class="nx">l</span><span class="p">,</span><span class="nx">e</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">d</span><span class="p">)))</span><span class="o">:</span><span class="s2">&quot;XZY&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">asin</span><span class="p">(</span><span class="o">-</span><span class="nx">c</span><span class="p">(</span><span class="nx">f</span><span class="p">)),</span><span class="mf">0.99999</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">e</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="o">-</span><span class="nx">j</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="mi">0</span><span class="p">))</span><span class="o">:</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;WARNING: Euler.setFromRotationMatrix() given unsupported order: &quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateQuaternion</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromQuaternion</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="mi">1</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L62" class="blob-num js-line-number" data-line-number="62"></td>
        <td id="LC62" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="p">;</span><span class="s2">&quot;XYZ&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">),</span><span class="nx">g</span><span class="o">-</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">+</span><span class="nx">h</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">asin</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">))),</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">g</span><span class="o">+</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">-</span><span class="nx">h</span><span class="p">))</span><span class="o">:</span><span class="s2">&quot;YXZ&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">asin</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">))),</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">),</span><span class="nx">g</span><span class="o">-</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">+</span><span class="nx">h</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">),</span><span class="nx">g</span><span class="o">-</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="o">-</span><span class="nx">h</span><span class="p">))</span><span class="o">:</span><span class="s2">&quot;ZXY&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">asin</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">))),</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">g</span><span class="o">-</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">+</span><span class="nx">h</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">g</span><span class="o">-</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="o">-</span><span class="nx">h</span><span class="p">))</span><span class="o">:</span><span class="s2">&quot;ZYX&quot;</span><span class="o">===</span></td>
      </tr>
      <tr>
        <td id="L63" class="blob-num js-line-number" data-line-number="63"></td>
        <td id="LC63" class="blob-code js-file-line"><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">g</span><span class="o">-</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">+</span><span class="nx">h</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">asin</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">))),</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">),</span><span class="nx">g</span><span class="o">+</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">-</span><span class="nx">h</span><span class="p">))</span><span class="o">:</span><span class="s2">&quot;YZX&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">g</span><span class="o">-</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="o">-</span><span class="nx">h</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">),</span><span class="nx">g</span><span class="o">+</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">-</span><span class="nx">h</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">asin</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">))))</span><span class="o">:</span><span class="s2">&quot;XZY&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">),</span><span class="nx">g</span><span class="o">-</span><span class="nx">e</span><span class="o">+</span><span class="nx">f</span><span class="o">-</span><span class="nx">h</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">),</span><span class="nx">g</span><span class="o">+</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="o">-</span><span class="nx">h</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">asin</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">))))</span><span class="o">:</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;WARNING: Euler.setFromQuaternion() given unsupported order: &quot;</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L64" class="blob-num js-line-number" data-line-number="64"></td>
        <td id="LC64" class="blob-code js-file-line"><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateQuaternion</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">reorder</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">setFromEuler</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setFromQuaternion</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}}(),</span><span class="nx">fromArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]);</span><span class="k">this</span><span class="p">.</span><span class="nx">_updateQuaternion</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">toArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="p">]},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">_x</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">_y</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">_z</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">_order</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Euler</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_x</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L65" class="blob-num js-line-number" data-line-number="65"></td>
        <td id="LC65" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">_y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">_order</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line3</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">end</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L66" class="blob-num js-line-number" data-line-number="66"></td>
        <td id="LC66" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line3</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line3</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">end</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">start</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">end</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">end</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">center</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">).</span><span class="nx">addVectors</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">end</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)},</span><span class="nx">delta</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">).</span><span class="nx">subVectors</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">end</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">)},</span><span class="nx">distanceSq</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">.</span><span class="nx">distanceToSquared</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">end</span><span class="p">)},</span><span class="nx">distance</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">end</span><span class="p">)},</span><span class="nx">at</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L67" class="blob-num js-line-number" data-line-number="67"></td>
        <td id="LC67" class="blob-code js-file-line"><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">delta</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">)},</span><span class="nx">closestPointToPointParameter</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">end</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">clamp</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="k">return</span> <span class="nx">e</span><span class="p">}}(),</span><span class="nx">closestPointToPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">closestPointToPointParameter</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">delta</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">)},</span><span class="nx">applyMatrix4</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L68" class="blob-num js-line-number" data-line-number="68"></td>
        <td id="LC68" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">end</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">start</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">end</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">end</span><span class="p">)},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line3</span><span class="p">).</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Box2</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="kc">Infinity</span><span class="p">,</span><span class="kc">Infinity</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="o">-</span><span class="kc">Infinity</span><span class="p">,</span><span class="o">-</span><span class="kc">Infinity</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L69" class="blob-num js-line-number" data-line-number="69"></td>
        <td id="LC69" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Box2</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Box2</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromPoints</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">)}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">makeEmpty</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromCenterAndSize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L70" class="blob-num js-line-number" data-line-number="70"></td>
        <td id="LC70" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">sub</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makeEmpty</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="kc">Infinity</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">=-</span><span class="kc">Infinity</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">empty</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="p">},</span><span class="nx">center</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">).</span><span class="nx">addVectors</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)},</span><span class="nx">size</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">).</span><span class="nx">subVectors</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">)},</span><span class="nx">expandByPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L71" class="blob-num js-line-number" data-line-number="71"></td>
        <td id="LC71" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">expandByVector</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">expandByScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">addScalar</span><span class="p">(</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">addScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">containsPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">?!</span><span class="mi">1</span><span class="o">:!</span><span class="mi">0</span><span class="p">},</span><span class="nx">containsBox</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">?!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="p">},</span><span class="nx">getParameter</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L72" class="blob-num js-line-number" data-line-number="72"></td>
        <td id="LC72" class="blob-code js-file-line"><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="p">))},</span><span class="nx">isIntersectionBox</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">?!</span><span class="mi">1</span><span class="o">:!</span><span class="mi">0</span><span class="p">},</span><span class="nx">clampPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">b</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">).</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">clamp</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">)},</span><span class="nx">distanceToPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">clamp</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">).</span><span class="nx">sub</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">length</span><span class="p">()}}(),</span><span class="nx">intersect</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">union</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L73" class="blob-num js-line-number" data-line-number="73"></td>
        <td id="LC73" class="blob-code js-file-line"><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">translate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">)},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Box2</span><span class="p">).</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Box3</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="kc">Infinity</span><span class="p">,</span><span class="kc">Infinity</span><span class="p">,</span><span class="kc">Infinity</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="o">-</span><span class="kc">Infinity</span><span class="p">,</span><span class="o">-</span><span class="kc">Infinity</span><span class="p">,</span><span class="o">-</span><span class="kc">Infinity</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L74" class="blob-num js-line-number" data-line-number="74"></td>
        <td id="LC74" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Box3</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Box3</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromPoints</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">)}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">makeEmpty</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromCenterAndSize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L75" class="blob-num js-line-number" data-line-number="75"></td>
        <td id="LC75" class="blob-code js-file-line"><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">sub</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">setFromObject</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">makeEmpty</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">traverse</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">geometry</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">f</span><span class="p">]),</span><span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">expandByPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">)});</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L76" class="blob-num js-line-number" data-line-number="76"></td>
        <td id="LC76" class="blob-code js-file-line"><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makeEmpty</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="kc">Infinity</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">=-</span><span class="kc">Infinity</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">empty</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="p">},</span><span class="nx">center</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">).</span><span class="nx">addVectors</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)},</span><span class="nx">size</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">).</span><span class="nx">subVectors</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">)},</span><span class="nx">expandByPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">expandByVector</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L77" class="blob-num js-line-number" data-line-number="77"></td>
        <td id="LC77" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">expandByScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">addScalar</span><span class="p">(</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">addScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">containsPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">?!</span><span class="mi">1</span><span class="o">:!</span><span class="mi">0</span><span class="p">},</span><span class="nx">containsBox</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">?!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="p">},</span><span class="nx">getParameter</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">((</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L78" class="blob-num js-line-number" data-line-number="78"></td>
        <td id="LC78" class="blob-code js-file-line"><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="p">),(</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="p">))},</span><span class="nx">isIntersectionBox</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">?!</span><span class="mi">1</span><span class="o">:!</span><span class="mi">0</span><span class="p">},</span><span class="nx">clampPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">b</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">).</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">clamp</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">)},</span><span class="nx">distanceToPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">clamp</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">).</span><span class="nx">sub</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">length</span><span class="p">()}}(),</span><span class="nx">getBoundingSphere</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L79" class="blob-num js-line-number" data-line-number="79"></td>
        <td id="LC79" class="blob-code js-file-line"><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sphere</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">center</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">length</span><span class="p">();</span><span class="k">return</span> <span class="nx">b</span><span class="p">}}(),</span><span class="nx">intersect</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">union</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">applyMatrix4</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">];</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L80" class="blob-num js-line-number" data-line-number="80"></td>
        <td id="LC80" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">makeEmpty</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">setFromPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">translate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L81" class="blob-num js-line-number" data-line-number="81"></td>
        <td id="LC81" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">min</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">max</span><span class="p">)},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Box3</span><span class="p">).</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">9</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">f</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">i</span><span class="o">?</span><span class="nx">i</span><span class="o">:</span><span class="mi">1</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L82" class="blob-num js-line-number" data-line-number="82"></td>
        <td id="LC82" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">j</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">j</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">j</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">j</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">j</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">j</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">j</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">j</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">j</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">identity</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyVector3</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix3&#39;s .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix3</span><span class="p">(</span><span class="k">this</span><span class="p">)},</span></td>
      </tr>
      <tr>
        <td id="L83" class="blob-num js-line-number" data-line-number="83"></td>
        <td id="LC83" class="blob-code js-file-line"><span class="nx">multiplyVector3Array</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix3</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">}}(),</span><span class="nx">multiplyScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">determinant</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="k">return</span> <span class="nx">b</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">e</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">g</span><span class="p">},</span><span class="nx">getInverse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L84" class="blob-num js-line-number" data-line-number="84"></td>
        <td id="LC84" class="blob-code js-file-line"><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">-</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=-</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">d</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=-</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="nx">d</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="nx">d</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=-</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">d</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">-</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="nx">d</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=-</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="nx">d</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">+</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Matrix3.getInverse(): can&#39;t invert matrix, determinant is 0&quot;</span><span class="p">);</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;Matrix3.getInverse(): can&#39;t invert matrix, determinant is 0&quot;</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">identity</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span></td>
      </tr>
      <tr>
        <td id="L85" class="blob-num js-line-number" data-line-number="85"></td>
        <td id="LC85" class="blob-code js-file-line"><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">transpose</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">getNormalMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">transpose</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">transposeIntoArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">])}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">l</span><span class="o">?</span><span class="nx">l</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">q</span><span class="o">?</span><span class="nx">q</span><span class="o">:</span><span class="mi">1</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L86" class="blob-num js-line-number" data-line-number="86"></td>
        <td id="LC86" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">identity</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">extractPosition</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix4&#39;s .extractPosition() has been renamed to .copyPosition().&quot;</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L87" class="blob-num js-line-number" data-line-number="87"></td>
        <td id="LC87" class="blob-code js-file-line"><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">copyPosition</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">copyPosition</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">extractRotation</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]).</span><span class="nx">length</span><span class="p">(),</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]).</span><span class="nx">length</span><span class="p">(),</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]).</span><span class="nx">length</span><span class="p">();</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">makeRotationFromEuler</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span></td>
      </tr>
      <tr>
        <td id="L88" class="blob-num js-line-number" data-line-number="88"></td>
        <td id="LC88" class="blob-code js-file-line"><span class="k">typeof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;ERROR: Matrix&#39;s .makeRotationFromEuler() now expects a Euler rotation rather than a Vector3 and order.  Please update your code.&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">e</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">||</span><span class="s2">&quot;XYZ&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=-</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=-</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="p">}</span><span class="k">else</span><span class="s2">&quot;YXZ&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L89" class="blob-num js-line-number" data-line-number="89"></td>
        <td id="LC89" class="blob-code js-file-line"><span class="nx">j</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=-</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">j</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;ZXY&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=-</span><span class="nx">f</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=-</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;ZYX&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">l</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">j</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=-</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;YZX&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=-</span><span class="nx">c</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=-</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">j</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;XZY&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">order</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L90" class="blob-num js-line-number" data-line-number="90"></td>
        <td id="LC90" class="blob-code js-file-line"><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=-</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">l</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">j</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setRotationFromQuaternion</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix4&#39;s .setRotationFromQuaternion() has been deprecated in favor of makeRotationFromQuaternion.  Please update your code.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">makeRotationFromQuaternion</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">makeRotationFromQuaternion</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="nx">e</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L91" class="blob-num js-line-number" data-line-number="91"></td>
        <td id="LC91" class="blob-code js-file-line"><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">i</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="nx">l</span><span class="o">+</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">-</span><span class="nx">f</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="nx">f</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="o">-</span><span class="nx">h</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="o">-</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">h</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">l</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">lookAt</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">+=</span><span class="mi">1</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="p">).</span><span class="nx">normalize</span><span class="p">());</span><span class="nx">b</span><span class="p">.</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L92" class="blob-num js-line-number" data-line-number="92"></td>
        <td id="LC92" class="blob-code js-file-line"><span class="nx">a</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">multiply</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix4&#39;s .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead.&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">))</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)},</span><span class="nx">multiplyMatrices</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">t</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">r</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">s</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">v</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L93" class="blob-num js-line-number" data-line-number="93"></td>
        <td id="LC93" class="blob-code js-file-line"><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">15</span><span class="p">],</span><span class="nx">C</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">F</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">H</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">I</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">G</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">A</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">K</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">B</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">J</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">N</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">y</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">M</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">w</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">Z</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">L</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">C</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">G</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">J</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">w</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">F</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">A</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">N</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">Z</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">H</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">K</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">y</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">L</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">I</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">B</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">M</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">C</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="nx">G</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="nx">J</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nx">w</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">F</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="nx">A</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="nx">N</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nx">Z</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">H</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="nx">K</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="nx">y</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nx">L</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">I</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="nx">B</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="nx">M</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="o">*</span><span class="nx">C</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">G</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">J</span><span class="o">+</span><span class="nx">r</span><span class="o">*</span><span class="nx">w</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="o">*</span><span class="nx">F</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">A</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">N</span><span class="o">+</span><span class="nx">r</span><span class="o">*</span><span class="nx">Z</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="o">*</span><span class="nx">H</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">K</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">y</span><span class="o">+</span><span class="nx">r</span><span class="o">*</span><span class="nx">L</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="o">*</span><span class="nx">I</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">B</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">M</span><span class="o">+</span><span class="nx">r</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="o">*</span><span class="nx">C</span><span class="o">+</span><span class="nx">v</span><span class="o">*</span><span class="nx">G</span><span class="o">+</span><span class="nx">z</span><span class="o">*</span><span class="nx">J</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">w</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="o">*</span><span class="nx">F</span><span class="o">+</span><span class="nx">v</span><span class="o">*</span><span class="nx">A</span><span class="o">+</span><span class="nx">z</span><span class="o">*</span><span class="nx">N</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">Z</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="o">*</span><span class="nx">H</span><span class="o">+</span><span class="nx">v</span><span class="o">*</span><span class="nx">K</span><span class="o">+</span><span class="nx">z</span><span class="o">*</span><span class="nx">y</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">L</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="o">*</span><span class="nx">I</span><span class="o">+</span><span class="nx">v</span><span class="o">*</span><span class="nx">B</span><span class="o">+</span><span class="nx">z</span><span class="o">*</span><span class="nx">M</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyToArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L94" class="blob-num js-line-number" data-line-number="94"></td>
        <td id="LC94" class="blob-code js-file-line"><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">11</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyScalar</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">multiplyVector3</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix4&#39;s .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.&quot;</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L95" class="blob-num js-line-number" data-line-number="95"></td>
        <td id="LC95" class="blob-code js-file-line"><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">applyProjection</span><span class="p">(</span><span class="k">this</span><span class="p">)},</span><span class="nx">multiplyVector4</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix4&#39;s .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="k">this</span><span class="p">)},</span><span class="nx">multiplyVector3Array</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">applyProjection</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">}}(),</span><span class="nx">rotateAxis</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix4&#39;s .rotateAxis() has been removed. Use Vector3.transformDirection( matrix ) instead.&quot;</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L96" class="blob-num js-line-number" data-line-number="96"></td>
        <td id="LC96" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">transformDirection</span><span class="p">(</span><span class="k">this</span><span class="p">)},</span><span class="nx">crossVector</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix4&#39;s .crossVector() has been removed. Use vector.applyMatrix4( matrix ) instead.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="k">this</span><span class="p">)},</span><span class="nx">determinant</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nx">l</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">l</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nx">n</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="o">+</span><span class="nx">b</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">m</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">j</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="o">+</span><span class="nx">b</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">l</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">l</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">j</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">j</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">*</span><span class="p">(</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">j</span><span class="o">-</span><span class="nx">b</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nx">l</span><span class="o">+</span><span class="nx">b</span><span class="o">*</span><span class="nx">h</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">l</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L97" class="blob-num js-line-number" data-line-number="97"></td>
        <td id="LC97" class="blob-code js-file-line"><span class="nx">m</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="p">)},</span><span class="nx">transpose</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">flattenToArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">flattenToArrayOffset</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L98" class="blob-num js-line-number" data-line-number="98"></td>
        <td id="LC98" class="blob-code js-file-line"><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">7</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">11</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">getPosition</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix4&#39;s .getPosition() has been removed. Use Vector3.getPositionFromMatrix( matrix ) instead.&quot;</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">])}}(),</span><span class="nx">setPosition</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L99" class="blob-num js-line-number" data-line-number="99"></td>
        <td id="LC99" class="blob-code js-file-line"><span class="nx">b</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">getInverse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">t</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">r</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">s</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">v</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">s</span><span class="o">-</span><span class="nx">m</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="nx">s</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">v</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">v</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="nx">s</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">s</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">v</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">v</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">s</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">s</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">v</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">v</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">t</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">t</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">q</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">m</span><span class="o">*</span><span class="nx">n</span><span class="o">*</span><span class="nx">v</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">v</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="nx">n</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">i</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">n</span><span class="o">*</span><span class="nx">v</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">v</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">n</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">v</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">v</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span></td>
      </tr>
      <tr>
        <td id="L100" class="blob-num js-line-number" data-line-number="100"></td>
        <td id="LC100" class="blob-code js-file-line"><span class="nx">e</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">t</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">t</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">q</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">m</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="nx">n</span><span class="o">*</span><span class="nx">s</span><span class="o">-</span><span class="nx">i</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">s</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">n</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">n</span><span class="o">*</span><span class="nx">s</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nx">s</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">n</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">s</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">s</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">g</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">p</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">m</span><span class="o">*</span><span class="nx">p</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">q</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">q</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">n</span><span class="o">*</span><span class="nx">s</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="nx">s</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">n</span><span class="o">*</span><span class="nx">v</span><span class="o">-</span><span class="nx">i</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">v</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">r</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">n</span><span class="o">*</span><span class="nx">s</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">t</span><span class="o">*</span><span class="nx">s</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">n</span><span class="o">*</span><span class="nx">v</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">v</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">s</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">s</span><span class="o">+</span><span class="nx">f</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">v</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">v</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">h</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">l</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span><span class="nx">f</span><span class="o">*</span><span class="nx">i</span><span class="o">*</span><span class="nx">t</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">j</span><span class="o">*</span><span class="nx">t</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">+</span><span class="nx">r</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">==</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;Matrix4.getInverse(): can&#39;t invert matrix, determinant is 0&quot;</span><span class="p">);</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;Matrix4.getInverse(): can&#39;t invert matrix, determinant is 0&quot;</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L101" class="blob-num js-line-number" data-line-number="101"></td>
        <td id="LC101" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">identity</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">translate</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix4&#39;s .translate() has been removed.&quot;</span><span class="p">)},</span><span class="nx">rotateX</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix4&#39;s .rotateX() has been removed.&quot;</span><span class="p">)},</span><span class="nx">rotateY</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix4&#39;s .rotateY() has been removed.&quot;</span><span class="p">)},</span><span class="nx">rotateZ</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix4&#39;s .rotateZ() has been removed.&quot;</span><span class="p">)},</span><span class="nx">rotateByAxis</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Matrix4&#39;s .rotateByAxis() has been removed.&quot;</span><span class="p">)},</span></td>
      </tr>
      <tr>
        <td id="L102" class="blob-num js-line-number" data-line-number="102"></td>
        <td id="LC102" class="blob-code js-file-line"><span class="nx">scale</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*=</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*=</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*=</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*=</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*=</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*=</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">*=</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">*=</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">getMaxScaleOnAxis</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">])))},</span><span class="nx">makeTranslation</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makeRotationX</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L103" class="blob-num js-line-number" data-line-number="103"></td>
        <td id="LC103" class="blob-code js-file-line"><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makeRotationY</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makeRotationZ</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makeRotationAxis</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">i</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">i</span><span class="o">*</span><span class="nx">h</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">j</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="o">*</span><span class="nx">g</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makeScale</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L104" class="blob-num js-line-number" data-line-number="104"></td>
        <td id="LC104" class="blob-code js-file-line"><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">compose</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">makeRotationFromQuaternion</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setPosition</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">decompose</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">]).</span><span class="nx">length</span><span class="p">(),</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">6</span><span class="p">]).</span><span class="nx">length</span><span class="p">(),</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">10</span><span class="p">]).</span><span class="nx">length</span><span class="p">();</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">12</span><span class="p">];</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">13</span><span class="p">];</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">14</span><span class="p">];</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">h</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">i</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*=</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*=</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*=</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">*=</span></td>
      </tr>
      <tr>
        <td id="L105" class="blob-num js-line-number" data-line-number="105"></td>
        <td id="LC105" class="blob-code js-file-line"><span class="nx">f</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">*=</span><span class="nx">f</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">*=</span><span class="nx">f</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">*=</span><span class="nx">j</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">*=</span><span class="nx">j</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">*=</span><span class="nx">j</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">setFromRotationMatrix</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">makeFrustum</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">e</span><span class="o">/</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">e</span><span class="o">/</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">c</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">c</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">c</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=-</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">e</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=-</span><span class="mi">2</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">e</span><span class="o">/</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">e</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">makePerspective</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">tan</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">degToRad</span><span class="p">(</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">a</span><span class="p">)),</span><span class="nx">e</span><span class="o">=-</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">makeFrustum</span><span class="p">(</span><span class="nx">e</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L106" class="blob-num js-line-number" data-line-number="106"></td>
        <td id="LC106" class="blob-code js-file-line"><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)},</span><span class="nx">makeOrthographic</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="o">-</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="o">-</span><span class="nx">e</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="o">/</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=-</span><span class="p">((</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nx">g</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="o">/</span><span class="nx">i</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=-</span><span class="p">((</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">)</span><span class="o">/</span><span class="nx">i</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=-</span><span class="mi">2</span><span class="o">/</span><span class="nx">j</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=-</span><span class="p">((</span><span class="nx">f</span><span class="o">+</span><span class="nx">e</span><span class="p">)</span><span class="o">/</span><span class="nx">j</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">fromArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">toArray</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">return</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">15</span><span class="p">]]},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L107" class="blob-num js-line-number" data-line-number="107"></td>
        <td id="LC107" class="blob-code js-file-line"><span class="nx">a</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">15</span><span class="p">])}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Ray</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L108" class="blob-num js-line-number" data-line-number="108"></td>
        <td id="LC108" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Ray</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Ray</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">origin</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">direction</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">at</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">b</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">).</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">)},</span><span class="nx">recast</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">at</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">));</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">closestPointToPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L109" class="blob-num js-line-number" data-line-number="109"></td>
        <td id="LC109" class="blob-code js-file-line"><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">);</span><span class="k">return</span> <span class="mi">0</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">d</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">)},</span><span class="nx">distanceToPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">).</span><span class="nx">dot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">b</span><span class="p">)}}(),</span><span class="nx">distanceSqToSegment</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">add</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">sub</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">h</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L110" class="blob-num js-line-number" data-line-number="110"></td>
        <td id="LC110" class="blob-code js-file-line"><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">sub</span><span class="p">(</span><span class="nx">e</span><span class="p">),</span><span class="nx">a</span><span class="o">=-</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">),</span><span class="nx">i</span><span class="o">=-</span><span class="nx">g</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">lengthSq</span><span class="p">(),</span><span class="nx">l</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="p">),</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">l</span><span class="o">?</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="nx">b</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">l</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">g</span><span class="o">?</span><span class="nx">m</span><span class="o">&gt;=-</span><span class="nx">n</span><span class="o">?</span><span class="nx">m</span><span class="o">&lt;=</span><span class="nx">n</span><span class="o">?</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">l</span><span class="p">,</span><span class="nx">g</span><span class="o">*=</span><span class="nx">h</span><span class="p">,</span><span class="nx">m</span><span class="o">*=</span><span class="nx">h</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="p">(</span><span class="nx">g</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">m</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="p">)</span><span class="o">+</span><span class="nx">j</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="nx">b</span><span class="p">)),</span><span class="nx">a</span><span class="o">=-</span><span class="nx">g</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="p">(</span><span class="nx">m</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="p">)</span><span class="o">+</span><span class="nx">j</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">m</span><span class="o">=-</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="nx">b</span><span class="p">)),</span><span class="nx">a</span><span class="o">=-</span><span class="nx">g</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="p">(</span><span class="nx">m</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="p">)</span><span class="o">+</span><span class="nx">j</span><span class="p">)</span><span class="o">:</span><span class="nx">m</span><span class="o">&lt;=-</span><span class="nx">n</span><span class="o">?</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="p">(</span><span class="o">-</span><span class="nx">a</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">b</span><span class="p">)),</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">g</span><span class="o">?-</span><span class="nx">h</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="o">-</span><span class="nx">h</span><span class="p">,</span><span class="o">-</span><span class="nx">i</span><span class="p">),</span><span class="nx">h</span><span class="p">),</span><span class="nx">a</span><span class="o">=-</span><span class="nx">g</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="p">(</span><span class="nx">m</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="p">)</span><span class="o">+</span><span class="nx">j</span><span class="p">)</span><span class="o">:</span><span class="nx">m</span><span class="o">&lt;=</span><span class="nx">n</span><span class="o">?</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="o">-</span><span class="nx">h</span><span class="p">,</span><span class="o">-</span><span class="nx">i</span><span class="p">),</span><span class="nx">h</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">m</span><span class="o">*</span><span class="p">(</span><span class="nx">m</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="p">)</span><span class="o">+</span><span class="nx">j</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="nx">b</span><span class="p">)),</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">g</span><span class="o">?</span><span class="nx">h</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="o">-</span><span class="nx">h</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L111" class="blob-num js-line-number" data-line-number="111"></td>
        <td id="LC111" class="blob-code js-file-line"><span class="o">-</span><span class="nx">i</span><span class="p">),</span><span class="nx">h</span><span class="p">),</span><span class="nx">a</span><span class="o">=-</span><span class="nx">g</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="p">(</span><span class="nx">m</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="p">)</span><span class="o">+</span><span class="nx">j</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">?-</span><span class="nx">h</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="nx">b</span><span class="p">)),</span><span class="nx">a</span><span class="o">=-</span><span class="nx">g</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="nx">m</span><span class="o">*</span><span class="p">(</span><span class="nx">m</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="p">)</span><span class="o">+</span><span class="nx">j</span><span class="p">);</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">g</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">));</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">m</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">e</span><span class="p">));</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">isIntersectionSphere</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">center</span><span class="p">)</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">radius</span><span class="p">},</span><span class="nx">isIntersectionPlane</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">);</span><span class="k">return</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">||</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="o">?!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="p">},</span><span class="nx">distanceToPlane</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">==</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="p">.</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">)</span><span class="o">?</span></td>
      </tr>
      <tr>
        <td id="L112" class="blob-num js-line-number" data-line-number="112"></td>
        <td id="LC112" class="blob-code js-file-line"><span class="mi">0</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="nx">a</span><span class="o">=-</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">constant</span><span class="p">)</span><span class="o">/</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">intersectPlane</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">distanceToPlane</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="kc">null</span><span class="o">===</span><span class="nx">c</span><span class="o">?</span><span class="kc">null</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">at</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">applyMatrix4</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">origin</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">origin</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">)},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ray</span><span class="p">).</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Sphere</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">0</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L113" class="blob-num js-line-number" data-line-number="113"></td>
        <td id="LC113" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Sphere</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Sphere</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromPoints</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">lengthSq</span><span class="p">(),</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">center</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">empty</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="mi">0</span><span class="o">&gt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">},</span><span class="nx">containsPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">distanceToSquared</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">)</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">},</span><span class="nx">distanceToPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">)</span><span class="o">-</span></td>
      </tr>
      <tr>
        <td id="L114" class="blob-num js-line-number" data-line-number="114"></td>
        <td id="LC114" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">},</span><span class="nx">intersectsSphere</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">radius</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">center</span><span class="p">.</span><span class="nx">distanceToSquared</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">)</span><span class="o">&lt;=</span><span class="nx">b</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">clampPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">.</span><span class="nx">distanceToSquared</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">).</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">d</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">));</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">getBoundingBox</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Box3</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">expandByScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">applyMatrix4</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L115" class="blob-num js-line-number" data-line-number="115"></td>
        <td id="LC115" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">*=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getMaxScaleOnAxis</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">translate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">center</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">center</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">radius</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sphere</span><span class="p">).</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">planes</span><span class="o">=</span><span class="p">[</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Plane</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Plane</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Plane</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Plane</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Plane</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Plane</span><span class="p">]};</span></td>
      </tr>
      <tr>
        <td id="L116" class="blob-num js-line-number" data-line-number="116"></td>
        <td id="LC116" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">planes</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">planes</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">6</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">planes</span><span class="p">[</span><span class="nx">c</span><span class="p">]);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">planes</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">elements</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">t</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">r</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">15</span><span class="p">];</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">setComponents</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="o">-</span><span class="nx">h</span><span class="p">,</span><span class="nx">p</span><span class="o">-</span><span class="nx">l</span><span class="p">,</span><span class="nx">c</span><span class="o">-</span><span class="nx">t</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">setComponents</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L117" class="blob-num js-line-number" data-line-number="117"></td>
        <td id="LC117" class="blob-code js-file-line"><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="o">+</span><span class="nx">h</span><span class="p">,</span><span class="nx">p</span><span class="o">+</span><span class="nx">l</span><span class="p">,</span><span class="nx">c</span><span class="o">+</span><span class="nx">t</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">setComponents</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="o">+</span><span class="nx">g</span><span class="p">,</span><span class="nx">p</span><span class="o">+</span><span class="nx">m</span><span class="p">,</span><span class="nx">c</span><span class="o">+</span><span class="nx">q</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">setComponents</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="o">-</span><span class="nx">g</span><span class="p">,</span><span class="nx">p</span><span class="o">-</span><span class="nx">m</span><span class="p">,</span><span class="nx">c</span><span class="o">-</span><span class="nx">q</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">setComponents</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="o">-</span><span class="nx">i</span><span class="p">,</span><span class="nx">p</span><span class="o">-</span><span class="nx">n</span><span class="p">,</span><span class="nx">c</span><span class="o">-</span><span class="nx">r</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">setComponents</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">p</span><span class="o">+</span><span class="nx">n</span><span class="p">,</span><span class="nx">c</span><span class="o">+</span><span class="nx">r</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">intersectsObject</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">;</span><span class="kc">null</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">computeBoundingSphere</span><span class="p">();</span><span class="nx">c</span><span class="o">=-</span><span class="nx">c</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">getMaxScaleOnAxis</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">planes</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">6</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&lt;</span></td>
      </tr>
      <tr>
        <td id="L118" class="blob-num js-line-number" data-line-number="118"></td>
        <td id="LC118" class="blob-code js-file-line"><span class="nx">c</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}}(),</span><span class="nx">intersectsSphere</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">planes</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">center</span><span class="p">,</span><span class="nx">a</span><span class="o">=-</span><span class="nx">a</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">6</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">},</span><span class="nx">intersectsBox</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">planes</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">6</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">x</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">x</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">y</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">y</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">z</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">z</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L119" class="blob-num js-line-number" data-line-number="119"></td>
        <td id="LC119" class="blob-code js-file-line"><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}}(),</span><span class="nx">containsPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">planes</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">6</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">).</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Plane</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">constant</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">0</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L120" class="blob-num js-line-number" data-line-number="120"></td>
        <td id="LC120" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Plane</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Plane</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">constant</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setComponents</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">constant</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromNormalAndCoplanarPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">constant</span><span class="o">=-</span><span class="nx">b</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromCoplanarPoints</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="p">).</span><span class="nx">cross</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)).</span><span class="nx">normalize</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">setFromNormalAndCoplanarPoint</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L121" class="blob-num js-line-number" data-line-number="121"></td>
        <td id="LC121" class="blob-code js-file-line"><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">constant</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">constant</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">normalize</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">length</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">constant</span><span class="o">*=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">negate</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">constant</span><span class="o">*=-</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">negate</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">distanceToPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">constant</span><span class="p">},</span><span class="nx">distanceToSphere</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">center</span><span class="p">)</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">radius</span><span class="p">},</span><span class="nx">projectPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">orthoPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">).</span><span class="nx">sub</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">negate</span><span class="p">()},</span><span class="nx">orthoPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L122" class="blob-num js-line-number" data-line-number="122"></td>
        <td id="LC122" class="blob-code js-file-line"><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span><span class="p">(</span><span class="nx">b</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">).</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">c</span><span class="p">)},</span><span class="nx">isIntersectionLine</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">start</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">end</span><span class="p">);</span><span class="k">return</span> <span class="mi">0</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">},</span><span class="nx">intersectLine</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">delta</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">==</span><span class="nx">f</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">start</span><span class="p">))</span><span class="k">return</span> <span class="nx">d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">start</span><span class="p">)}</span><span class="k">else</span> <span class="k">return</span> <span class="nx">f</span><span class="o">=-</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">start</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">constant</span><span class="p">)</span><span class="o">/</span><span class="nx">f</span><span class="p">,</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">f</span><span class="o">||</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">f</span><span class="o">?</span><span class="k">void</span> <span class="mi">0</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">f</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">start</span><span class="p">)}}(),</span></td>
      </tr>
      <tr>
        <td id="L123" class="blob-num js-line-number" data-line-number="123"></td>
        <td id="LC123" class="blob-code js-file-line"><span class="nx">coplanarPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">).</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">constant</span><span class="p">)},</span><span class="nx">applyMatrix4</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">).</span><span class="nx">getNormalMatrix</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">).</span><span class="nx">applyMatrix3</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">coplanarPoint</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setFromNormalAndCoplanarPoint</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">translate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">constant</span><span class="o">-=</span><span class="nx">a</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">)</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L124" class="blob-num js-line-number" data-line-number="124"></td>
        <td id="LC124" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">constant</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">constant</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Plane</span><span class="p">).</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="o">=</span><span class="p">{</span><span class="nx">PI2</span><span class="o">:</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="nx">generateUUID</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="s2">&quot;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nb">Array</span><span class="p">(</span><span class="mi">36</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">36</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="mi">8</span><span class="o">==</span><span class="nx">e</span><span class="o">||</span><span class="mi">13</span><span class="o">==</span><span class="nx">e</span><span class="o">||</span><span class="mi">18</span><span class="o">==</span><span class="nx">e</span><span class="o">||</span><span class="mi">23</span><span class="o">==</span><span class="nx">e</span><span class="o">?</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;-&quot;</span><span class="o">:</span><span class="mi">14</span><span class="o">==</span><span class="nx">e</span><span class="o">?</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;4&quot;</span><span class="o">:</span><span class="p">(</span><span class="mi">2</span><span class="o">&gt;=</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">33554432</span><span class="o">+</span><span class="mi">16777216</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">|</span><span class="mi">0</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="o">&amp;</span><span class="mi">15</span><span class="p">,</span><span class="nx">c</span><span class="o">&gt;&gt;=</span><span class="mi">4</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">19</span><span class="o">==</span><span class="nx">e</span><span class="o">?</span><span class="nx">d</span><span class="o">&amp;</span><span class="mi">3</span><span class="o">|</span><span class="mi">8</span><span class="o">:</span><span class="nx">d</span><span class="p">]);</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">)}}(),</span><span class="nx">clamp</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="nx">clampBottom</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="nx">mapLinear</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="nx">d</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="p">)},</span><span class="nx">smoothstep</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L125" class="blob-num js-line-number" data-line-number="125"></td>
        <td id="LC125" class="blob-code js-file-line"><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&lt;=</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;=</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="p">(</span><span class="mi">3</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="p">)},</span><span class="nx">smootherstep</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&lt;=</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&gt;=</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="p">(</span><span class="mi">6</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="mi">15</span><span class="p">)</span><span class="o">+</span><span class="mi">10</span><span class="p">)},</span><span class="nx">random16</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="mi">65280</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">+</span><span class="mi">255</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">())</span><span class="o">/</span><span class="mi">65535</span><span class="p">},</span><span class="nx">randInt</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">))},</span><span class="nx">randFloat</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">)},</span><span class="nx">randFloatSpread</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="p">(</span><span class="mf">0.5</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">())},</span><span class="nx">sign</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="mi">0</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">degToRad</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span></td>
      </tr>
      <tr>
        <td id="L126" class="blob-num js-line-number" data-line-number="126"></td>
        <td id="LC126" class="blob-code js-file-line"><span class="mi">180</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="o">*</span><span class="nx">a</span><span class="p">}}(),</span><span class="nx">radToDeg</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">180</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="o">*</span><span class="nx">a</span><span class="p">}}()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Spline</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">z</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">initFromArray</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">x</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="nx">y</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="nx">z</span><span class="o">:</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="mi">2</span><span class="p">]}};</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="o">===</span><span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">f</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">3</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L127" class="blob-num js-line-number" data-line-number="127"></td>
        <td id="LC127" class="blob-code js-file-line"><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]];</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getControlPointsArray</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">];</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getLength</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">100</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L128" class="blob-num js-line-number" data-line-number="128"></td>
        <td id="LC128" class="blob-code js-file-line"><span class="nx">a</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">h</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">i</span><span class="o">+=</span><span class="nx">h</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">b</span><span class="o">*=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">b</span><span class="o">!=</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">);</span><span class="nx">g</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="k">return</span><span class="p">{</span><span class="nx">chunks</span><span class="o">:</span><span class="nx">g</span><span class="p">,</span><span class="nx">total</span><span class="o">:</span><span class="nx">i</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">reparametrizeByArcLength</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getLength</span><span class="p">();</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">clone</span><span class="p">());</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">chunks</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">-</span><span class="nx">j</span><span class="p">.</span><span class="nx">chunks</span><span class="p">[</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">ceil</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="o">/</span><span class="nx">j</span><span class="p">.</span><span class="nx">total</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nx">h</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">e</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L129" class="blob-num js-line-number" data-line-number="129"></td>
        <td id="LC129" class="blob-code js-file-line"><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">).</span><span class="nx">clone</span><span class="p">());</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="nx">b</span><span class="p">]).</span><span class="nx">clone</span><span class="p">())}</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="nx">g</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Triangle</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">.</span><span class="nx">normal</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">lengthSq</span><span class="p">();</span><span class="k">return</span> <span class="mi">0</span><span class="o">&lt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}}();</span></td>
      </tr>
      <tr>
        <td id="L130" class="blob-num js-line-number" data-line-number="130"></td>
        <td id="LC130" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">.</span><span class="nx">barycoordFromPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">==</span><span class="nx">j</span><span class="p">)</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">j</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">j</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="nx">i</span><span class="o">*</span><span class="nx">f</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="p">)</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">*</span><span class="nx">h</span><span class="o">-</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="p">)</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">i</span><span class="o">-</span><span class="nx">d</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="p">)}}();</span></td>
      </tr>
      <tr>
        <td id="L131" class="blob-num js-line-number" data-line-number="131"></td>
        <td id="LC131" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">.</span><span class="nx">containsPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">.</span><span class="nx">barycoordFromPoint</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="mi">0</span><span class="o">&lt;=</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="o">&gt;=</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">}}();</span></td>
      </tr>
      <tr>
        <td id="L132" class="blob-num js-line-number" data-line-number="132"></td>
        <td id="LC132" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">,</span><span class="nx">set</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">setFromPointsAndIndices</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]);</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]);</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">copy</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">},</span><span class="nx">area</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">a</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="mf">0.5</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">length</span><span class="p">()}}(),</span><span class="nx">midpoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span></td>
      </tr>
      <tr>
        <td id="L133" class="blob-num js-line-number" data-line-number="133"></td>
        <td id="LC133" class="blob-code js-file-line"><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">).</span><span class="nx">addVectors</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="mi">3</span><span class="p">)},</span><span class="nx">normal</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">.</span><span class="nx">normal</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">)},</span><span class="nx">plane</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="nx">a</span><span class="o">||</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Plane</span><span class="p">).</span><span class="nx">setFromCoplanarPoints</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">)},</span><span class="nx">barycoordFromPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">.</span><span class="nx">barycoordFromPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">containsPoint</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">.</span><span class="nx">containsPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">)},</span><span class="nx">equals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">)},</span></td>
      </tr>
      <tr>
        <td id="L134" class="blob-num js-line-number" data-line-number="134"></td>
        <td id="LC134" class="blob-code js-file-line"><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">).</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Vertex</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UV</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Clock</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">autoStart</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">elapsedTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">oldTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">running</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L135" class="blob-num js-line-number" data-line-number="135"></td>
        <td id="LC135" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Clock</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Clock</span><span class="p">,</span><span class="nx">start</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">oldTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">self</span><span class="p">.</span><span class="nx">performance</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">self</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">now</span><span class="o">?</span><span class="nx">self</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span><span class="o">:</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">running</span><span class="o">=!</span><span class="mi">0</span><span class="p">},</span><span class="nx">stop</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">getElapsedTime</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">running</span><span class="o">=!</span><span class="mi">1</span><span class="p">},</span><span class="nx">getElapsedTime</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">getDelta</span><span class="p">();</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">elapsedTime</span><span class="p">},</span><span class="nx">getDelta</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">autoStart</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">running</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">start</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">running</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">self</span><span class="p">.</span><span class="nx">performance</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">self</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">now</span><span class="o">?</span><span class="nx">self</span><span class="p">.</span><span class="nx">performance</span><span class="p">.</span><span class="nx">now</span><span class="p">()</span><span class="o">:</span><span class="nb">Date</span><span class="p">.</span><span class="nx">now</span><span class="p">(),</span></td>
      </tr>
      <tr>
        <td id="L136" class="blob-num js-line-number" data-line-number="136"></td>
        <td id="LC136" class="blob-code js-file-line"><span class="nx">a</span><span class="o">=</span><span class="mf">0.001</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">oldTime</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">oldTime</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">elapsedTime</span><span class="o">+=</span><span class="nx">a</span><span class="p">}</span><span class="k">return</span> <span class="nx">a</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span></td>
      </tr>
      <tr>
        <td id="L137" class="blob-num js-line-number" data-line-number="137"></td>
        <td id="LC137" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">,</span><span class="nx">apply</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">addEventListener</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasEventListener</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasEventListener</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">},</span><span class="nx">addEventListener</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">_listeners</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">_listeners</span><span class="o">=</span><span class="p">{});</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_listeners</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">[]);</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L138" class="blob-num js-line-number" data-line-number="138"></td>
        <td id="LC138" class="blob-code js-file-line"><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)},</span><span class="nx">hasEventListener</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">_listeners</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_listeners</span><span class="p">;</span><span class="k">return</span> <span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">&amp;&amp;-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">?!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="p">},</span><span class="nx">removeEventListener</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">_listeners</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_listeners</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">)}},</span><span class="nx">dispatchEvent</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">_listeners</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">_listeners</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)}}}};(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">Raycaster</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">ray</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Ray</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="mi">0</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">ray</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">lengthSq</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">ray</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="kc">Infinity</span><span class="p">};</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Sphere</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Ray</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Plane</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">distance</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">distance</span><span class="p">},</span><span class="nx">i</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">n</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Particle</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">ray</span><span class="p">.</span><span class="nx">distanceToPoint</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="o">&gt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="k">return</span> <span class="nx">n</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">distance</span><span class="o">:</span><span class="nx">p</span><span class="p">,</span><span class="nx">point</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="nx">face</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="nx">g</span><span class="p">})}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L139" class="blob-num js-line-number" data-line-number="139"></td>
        <td id="LC139" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">LOD</span><span class="p">)</span><span class="nx">f</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">p</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">ray</span><span class="p">.</span><span class="nx">origin</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">i</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">getObjectForDistance</span><span class="p">(</span><span class="nx">p</span><span class="p">),</span><span class="nx">j</span><span class="p">,</span><span class="nx">n</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">){</span><span class="nx">p</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="kc">null</span><span class="o">===</span><span class="nx">p</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">computeBoundingSphere</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getMaxScaleOnAxis</span><span class="p">());</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">j</span><span class="p">.</span><span class="nx">ray</span><span class="p">.</span><span class="nx">isIntersectionSphere</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="k">return</span> <span class="nx">n</span><span class="p">;</span><span class="kd">var</span> <span class="nx">t</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">vertices</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="p">){</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">q</span><span class="o">||!</span><span class="mi">1</span><span class="o">===</span><span class="nx">p</span><span class="p">.</span><span class="nx">dynamic</span><span class="p">)</span><span class="k">return</span> <span class="nx">n</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">material</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L140" class="blob-num js-line-number" data-line-number="140"></td>
        <td id="LC140" class="blob-code js-file-line"><span class="nx">s</span><span class="o">=!</span><span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">materials</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">side</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">precision</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">ray</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="kd">var</span> <span class="nx">H</span><span class="p">,</span><span class="nx">t</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">index</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">H</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="kd">var</span> <span class="nx">I</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">G</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">G</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">.</span><span class="nx">offsets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="o">++</span><span class="nx">G</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">A</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">offsets</span><span class="p">[</span><span class="nx">G</span><span class="p">].</span><span class="nx">start</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">offsets</span><span class="p">[</span><span class="nx">G</span><span class="p">].</span><span class="nx">index</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">A</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="nx">A</span><span class="o">+</span><span class="nx">p</span><span class="p">.</span><span class="nx">offsets</span><span class="p">[</span><span class="nx">G</span><span class="p">].</span><span class="nx">count</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">B</span><span class="p">;</span><span class="nx">r</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">?</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">K</span><span class="o">+</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">index</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">r</span><span class="p">],</span><span class="nx">z</span><span class="o">=</span><span class="nx">K</span><span class="o">+</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">index</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">r</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">C</span><span class="o">=</span><span class="nx">K</span><span class="o">+</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">index</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">r</span><span class="o">+</span><span class="mi">2</span><span class="p">])</span><span class="o">:</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">K</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="nx">K</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="nx">K</span><span class="o">+</span><span class="mi">2</span><span class="p">),</span><span class="nx">s</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L141" class="blob-num js-line-number" data-line-number="141"></td>
        <td id="LC141" class="blob-code js-file-line"><span class="nx">v</span><span class="p">],</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">v</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">v</span><span class="o">+</span><span class="mi">2</span><span class="p">]),</span><span class="nx">H</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">z</span><span class="p">],</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">z</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">z</span><span class="o">+</span><span class="mi">2</span><span class="p">]),</span><span class="nx">I</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">C</span><span class="p">],</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">C</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">C</span><span class="o">+</span><span class="mi">2</span><span class="p">]),</span><span class="nx">d</span><span class="p">.</span><span class="nx">setFromCoplanarPoints</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">I</span><span class="p">),</span><span class="nx">A</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">distanceToPlane</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="o">!</span><span class="p">(</span><span class="nx">A</span><span class="o">&lt;</span><span class="nx">F</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">A</span><span class="p">){</span><span class="nx">v</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">side</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">DoubleSide</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">normal</span><span class="p">),</span><span class="o">!</span><span class="p">(</span><span class="nx">v</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">FrontSide</span><span class="o">?</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">z</span><span class="o">:</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">z</span><span class="p">)))</span><span class="k">continue</span><span class="p">;</span><span class="nx">A</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">.</span><span class="nx">near</span><span class="o">||</span><span class="nx">A</span><span class="o">&gt;</span><span class="nx">j</span><span class="p">.</span><span class="nx">far</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">at</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">.</span><span class="nx">containsPoint</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L142" class="blob-num js-line-number" data-line-number="142"></td>
        <td id="LC142" class="blob-code js-file-line"><span class="nx">s</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">I</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">distance</span><span class="o">:</span><span class="nx">A</span><span class="p">,</span><span class="nx">point</span><span class="o">:</span><span class="nx">j</span><span class="p">.</span><span class="nx">ray</span><span class="p">.</span><span class="nx">at</span><span class="p">(</span><span class="nx">A</span><span class="p">),</span><span class="nx">face</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">faceIndex</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="nx">g</span><span class="p">}))}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">p</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">){</span><span class="nx">r</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">material</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">;</span><span class="nx">s</span><span class="o">=!</span><span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="o">?</span><span class="nx">g</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">materials</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="nx">F</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">precision</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">ray</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">I</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">H</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">I</span><span class="o">&lt;</span><span class="nx">H</span><span class="p">;</span><span class="nx">I</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">G</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">I</span><span class="p">],</span><span class="nx">q</span><span class="o">=!</span><span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="o">?</span><span class="nx">s</span><span class="p">[</span><span class="nx">G</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">]</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">q</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">setFromNormalAndCoplanarPoint</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">normal</span><span class="p">,</span><span class="nx">t</span><span class="p">[</span><span class="nx">G</span><span class="p">.</span><span class="nx">a</span><span class="p">]),</span><span class="nx">A</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">distanceToPlane</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="o">!</span><span class="p">(</span><span class="nx">A</span><span class="o">&lt;</span><span class="nx">F</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">A</span><span class="p">)){</span><span class="nx">v</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">side</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">DoubleSide</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">z</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">normal</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L143" class="blob-num js-line-number" data-line-number="143"></td>
        <td id="LC143" class="blob-code js-file-line"><span class="o">!</span><span class="p">(</span><span class="nx">v</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">FrontSide</span><span class="o">?</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">z</span><span class="o">:</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">z</span><span class="p">)))</span><span class="k">continue</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">A</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">.</span><span class="nx">near</span><span class="o">||</span><span class="nx">A</span><span class="o">&gt;</span><span class="nx">j</span><span class="p">.</span><span class="nx">far</span><span class="p">)){</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">at</span><span class="p">(</span><span class="nx">A</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">G</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">G</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">z</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">G</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">C</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">G</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">.</span><span class="nx">containsPoint</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">C</span><span class="p">))</span><span class="k">continue</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">G</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">G</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">z</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">G</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">C</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">G</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="nx">t</span><span class="p">[</span><span class="nx">G</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">.</span><span class="nx">containsPoint</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">q</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">Triangle</span><span class="p">.</span><span class="nx">containsPoint</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">q</span><span class="p">))</span><span class="k">continue</span><span class="p">}</span><span class="k">else</span> <span class="k">throw</span> <span class="nb">Error</span><span class="p">(</span><span class="s2">&quot;face type not supported&quot;</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">distance</span><span class="o">:</span><span class="nx">A</span><span class="p">,</span><span class="nx">point</span><span class="o">:</span><span class="nx">j</span><span class="p">.</span><span class="nx">ray</span><span class="p">.</span><span class="nx">at</span><span class="p">(</span><span class="nx">A</span><span class="p">),</span><span class="nx">face</span><span class="o">:</span><span class="nx">G</span><span class="p">,</span><span class="nx">faceIndex</span><span class="o">:</span><span class="nx">I</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="nx">g</span><span class="p">})}}}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Line</span><span class="p">){</span><span class="nx">F</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">linePrecision</span><span class="p">;</span><span class="nx">F</span><span class="o">*=</span><span class="nx">F</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L144" class="blob-num js-line-number" data-line-number="144"></td>
        <td id="LC144" class="blob-code js-file-line"><span class="nx">g</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="kc">null</span><span class="o">===</span><span class="nx">p</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">computeBoundingSphere</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">getMaxScaleOnAxis</span><span class="p">());</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">j</span><span class="p">.</span><span class="nx">ray</span><span class="p">.</span><span class="nx">isIntersectionSphere</span><span class="p">(</span><span class="nx">b</span><span class="p">))</span><span class="k">return</span> <span class="nx">n</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">ray</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">t</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">vertices</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">A</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">LineStrip</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">2</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">q</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">r</span><span class="o">+=</span><span class="nx">z</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">distanceSqToSegment</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="nx">r</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">v</span><span class="p">,</span><span class="nx">A</span><span class="p">)</span><span class="o">&lt;=</span><span class="nx">F</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">origin</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">v</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">near</span><span class="o">&lt;=</span><span class="nx">p</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="o">&lt;=</span><span class="nx">j</span><span class="p">.</span><span class="nx">far</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">distance</span><span class="o">:</span><span class="nx">p</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L145" class="blob-num js-line-number" data-line-number="145"></td>
        <td id="LC145" class="blob-code js-file-line"><span class="nx">point</span><span class="o">:</span><span class="nx">A</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">face</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">faceIndex</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="nx">g</span><span class="p">}))}},</span><span class="nx">j</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getDescendants</span><span class="p">(),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span><span class="nx">a</span><span class="p">.</span><span class="nx">Raycaster</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">precision</span><span class="o">=</span><span class="mi">1</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">Raycaster</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">linePrecision</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">Raycaster</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">set</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">ray</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="mi">0</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">ray</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">length</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">ray</span><span class="p">.</span><span class="nx">direction</span><span class="p">.</span><span class="nx">normalize</span><span class="p">()};</span><span class="nx">a</span><span class="p">.</span><span class="nx">Raycaster</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">intersectObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[];</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="nx">a</span><span class="p">.</span><span class="nx">Raycaster</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">intersectObjects</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L146" class="blob-num js-line-number" data-line-number="146"></td>
        <td id="LC146" class="blob-code js-file-line"><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">}})(</span><span class="nx">THREE</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3DIdCount</span><span class="o">++</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">uuid</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">generateUUID</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">up</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Euler</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">_quaternion</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">_euler</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">renderDepth</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L147" class="blob-num js-line-number" data-line-number="147"></td>
        <td id="LC147" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">userData</span><span class="o">=</span><span class="p">{}};</span></td>
      </tr>
      <tr>
        <td id="L148" class="blob-num js-line-number" data-line-number="148"></td>
        <td id="LC148" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">,</span><span class="nx">get</span> <span class="nx">eulerOrder</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Object3D&#39;s .eulerOrder has been moved to Object3D&#39;s .rotation.order.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">order</span><span class="p">},</span><span class="nx">set</span> <span class="nx">eulerOrder</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Object3D&#39;s .eulerOrder has been moved to Object3D&#39;s .rotation.order.&quot;</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">order</span><span class="o">=</span><span class="nx">a</span><span class="p">},</span><span class="nx">get</span> <span class="nx">useQuaternion</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Object3D&#39;s .useQuaternion has been removed. The library now uses quaternions by default.&quot;</span><span class="p">)},</span><span class="nx">set</span> <span class="nx">useQuaternion</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Object3D&#39;s .useQuaternion has been removed. The library now uses quaternions by default.&quot;</span><span class="p">)},</span></td>
      </tr>
      <tr>
        <td id="L149" class="blob-num js-line-number" data-line-number="149"></td>
        <td id="LC149" class="blob-code js-file-line"><span class="nx">applyMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">getScaleFromMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">extractRotation</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">setFromRotationMatrix</span><span class="p">(</span><span class="nx">a</span><span class="p">)}}(),</span><span class="nx">setRotationFromAxisAngle</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">setFromAxisAngle</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">setRotationFromEuler</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">setFromEuler</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">)},</span><span class="nx">setRotationFromMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">setFromRotationMatrix</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span></td>
      </tr>
      <tr>
        <td id="L150" class="blob-num js-line-number" data-line-number="150"></td>
        <td id="LC150" class="blob-code js-file-line"><span class="nx">setRotationFromQuaternion</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">rotateOnAxis</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">setFromAxisAngle</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">rotateX</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rotateOnAxis</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}}(),</span><span class="nx">rotateY</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rotateOnAxis</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}}(),</span><span class="nx">rotateZ</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">rotateOnAxis</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L151" class="blob-num js-line-number" data-line-number="151"></td>
        <td id="LC151" class="blob-code js-file-line"><span class="nx">b</span><span class="p">)}}(),</span><span class="nx">translateOnAxis</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">applyQuaternion</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">c</span><span class="p">));</span><span class="k">return</span> <span class="k">this</span><span class="p">}}(),</span><span class="nx">translate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Object3D&#39;s .translate() has been removed. Use .translateOnAxis( axis, distance ) instead. Note args have been changed.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">translateOnAxis</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)},</span><span class="nx">translateX</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">translateOnAxis</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}}(),</span><span class="nx">translateY</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L152" class="blob-num js-line-number" data-line-number="152"></td>
        <td id="LC152" class="blob-code js-file-line"><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">translateOnAxis</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}}(),</span><span class="nx">translateZ</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">translateOnAxis</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}}(),</span><span class="nx">localToWorld</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">)},</span><span class="nx">worldToLocal</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">))}}(),</span><span class="nx">lookAt</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">up</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">setFromRotationMatrix</span><span class="p">(</span><span class="nx">a</span><span class="p">)}}(),</span></td>
      </tr>
      <tr>
        <td id="L153" class="blob-num js-line-number" data-line-number="153"></td>
        <td id="LC153" class="blob-code js-file-line"><span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="k">this</span><span class="p">)</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;THREE.Object3D.add: An object can&#39;t be added as a child of itself.&quot;</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">parent</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;added&quot;</span><span class="p">});</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">parent</span><span class="p">;)</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">__addObject</span><span class="p">(</span><span class="nx">a</span><span class="p">)}},</span><span class="nx">remove</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">parent</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;removed&quot;</span><span class="p">});</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span></td>
      </tr>
      <tr>
        <td id="L154" class="blob-num js-line-number" data-line-number="154"></td>
        <td id="LC154" class="blob-code js-file-line"><span class="nx">b</span><span class="p">.</span><span class="nx">parent</span><span class="p">;)</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">parent</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">__removeObject</span><span class="p">(</span><span class="nx">a</span><span class="p">)}},</span><span class="nx">traverse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">traverse</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">getObjectById</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">id</span><span class="o">===</span><span class="nx">a</span><span class="o">||!</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getObjectById</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="p">))</span><span class="k">return</span> <span class="nx">e</span><span class="p">}},</span><span class="nx">getObjectByName</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">===</span><span class="nx">a</span><span class="o">||!</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">getObjectByName</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span></td>
      </tr>
      <tr>
        <td id="L155" class="blob-num js-line-number" data-line-number="155"></td>
        <td id="LC155" class="blob-code js-file-line"><span class="nx">e</span><span class="p">))</span><span class="k">return</span> <span class="nx">e</span><span class="p">}},</span><span class="nx">getChildByName</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: Object3D&#39;s .getChildByName() has been renamed to .getObjectByName().&quot;</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getObjectByName</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)},</span><span class="nx">getDescendants</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="p">[]);</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">getDescendants</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">updateMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">},</span><span class="nx">updateMatrixWorld</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span></td>
      </tr>
      <tr>
        <td id="L156" class="blob-num js-line-number" data-line-number="156"></td>
        <td id="LC156" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">||!</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">)</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">up</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L157" class="blob-num js-line-number" data-line-number="157"></td>
        <td id="LC157" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">renderDepth</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">renderDepth</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">visible</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">castShadow</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">userData</span><span class="o">=</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">userData</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">clone</span><span class="p">());</span></td>
      </tr>
      <tr>
        <td id="L158" class="blob-num js-line-number" data-line-number="158"></td>
        <td id="LC158" class="blob-code js-file-line"><span class="k">return</span> <span class="nx">a</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3DIdCount</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Projector</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">===</span><span class="nx">l</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">l</span><span class="o">++</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="k">return</span> <span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="o">++</span><span class="p">]}</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">id</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">id</span><span class="o">:</span><span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">h</span><span class="o">=-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">g</span><span class="o">=-</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">g</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">f</span><span class="o">||</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">g</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">?</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="o">/</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="p">))</span><span class="o">:</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">/</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="nx">f</span><span class="p">)));</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">h</span><span class="o">?</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="o">/</span><span class="p">(</span><span class="nx">h</span><span class="o">-</span><span class="nx">g</span><span class="p">))</span><span class="o">:</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">h</span><span class="o">/</span><span class="p">(</span><span class="nx">h</span><span class="o">-</span><span class="nx">g</span><span class="p">)));</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">lerp</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">lerp</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">d</span><span class="p">);</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">}</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L159" class="blob-num js-line-number" data-line-number="159"></td>
        <td id="LC159" class="blob-code js-file-line"><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="p">[],</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="p">[],</span><span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">[],</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="p">[],</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">I</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="p">[],</span><span class="nx">A</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="p">{</span><span class="nx">objects</span><span class="o">:</span><span class="p">[],</span><span class="nx">sprites</span><span class="o">:</span><span class="p">[],</span><span class="nx">lights</span><span class="o">:</span><span class="p">[],</span><span class="nx">elements</span><span class="o">:</span><span class="p">[]},</span><span class="nx">B</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">,</span><span class="nx">N</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Box3</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)),</span><span class="nx">y</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Box3</span><span class="p">,</span><span class="nx">M</span><span class="o">=</span><span class="nb">Array</span><span class="p">(</span><span class="mi">3</span><span class="p">),</span><span class="nx">w</span><span class="o">=</span><span class="nb">Array</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span><span class="nx">Z</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">L</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">pa</span><span class="p">,</span><span class="nx">Pa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">Ua</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">,</span><span class="nx">O</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">,</span><span class="nx">ka</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">Fa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">,</span><span class="nx">wa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">,</span><span class="nx">D</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">projectVector</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L160" class="blob-num js-line-number" data-line-number="160"></td>
        <td id="LC160" class="blob-code js-file-line"><span class="nx">L</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">applyProjection</span><span class="p">(</span><span class="nx">L</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">unprojectVector</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">projectionMatrixInverse</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">);</span><span class="nx">L</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">projectionMatrixInverse</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">applyProjection</span><span class="p">(</span><span class="nx">L</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">pickingRay</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">unprojectVector</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">unprojectVector</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Raycaster</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">V</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="nx">h</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableObject</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L161" class="blob-num js-line-number" data-line-number="161"></td>
        <td id="LC161" class="blob-code js-file-line"><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">h</span><span class="o">++</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">}</span><span class="k">else</span> <span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">e</span><span class="o">++</span><span class="p">];</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">renderDepth</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">renderDepth</span><span class="o">:</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">B</span><span class="p">.</span><span class="nx">applyProjection</span><span class="p">(</span><span class="nx">L</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">ea</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">visible</span><span class="p">){</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="o">?</span><span class="nx">K</span><span class="p">.</span><span class="nx">lights</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="o">?</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">||!</span><span class="mi">0</span><span class="o">===</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">intersectsObject</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">K</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">V</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">K</span><span class="p">.</span><span class="nx">sprites</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">V</span><span class="p">(</span><span class="nx">a</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">ea</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">])}};</span></td>
      </tr>
      <tr>
        <td id="L162" class="blob-num js-line-number" data-line-number="162"></td>
        <td id="LC162" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">projectScene</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">l</span><span class="p">){</span><span class="kd">var</span> <span class="nx">V</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">B</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="nx">na</span><span class="p">,</span><span class="nx">ha</span><span class="p">,</span><span class="nx">X</span><span class="p">,</span><span class="nx">xa</span><span class="p">,</span><span class="nx">ab</span><span class="p">,</span><span class="nx">la</span><span class="p">,</span><span class="nx">ia</span><span class="p">,</span><span class="nx">ra</span><span class="p">;</span><span class="nx">I</span><span class="o">=</span><span class="nx">z</span><span class="o">=</span><span class="nx">q</span><span class="o">=</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">K</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">d</span><span class="p">.</span><span class="nx">autoUpdate</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">parent</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="nx">Z</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">));</span><span class="nx">L</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span><span class="nx">Z</span><span class="p">);</span><span class="nx">O</span><span class="p">.</span><span class="nx">getNormalMatrix</span><span class="p">(</span><span class="nx">Z</span><span class="p">);</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">setFromMatrix</span><span class="p">(</span><span class="nx">L</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">K</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">K</span><span class="p">.</span><span class="nx">sprites</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">K</span><span class="p">.</span><span class="nx">lights</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ea</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="nx">K</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">K</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">X</span><span class="o">=</span><span class="nx">K</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">object</span><span class="p">,</span><span class="nx">pa</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L163" class="blob-num js-line-number" data-line-number="163"></td>
        <td id="LC163" class="blob-code js-file-line"><span class="mi">0</span><span class="p">,</span><span class="nx">X</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">){</span><span class="nx">xa</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="nx">da</span><span class="o">=</span><span class="nx">xa</span><span class="p">.</span><span class="nx">vertices</span><span class="p">;</span><span class="nx">ab</span><span class="o">=</span><span class="nx">xa</span><span class="p">.</span><span class="nx">faces</span><span class="p">;</span><span class="nx">xa</span><span class="o">=</span><span class="nx">xa</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">;</span><span class="nx">Ua</span><span class="p">.</span><span class="nx">getNormalMatrix</span><span class="p">(</span><span class="nx">pa</span><span class="p">);</span><span class="nx">ia</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">material</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">;</span><span class="nx">ra</span><span class="o">=!</span><span class="mi">0</span><span class="o">===</span><span class="nx">ia</span><span class="o">?</span><span class="nx">X</span><span class="p">.</span><span class="nx">material</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">fa</span><span class="o">=</span><span class="nx">da</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">B</span><span class="o">&lt;</span><span class="nx">fa</span><span class="p">;</span><span class="nx">B</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">();</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">da</span><span class="p">[</span><span class="nx">B</span><span class="p">]).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">pa</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">L</span><span class="p">);</span><span class="kd">var</span> <span class="nx">ja</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">w</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">ja</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">ja</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">*=</span><span class="nx">ja</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">visible</span><span class="o">=!</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">||</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">||-</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">||</span><span class="mi">1</span><span class="o">&lt;</span></td>
      </tr>
      <tr>
        <td id="L164" class="blob-num js-line-number" data-line-number="164"></td>
        <td id="LC164" class="blob-code js-file-line"><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">||-</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">||</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">)}</span><span class="nx">da</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">B</span><span class="o">=</span><span class="nx">ab</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">da</span><span class="o">&lt;</span><span class="nx">B</span><span class="p">;</span><span class="nx">da</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">fa</span><span class="o">=</span><span class="nx">ab</span><span class="p">[</span><span class="nx">da</span><span class="p">],</span><span class="nx">ja</span><span class="o">=!</span><span class="mi">0</span><span class="o">===</span><span class="nx">ia</span><span class="o">?</span><span class="nx">ra</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">fa</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">]</span><span class="o">:</span><span class="nx">X</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">ja</span><span class="p">){</span><span class="nx">na</span><span class="o">=</span><span class="nx">ja</span><span class="p">.</span><span class="nx">side</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">fa</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">T</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">fa</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">aa</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">fa</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">ha</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">fa</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">M</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">T</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">M</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">M</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">T</span><span class="p">.</span><span class="nx">visible</span><span class="o">||!</span><span class="mi">0</span><span class="o">===</span><span class="nx">aa</span><span class="p">.</span><span class="nx">visible</span><span class="o">||!</span><span class="mi">0</span><span class="o">===</span><span class="nx">ha</span><span class="p">.</span><span class="nx">visible</span><span class="o">||</span><span class="nx">N</span><span class="p">.</span><span class="nx">isIntersectionBox</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">setFromPoints</span><span class="p">(</span><span class="nx">M</span><span class="p">)))</span><span class="k">if</span><span class="p">(</span><span class="nx">V</span><span class="o">=</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">ha</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">T</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">aa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">T</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="nx">ha</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span></td>
      </tr>
      <tr>
        <td id="L165" class="blob-num js-line-number" data-line-number="165"></td>
        <td id="LC165" class="blob-code js-file-line"><span class="nx">T</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">aa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">T</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">na</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DoubleSide</span><span class="o">||</span><span class="nx">V</span><span class="o">===</span><span class="p">(</span><span class="nx">na</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FrontSide</span><span class="p">))</span><span class="nx">n</span><span class="o">===</span><span class="nx">t</span><span class="o">?</span><span class="p">(</span><span class="nx">la</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace3</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">la</span><span class="p">),</span><span class="nx">t</span><span class="o">++</span><span class="p">,</span><span class="nx">n</span><span class="o">++</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">la</span><span class="p">)</span><span class="o">:</span><span class="nx">m</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">n</span><span class="o">++</span><span class="p">],</span><span class="nx">m</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">T</span><span class="p">),</span><span class="nx">m</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">aa</span><span class="p">),</span><span class="nx">m</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ha</span><span class="p">);</span><span class="k">else</span> <span class="k">continue</span><span class="p">;</span><span class="k">else</span> <span class="k">continue</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">fa</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">T</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">fa</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">aa</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">fa</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">ha</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">fa</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">la</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">fa</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="nx">w</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">T</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">w</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">aa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">w</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">w</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">T</span><span class="p">.</span><span class="nx">visible</span><span class="o">||!</span><span class="mi">0</span><span class="o">===</span><span class="nx">aa</span><span class="p">.</span><span class="nx">visible</span><span class="o">||!</span><span class="mi">0</span><span class="o">===</span><span class="nx">ha</span><span class="p">.</span><span class="nx">visible</span><span class="o">||!</span><span class="mi">0</span><span class="o">===</span><span class="nx">la</span><span class="p">.</span><span class="nx">visible</span><span class="o">||</span><span class="nx">N</span><span class="p">.</span><span class="nx">isIntersectionBox</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">setFromPoints</span><span class="p">(</span><span class="nx">w</span><span class="p">)))</span><span class="k">if</span><span class="p">(</span><span class="nx">V</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L166" class="blob-num js-line-number" data-line-number="166"></td>
        <td id="LC166" class="blob-code js-file-line"><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">la</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">T</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">aa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">T</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="nx">la</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">T</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">aa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">T</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">||</span><span class="mi">0</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">aa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">ha</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">la</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">ha</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="nx">aa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">ha</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">la</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">ha</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">na</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DoubleSide</span><span class="o">||</span><span class="nx">V</span><span class="o">===</span><span class="p">(</span><span class="nx">na</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FrontSide</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="o">===</span><span class="nx">s</span><span class="p">){</span><span class="kd">var</span> <span class="nx">ua</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace4</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">ua</span><span class="p">);</span><span class="nx">s</span><span class="o">++</span><span class="p">;</span><span class="nx">q</span><span class="o">++</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">ua</span><span class="p">}</span><span class="k">else</span> <span class="nx">m</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">q</span><span class="o">++</span><span class="p">];</span><span class="nx">m</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">id</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">T</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">aa</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L167" class="blob-num js-line-number" data-line-number="167"></td>
        <td id="LC167" class="blob-code js-file-line"><span class="nx">m</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ha</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">v4</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">la</span><span class="p">)}</span><span class="k">else</span> <span class="k">continue</span><span class="p">;</span><span class="k">else</span> <span class="k">continue</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">normalModel</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">fa</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">V</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">na</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BackSide</span><span class="o">||</span><span class="nx">na</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DoubleSide</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">.</span><span class="nx">normalModel</span><span class="p">.</span><span class="nx">negate</span><span class="p">();</span><span class="nx">m</span><span class="p">.</span><span class="nx">normalModel</span><span class="p">.</span><span class="nx">applyMatrix3</span><span class="p">(</span><span class="nx">Ua</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">m</span><span class="p">.</span><span class="nx">normalModelView</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">normalModel</span><span class="p">).</span><span class="nx">applyMatrix3</span><span class="p">(</span><span class="nx">O</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">centroidModel</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">fa</span><span class="p">.</span><span class="nx">centroid</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">pa</span><span class="p">);</span><span class="nx">ha</span><span class="o">=</span><span class="nx">fa</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">;</span><span class="nx">T</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">aa</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">T</span><span class="o">&lt;</span><span class="nx">aa</span><span class="p">;</span><span class="nx">T</span><span class="o">++</span><span class="p">)</span><span class="nx">la</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexNormalsModel</span><span class="p">[</span><span class="nx">T</span><span class="p">],</span><span class="nx">la</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ha</span><span class="p">[</span><span class="nx">T</span><span class="p">]),</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">V</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">na</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BackSide</span><span class="o">||</span><span class="nx">na</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DoubleSide</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">la</span><span class="p">.</span><span class="nx">negate</span><span class="p">(),</span><span class="nx">la</span><span class="p">.</span><span class="nx">applyMatrix3</span><span class="p">(</span><span class="nx">Ua</span><span class="p">).</span><span class="nx">normalize</span><span class="p">(),</span></td>
      </tr>
      <tr>
        <td id="L168" class="blob-num js-line-number" data-line-number="168"></td>
        <td id="LC168" class="blob-code js-file-line"><span class="nx">m</span><span class="p">.</span><span class="nx">vertexNormalsModelView</span><span class="p">[</span><span class="nx">T</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">la</span><span class="p">).</span><span class="nx">applyMatrix3</span><span class="p">(</span><span class="nx">O</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexNormalsLength</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">T</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">aa</span><span class="o">=</span><span class="nx">xa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">T</span><span class="o">&lt;</span><span class="nx">aa</span><span class="p">;</span><span class="nx">T</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">la</span><span class="o">=</span><span class="nx">xa</span><span class="p">[</span><span class="nx">T</span><span class="p">][</span><span class="nx">da</span><span class="p">],</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">la</span><span class="p">){</span><span class="nx">na</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">ha</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">na</span><span class="o">&lt;</span><span class="nx">ha</span><span class="p">;</span><span class="nx">na</span><span class="o">++</span><span class="p">)</span><span class="nx">m</span><span class="p">.</span><span class="nx">uvs</span><span class="p">[</span><span class="nx">T</span><span class="p">][</span><span class="nx">na</span><span class="p">]</span><span class="o">=</span><span class="nx">la</span><span class="p">[</span><span class="nx">na</span><span class="p">]}</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">fa</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">ja</span><span class="p">;</span><span class="nx">ka</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">centroidModel</span><span class="p">).</span><span class="nx">applyProjection</span><span class="p">(</span><span class="nx">L</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">K</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">)}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">X</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">){</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">L</span><span class="p">,</span><span class="nx">pa</span><span class="p">);</span><span class="nx">da</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">;</span><span class="nx">T</span><span class="o">=</span><span class="nx">a</span><span class="p">();</span><span class="nx">T</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">da</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">Pa</span><span class="p">);</span><span class="nx">ab</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinePieces</span><span class="o">?</span><span class="mi">2</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">fa</span><span class="o">=</span><span class="nx">da</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">B</span><span class="o">&lt;</span><span class="nx">fa</span><span class="p">;</span><span class="nx">B</span><span class="o">++</span><span class="p">)</span><span class="nx">T</span><span class="o">=</span><span class="nx">a</span><span class="p">(),</span></td>
      </tr>
      <tr>
        <td id="L169" class="blob-num js-line-number" data-line-number="169"></td>
        <td id="LC169" class="blob-code js-file-line"><span class="nx">T</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">da</span><span class="p">[</span><span class="nx">B</span><span class="p">]).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">Pa</span><span class="p">),</span><span class="mi">0</span><span class="o">&lt;</span><span class="p">(</span><span class="nx">B</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">ab</span><span class="o">||</span><span class="p">(</span><span class="nx">aa</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">wa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">T</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">),</span><span class="nx">D</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">aa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">(</span><span class="nx">wa</span><span class="p">,</span><span class="nx">D</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">wa</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nx">wa</span><span class="p">.</span><span class="nx">w</span><span class="p">),</span><span class="nx">D</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mi">1</span><span class="o">/</span><span class="nx">D</span><span class="p">.</span><span class="nx">w</span><span class="p">),</span><span class="nx">z</span><span class="o">===</span><span class="nx">F</span><span class="o">?</span><span class="p">(</span><span class="nx">xa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableLine</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">xa</span><span class="p">),</span><span class="nx">F</span><span class="o">++</span><span class="p">,</span><span class="nx">z</span><span class="o">++</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">xa</span><span class="p">)</span><span class="o">:</span><span class="nx">v</span><span class="o">=</span><span class="nx">C</span><span class="p">[</span><span class="nx">z</span><span class="o">++</span><span class="p">],</span><span class="nx">v</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">wa</span><span class="p">),</span><span class="nx">v</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">D</span><span class="p">),</span><span class="nx">v</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">wa</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">z</span><span class="p">),</span><span class="nx">v</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="nx">X</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">X</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">colors</span><span class="p">[</span><span class="nx">B</span><span class="p">]),</span><span class="nx">v</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">X</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">colors</span><span class="p">[</span><span class="nx">B</span><span class="o">-</span></td>
      </tr>
      <tr>
        <td id="L170" class="blob-num js-line-number" data-line-number="170"></td>
        <td id="LC170" class="blob-code js-file-line"><span class="mi">1</span><span class="p">])),</span><span class="nx">K</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">v</span><span class="p">)))}</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">K</span><span class="p">.</span><span class="nx">sprites</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">X</span><span class="o">=</span><span class="nx">K</span><span class="p">.</span><span class="nx">sprites</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">object</span><span class="p">,</span><span class="nx">pa</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="nx">X</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">pa</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">pa</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">pa</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="mi">1</span><span class="p">),</span><span class="nx">J</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">L</span><span class="p">),</span><span class="nx">ja</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">J</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">J</span><span class="p">.</span><span class="nx">z</span><span class="o">*=</span><span class="nx">ja</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">J</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">J</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">I</span><span class="o">===</span><span class="nx">A</span><span class="o">?</span><span class="p">(</span><span class="nx">V</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableParticle</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">V</span><span class="p">),</span><span class="nx">A</span><span class="o">++</span><span class="p">,</span><span class="nx">I</span><span class="o">++</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="nx">V</span><span class="p">)</span><span class="o">:</span><span class="nx">H</span><span class="o">=</span><span class="nx">G</span><span class="p">[</span><span class="nx">I</span><span class="o">++</span><span class="p">],</span><span class="nx">H</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">J</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">ja</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">J</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">ja</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">J</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">X</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">H</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">f</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">f</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">12</span><span class="p">])),</span><span class="nx">H</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L171" class="blob-num js-line-number" data-line-number="171"></td>
        <td id="LC171" class="blob-code js-file-line"><span class="nx">X</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">H</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">f</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span><span class="o">/</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">w</span><span class="o">+</span><span class="nx">f</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">13</span><span class="p">])),</span><span class="nx">H</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="nx">K</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">H</span><span class="p">)));</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="nx">K</span><span class="p">.</span><span class="nx">elements</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">K</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="o">=</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="o">=</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">centroid</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L172" class="blob-num js-line-number" data-line-number="172"></td>
        <td id="LC172" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">,</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">centroid</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span></td>
      </tr>
      <tr>
        <td id="L173" class="blob-num js-line-number" data-line-number="173"></td>
        <td id="LC173" class="blob-code js-file-line"><span class="k">return</span> <span class="nx">a</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">h</span><span class="o">?</span><span class="nx">h</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">centroid</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L174" class="blob-num js-line-number" data-line-number="174"></td>
        <td id="LC174" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">,</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">d</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">centroid</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span></td>
      </tr>
      <tr>
        <td id="L175" class="blob-num js-line-number" data-line-number="175"></td>
        <td id="LC175" class="blob-code js-file-line"><span class="k">return</span> <span class="nx">a</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryIdCount</span><span class="o">++</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">uuid</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">generateUUID</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">colors</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">normals</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">faceUvs</span><span class="o">=</span><span class="p">[[]];</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="o">=</span><span class="p">[[]];</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">morphColors</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">skinWeights</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">skinIndices</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">lineDistances</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">hasTangents</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">dynamic</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">buffersNeedUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lineDistancesNeedUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tangentsNeedUpdate</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L176" class="blob-num js-line-number" data-line-number="176"></td>
        <td id="LC176" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">uvsNeedUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">elementsNeedUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L177" class="blob-num js-line-number" data-line-number="177"></td>
        <td id="LC177" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">applyMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">).</span><span class="nx">getNormalMatrix</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">applyMatrix3</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">applyMatrix3</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Box3</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">computeBoundingBox</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span> <span class="k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L178" class="blob-num js-line-number" data-line-number="178"></td>
        <td id="LC178" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Sphere</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">computeBoundingSphere</span><span class="p">()},</span><span class="nx">computeCentroids</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">a</span><span class="p">]),</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="p">]),</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">c</span><span class="p">]),</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="mi">3</span><span class="p">))</span><span class="o">:</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">a</span><span class="p">]),</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="p">]),</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">c</span><span class="p">]),</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">d</span><span class="p">]),</span><span class="nx">c</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="mi">4</span><span class="p">))},</span></td>
      </tr>
      <tr>
        <td id="L179" class="blob-num js-line-number" data-line-number="179"></td>
        <td id="LC179" class="blob-code js-file-line"><span class="nx">computeFaceNormals</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">h</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">)}},</span><span class="nx">computeVertexNormals</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">__tmpVertices</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__tmpVertices</span><span class="o">=</span><span class="nb">Array</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L180" class="blob-num js-line-number" data-line-number="180"></td>
        <td id="LC180" class="blob-code js-file-line"><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">]</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">])}</span><span class="k">else</span><span class="p">{</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__tmpVertices</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L181" class="blob-num js-line-number" data-line-number="181"></td>
        <td id="LC181" class="blob-code js-file-line"><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">i</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">i</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">j</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="nx">l</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">l</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">j</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">d</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">m</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">n</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">m</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">n</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">m</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">m</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">d</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">m</span><span class="p">))}</span><span class="k">else</span><span class="p">{</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span></td>
      </tr>
      <tr>
        <td id="L182" class="blob-num js-line-number" data-line-number="182"></td>
        <td id="LC182" class="blob-code js-file-line"><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">normal</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">normal</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">normal</span><span class="p">))</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">normal</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">normal</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">normal</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">d</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">normal</span><span class="p">))}</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">]),</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">]),</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">]))</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">]),</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">]),</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">]),</span></td>
      </tr>
      <tr>
        <td id="L183" class="blob-num js-line-number" data-line-number="183"></td>
        <td id="LC183" class="blob-code js-file-line"><span class="nx">d</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">d</span><span class="p">]))},</span><span class="nx">computeMorphNormals</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalFaceNormal</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalFaceNormal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">normal</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalFaceNormal</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalVertexNormals</span><span class="o">||</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalVertexNormals</span><span class="o">=</span><span class="p">[]);</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalVertexNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalVertexNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalVertexNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">clone</span><span class="p">()}</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L184" class="blob-num js-line-number" data-line-number="184"></td>
        <td id="LC184" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">]){</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">faceNormals</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">vertexNormals</span><span class="o">=</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">faceNormals</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">vertexNormals</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="p">{</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">}</span><span class="o">:</span><span class="p">{</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">c</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">d</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">},</span></td>
      </tr>
      <tr>
        <td id="L185" class="blob-num js-line-number" data-line-number="185"></td>
        <td id="LC185" class="blob-code js-file-line"><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">)}</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">f</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">vertices</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">computeVertexNormals</span><span class="p">();</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">faceNormals</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">i</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">normal</span><span class="p">),</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span><span class="nx">j</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span><span class="nx">j</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">]))</span><span class="o">:</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span><span class="nx">j</span><span class="p">.</span><span class="nx">b</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span><span class="nx">j</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span><span class="nx">j</span><span class="p">.</span><span class="nx">d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="mi">3</span><span class="p">]))}</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span></td>
      </tr>
      <tr>
        <td id="L186" class="blob-num js-line-number" data-line-number="186"></td>
        <td id="LC186" class="blob-code js-file-line"><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">e</span><span class="p">.</span><span class="nx">normal</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalFaceNormal</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">__originalVertexNormals</span><span class="p">},</span><span class="nx">computeTangents</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">y</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">y</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">v</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">l</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">C</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">l</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">F</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">l</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">H</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">l</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">I</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="nx">z</span><span class="o">*</span><span class="nx">H</span><span class="o">-</span><span class="nx">C</span><span class="o">*</span><span class="nx">F</span><span class="p">);</span><span class="nx">B</span><span class="p">.</span><span class="nx">set</span><span class="p">((</span><span class="nx">H</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span><span class="nx">F</span><span class="o">*</span><span class="nx">t</span><span class="p">)</span><span class="o">*</span><span class="nx">I</span><span class="p">,(</span><span class="nx">H</span><span class="o">*</span><span class="nx">q</span><span class="o">-</span><span class="nx">F</span><span class="o">*</span><span class="nx">r</span><span class="p">)</span><span class="o">*</span><span class="nx">I</span><span class="p">,(</span><span class="nx">H</span><span class="o">*</span><span class="nx">s</span><span class="o">-</span><span class="nx">F</span><span class="o">*</span><span class="nx">v</span><span class="p">)</span><span class="o">*</span><span class="nx">I</span><span class="p">);</span><span class="nx">J</span><span class="p">.</span><span class="nx">set</span><span class="p">((</span><span class="nx">z</span><span class="o">*</span><span class="nx">t</span><span class="o">-</span><span class="nx">C</span><span class="o">*</span><span class="nx">p</span><span class="p">)</span><span class="o">*</span><span class="nx">I</span><span class="p">,(</span><span class="nx">z</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">C</span><span class="o">*</span><span class="nx">q</span><span class="p">)</span><span class="o">*</span><span class="nx">I</span><span class="p">,(</span><span class="nx">z</span><span class="o">*</span><span class="nx">v</span><span class="o">-</span><span class="nx">C</span><span class="o">*</span><span class="nx">s</span><span class="p">)</span><span class="o">*</span><span class="nx">I</span><span class="p">);</span><span class="nx">A</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">B</span><span class="p">);</span><span class="nx">A</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">B</span><span class="p">);</span><span class="nx">A</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">B</span><span class="p">);</span><span class="nx">K</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">J</span><span class="p">);</span><span class="nx">K</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">J</span><span class="p">);</span><span class="nx">K</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">J</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L187" class="blob-num js-line-number" data-line-number="187"></td>
        <td id="LC187" class="blob-code js-file-line"><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">F</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">I</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="p">[],</span><span class="nx">K</span><span class="o">=</span><span class="p">[],</span><span class="nx">B</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">N</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">M</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">A</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">K</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">b</span><span class="p">],</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">d</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">),</span><span class="nx">a</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">));</span><span class="kd">var</span> <span class="nx">w</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;b&quot;</span><span class="p">,</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="s2">&quot;d&quot;</span><span class="p">];</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span></td>
      </tr>
      <tr>
        <td id="L188" class="blob-num js-line-number" data-line-number="188"></td>
        <td id="LC188" class="blob-code js-file-line"><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">M</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">d</span><span class="p">]),</span><span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">w</span><span class="p">[</span><span class="nx">d</span><span class="p">]],</span><span class="nx">G</span><span class="o">=</span><span class="nx">A</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">N</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">G</span><span class="p">),</span><span class="nx">N</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">M</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">M</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">G</span><span class="p">))).</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">y</span><span class="p">.</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">G</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">K</span><span class="p">[</span><span class="nx">e</span><span class="p">]),</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">(</span><span class="nx">N</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">N</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">N</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">e</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">hasTangents</span><span class="o">=!</span><span class="mi">0</span><span class="p">},</span><span class="nx">computeLineDistances</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">+=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">])),</span><span class="k">this</span><span class="p">.</span><span class="nx">lineDistances</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">},</span><span class="nx">computeBoundingBox</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kc">null</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L189" class="blob-num js-line-number" data-line-number="189"></td>
        <td id="LC189" class="blob-code js-file-line"><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Box3</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">.</span><span class="nx">setFromPoints</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">)},</span><span class="nx">computeBoundingSphere</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kc">null</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sphere</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="p">.</span><span class="nx">setFromPoints</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">)},</span><span class="nx">mergeVertices</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">{},</span><span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">4</span><span class="p">),</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">__tmpVertices</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">e</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;_&quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">e</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;_&quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">e</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">]),</span><span class="nx">c</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L190" class="blob-num js-line-number" data-line-number="190"></td>
        <td id="LC190" class="blob-code js-file-line"><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">]];</span><span class="nx">e</span><span class="o">=</span><span class="p">[];</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">d</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">3</span><span class="o">&gt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">==</span><span class="nx">g</span><span class="p">[(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">3</span><span class="p">]){</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">break</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">d</span><span class="p">];</span><span class="nx">d</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">4</span><span class="o">&gt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">==</span><span class="nx">g</span><span class="p">[(</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="mi">4</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">i</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">d</span><span class="p">){</span><span class="nx">g</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)(</span><span class="nx">j</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L191" class="blob-num js-line-number" data-line-number="191"></td>
        <td id="LC191" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">g</span><span class="p">][</span><span class="nx">f</span><span class="p">])</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">}}</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">f</span><span class="p">;</span><span class="nx">f</span><span class="o">--</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">splice</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L192" class="blob-num js-line-number" data-line-number="192"></td>
        <td id="LC192" class="blob-code js-file-line"><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">clone</span><span class="p">());</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">clone</span><span class="p">());</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">y</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">dispose</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;dispose&quot;</span><span class="p">})}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryIdCount</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryIdCount</span><span class="o">++</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">uuid</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">generateUUID</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">dynamic</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">offsets</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">hasTangents</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="p">[]};</span></td>
      </tr>
      <tr>
        <td id="L193" class="blob-num js-line-number" data-line-number="193"></td>
        <td id="LC193" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="p">,</span><span class="nx">applyMatrix</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">array</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">multiplyVector3Array</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">((</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">).</span><span class="nx">getNormalMatrix</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">multiplyVector3Array</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">normalizeNormals</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">)},</span><span class="nx">computeBoundingBox</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kc">null</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Box3</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L194" class="blob-num js-line-number" data-line-number="194"></td>
        <td id="LC194" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="mi">3</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">b</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">b</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">c</span><span class="o">:</span><span class="nx">c</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">d</span><span class="o">:</span><span class="nx">d</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">d</span><span class="p">),</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">e</span><span class="o">:</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">e</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)},</span><span class="nx">computeBoundingSphere</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kc">null</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L195" class="blob-num js-line-number" data-line-number="195"></td>
        <td id="LC195" class="blob-code js-file-line"><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sphere</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="o">&gt;</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">c</span><span class="p">)}},</span><span class="nx">computeVertexNormals</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="o">=</span><span class="p">{</span><span class="nx">itemSize</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="nx">array</span><span class="o">:</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="k">else</span><span class="p">{</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">}</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L196" class="blob-num js-line-number" data-line-number="196"></td>
        <td id="LC196" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">index</span><span class="p">){</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">index</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">offsets</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="o">++</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">v</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">start</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">v</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">count</span><span class="p">;</span><span class="kd">var</span> <span class="nx">z</span><span class="o">=</span><span class="nx">v</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">index</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">+=</span><span class="nx">h</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">z</span><span class="o">+</span><span class="nx">s</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">z</span><span class="o">+</span><span class="nx">s</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">z</span><span class="o">+</span><span class="nx">s</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">h</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">n</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">g</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">p</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L197" class="blob-num js-line-number" data-line-number="197"></td>
        <td id="LC197" class="blob-code js-file-line"><span class="nx">m</span><span class="p">),</span><span class="nx">q</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">p</span><span class="p">),</span><span class="nx">r</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">),</span><span class="nx">q</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">r</span><span class="p">),</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">h</span><span class="p">]</span><span class="o">+=</span><span class="nx">q</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">+=</span><span class="nx">q</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">+=</span><span class="nx">q</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">g</span><span class="p">]</span><span class="o">+=</span><span class="nx">q</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">+=</span><span class="nx">q</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">+=</span><span class="nx">q</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="p">]</span><span class="o">+=</span><span class="nx">q</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">+=</span><span class="nx">q</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">+=</span><span class="nx">q</span><span class="p">.</span><span class="nx">z</span><span class="p">}}</span><span class="k">else</span><span class="p">{</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">+=</span><span class="mi">9</span><span class="p">)</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">n</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">3</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">5</span><span class="p">],</span><span class="nx">p</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">6</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">7</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span><span class="nx">t</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">),</span><span class="nx">q</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">p</span><span class="p">),</span><span class="nx">r</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">),</span><span class="nx">q</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">r</span><span class="p">),</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">z</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">normalizeNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L198" class="blob-num js-line-number" data-line-number="198"></td>
        <td id="LC198" class="blob-code js-file-line"><span class="o">!</span><span class="mi">0</span><span class="p">}},</span><span class="nx">normalizeNormals</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">b</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">d</span><span class="p">),</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">*=</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">*=</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">*=</span><span class="nx">b</span><span class="p">},</span><span class="nx">computeTangents</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">a</span><span class="p">];</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="mi">2</span><span class="p">];</span><span class="nx">Ua</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">Pa</span><span class="p">);</span><span class="nx">ka</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">L</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ka</span><span class="p">);</span><span class="nx">L</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">ka</span><span class="p">))).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">pa</span><span class="p">.</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">Ua</span><span class="p">,</span><span class="nx">ka</span><span class="p">);</span><span class="nx">Fa</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="nx">a</span><span class="p">]);</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">Fa</span><span class="o">?-</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">L</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">L</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">L</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">O</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">index</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="o">||</span></td>
      </tr>
      <tr>
        <td id="L199" class="blob-num js-line-number" data-line-number="199"></td>
        <td id="LC199" class="blob-code js-file-line"><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">uv</span><span class="p">)</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()&quot;</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">index</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">uv</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">tangent</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">tangent</span><span class="o">=</span><span class="p">{</span><span class="nx">itemSize</span><span class="o">:</span><span class="mi">4</span><span class="p">,</span><span class="nx">array</span><span class="o">:</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="nx">f</span><span class="p">)});</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">tangent</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">i</span><span class="o">=</span><span class="p">[],</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L200" class="blob-num js-line-number" data-line-number="200"></td>
        <td id="LC200" class="blob-code js-file-line"><span class="nx">i</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="kd">var</span> <span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">F</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">I</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">A</span><span class="p">,</span><span class="nx">K</span><span class="p">,</span><span class="nx">B</span><span class="p">,</span><span class="nx">J</span><span class="p">,</span><span class="nx">N</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">offsets</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">J</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">B</span><span class="o">&lt;</span><span class="nx">J</span><span class="p">;</span><span class="o">++</span><span class="nx">B</span><span class="p">){</span><span class="nx">K</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">B</span><span class="p">].</span><span class="nx">start</span><span class="p">;</span><span class="nx">N</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">B</span><span class="p">].</span><span class="nx">count</span><span class="p">;</span><span class="kd">var</span> <span class="nx">Z</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">B</span><span class="p">].</span><span class="nx">index</span><span class="p">;</span><span class="nx">A</span><span class="o">=</span><span class="nx">K</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">K</span><span class="o">+=</span><span class="nx">N</span><span class="p">;</span><span class="nx">A</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">;</span><span class="nx">A</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span><span class="nx">N</span><span class="o">=</span><span class="nx">Z</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="nx">A</span><span class="p">],</span><span class="nx">y</span><span class="o">=</span><span class="nx">Z</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="nx">A</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">M</span><span class="o">=</span><span class="nx">Z</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="nx">A</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">N</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">N</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">N</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">y</span><span class="p">],</span><span class="nx">t</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">y</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">r</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">M</span><span class="p">],</span><span class="nx">s</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">M</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">v</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">M</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">z</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">N</span><span class="p">],</span><span class="nx">C</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">N</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">F</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">y</span><span class="p">],</span><span class="nx">H</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">y</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">I</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">M</span><span class="p">],</span><span class="nx">G</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">M</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">p</span><span class="o">-=</span><span class="nx">l</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">r</span><span class="o">-</span><span class="nx">l</span><span class="p">,</span><span class="nx">t</span><span class="o">-=</span><span class="nx">m</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">s</span><span class="o">-</span><span class="nx">m</span><span class="p">,</span><span class="nx">q</span><span class="o">-=</span><span class="nx">n</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">v</span><span class="o">-</span><span class="nx">n</span><span class="p">,</span><span class="nx">F</span><span class="o">-=</span><span class="nx">z</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="nx">I</span><span class="o">-</span><span class="nx">z</span><span class="p">,</span><span class="nx">H</span><span class="o">-=</span><span class="nx">C</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="nx">G</span><span class="o">-</span><span class="nx">C</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="nx">F</span><span class="o">*</span><span class="nx">C</span><span class="o">-</span><span class="nx">z</span><span class="o">*</span><span class="nx">H</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">set</span><span class="p">((</span><span class="nx">C</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span><span class="nx">H</span><span class="o">*</span><span class="nx">l</span><span class="p">)</span><span class="o">*</span><span class="nx">G</span><span class="p">,(</span><span class="nx">C</span><span class="o">*</span><span class="nx">t</span><span class="o">-</span><span class="nx">H</span><span class="o">*</span><span class="nx">m</span><span class="p">)</span><span class="o">*</span><span class="nx">G</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L201" class="blob-num js-line-number" data-line-number="201"></td>
        <td id="LC201" class="blob-code js-file-line"><span class="p">(</span><span class="nx">C</span><span class="o">*</span><span class="nx">q</span><span class="o">-</span><span class="nx">H</span><span class="o">*</span><span class="nx">n</span><span class="p">)</span><span class="o">*</span><span class="nx">G</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">set</span><span class="p">((</span><span class="nx">F</span><span class="o">*</span><span class="nx">l</span><span class="o">-</span><span class="nx">z</span><span class="o">*</span><span class="nx">p</span><span class="p">)</span><span class="o">*</span><span class="nx">G</span><span class="p">,(</span><span class="nx">F</span><span class="o">*</span><span class="nx">m</span><span class="o">-</span><span class="nx">z</span><span class="o">*</span><span class="nx">t</span><span class="p">)</span><span class="o">*</span><span class="nx">G</span><span class="p">,(</span><span class="nx">F</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">z</span><span class="o">*</span><span class="nx">q</span><span class="p">)</span><span class="o">*</span><span class="nx">G</span><span class="p">),</span><span class="nx">g</span><span class="p">[</span><span class="nx">N</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">g</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">g</span><span class="p">[</span><span class="nx">M</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">i</span><span class="p">[</span><span class="nx">N</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">j</span><span class="p">),</span><span class="nx">i</span><span class="p">[</span><span class="nx">y</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">j</span><span class="p">),</span><span class="nx">i</span><span class="p">[</span><span class="nx">M</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">j</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">L</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">pa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">Pa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">Ua</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">O</span><span class="p">,</span><span class="nx">ka</span><span class="p">,</span><span class="nx">Fa</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">J</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">B</span><span class="o">&lt;</span><span class="nx">J</span><span class="p">;</span><span class="o">++</span><span class="nx">B</span><span class="p">){</span><span class="nx">K</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">B</span><span class="p">].</span><span class="nx">start</span><span class="p">;</span><span class="nx">N</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">B</span><span class="p">].</span><span class="nx">count</span><span class="p">;</span><span class="nx">Z</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">B</span><span class="p">].</span><span class="nx">index</span><span class="p">;</span><span class="nx">A</span><span class="o">=</span><span class="nx">K</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">K</span><span class="o">+=</span><span class="nx">N</span><span class="p">;</span><span class="nx">A</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">;</span><span class="nx">A</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span><span class="nx">N</span><span class="o">=</span><span class="nx">Z</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="nx">A</span><span class="p">],</span><span class="nx">y</span><span class="o">=</span><span class="nx">Z</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="nx">A</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">M</span><span class="o">=</span><span class="nx">Z</span><span class="o">+</span><span class="nx">b</span><span class="p">[</span><span class="nx">A</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">a</span><span class="p">(</span><span class="nx">N</span><span class="p">),</span><span class="nx">a</span><span class="p">(</span><span class="nx">y</span><span class="p">),</span><span class="nx">a</span><span class="p">(</span><span class="nx">M</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">tangentsNeedUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hasTangents</span><span class="o">=!</span><span class="mi">0</span><span class="p">}},</span><span class="nx">dispose</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;dispose&quot;</span><span class="p">})}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrixInverse</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">lookAt</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">up</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">setFromRotationMatrix</span><span class="p">(</span><span class="nx">a</span><span class="p">)}}();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">bottom</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="mf">0.1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="mi">2</span><span class="nx">E3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">makeOrthographic</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">top</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">bottom</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="mi">50</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">aspect</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mf">0.1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="mi">2</span><span class="nx">E3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setLens</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">24</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">radToDeg</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="p">)));</span><span class="k">this</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">()};</span></td>
      </tr>
      <tr>
        <td id="L202" class="blob-num js-line-number" data-line-number="202"></td>
        <td id="LC202" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setViewOffset</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">fullWidth</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fullHeight</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">()};</span></td>
      </tr>
      <tr>
        <td id="L203" class="blob-num js-line-number" data-line-number="203"></td>
        <td id="LC203" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fullWidth</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fullWidth</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">fullHeight</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">tan</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">degToRad</span><span class="p">(</span><span class="mf">0.5</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="p">))</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">c</span><span class="o">=-</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="o">-</span><span class="nx">d</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">makeFrustum</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">fullWidth</span><span class="p">,</span><span class="nx">d</span><span class="o">+</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">fullWidth</span><span class="p">,</span><span class="nx">b</span><span class="o">-</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">fullHeight</span><span class="p">,</span><span class="nx">b</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">c</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">fullHeight</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="p">)}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">makePerspective</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">aspect</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AreaLight</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">normal</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">intensity</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">constantAttenuation</span><span class="o">=</span><span class="mf">1.5</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">linearAttenuation</span><span class="o">=</span><span class="mf">0.5</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">quadraticAttenuation</span><span class="o">=</span><span class="mf">0.1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AreaLight</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">intensity</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraNear</span><span class="o">=</span><span class="mi">50</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraFar</span><span class="o">=</span><span class="mi">5</span><span class="nx">E3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraLeft</span><span class="o">=-</span><span class="mi">500</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraTop</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraRight</span><span class="o">=</span><span class="mi">500</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraBottom</span><span class="o">=-</span><span class="mi">500</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowBias</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="o">=</span><span class="mf">0.5</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapHeight</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapWidth</span><span class="o">=</span><span class="mi">512</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascade</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeOffset</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L204" class="blob-num js-line-number" data-line-number="204"></td>
        <td id="LC204" class="blob-code js-file-line"><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="nx">E3</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeCount</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeBias</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeWidth</span><span class="o">=</span><span class="p">[</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeHeight</span><span class="o">=</span><span class="p">[</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">,</span><span class="mi">512</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeNearZ</span><span class="o">=</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mf">0.99</span><span class="p">,</span><span class="mf">0.998</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeFarZ</span><span class="o">=</span><span class="p">[</span><span class="mf">0.99</span><span class="p">,</span><span class="mf">0.998</span><span class="p">,</span><span class="mi">1</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCascadeArray</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapSize</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMap</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L205" class="blob-num js-line-number" data-line-number="205"></td>
        <td id="LC205" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">intensity</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">intensity</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">castShadow</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">HemisphereLight</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">100</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">groundColor</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">intensity</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">HemisphereLight</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">HemisphereLight</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">groundColor</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">groundColor</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">intensity</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">intensity</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">intensity</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">0</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">intensity</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">intensity</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">distance</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">intensity</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">angle</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">exponent</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="mi">10</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraNear</span><span class="o">=</span><span class="mi">50</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraFar</span><span class="o">=</span><span class="mi">5</span><span class="nx">E3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraFov</span><span class="o">=</span><span class="mi">50</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowBias</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="o">=</span><span class="mf">0.5</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapHeight</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapWidth</span><span class="o">=</span><span class="mi">512</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapSize</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L206" class="blob-num js-line-number" data-line-number="206"></td>
        <td id="LC206" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">shadowMap</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">intensity</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">intensity</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">distance</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">angle</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">angle</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">exponent</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">exponent</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">castShadow</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">statusDomElement</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">showStatus</span><span class="o">=</span><span class="nx">a</span><span class="p">)</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addStatusElement</span><span class="p">()</span><span class="o">:</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadProgress</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadComplete</span><span class="o">=</span><span class="kd">function</span><span class="p">(){}};</span></td>
      </tr>
      <tr>
        <td id="L207" class="blob-num js-line-number" data-line-number="207"></td>
        <td id="LC207" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">,</span><span class="nx">crossOrigin</span><span class="o">:</span><span class="s2">&quot;anonymous&quot;</span><span class="p">,</span><span class="nx">addStatusElement</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;div&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="s2">&quot;absolute&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="s2">&quot;0px&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="s2">&quot;0px&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">fontSize</span><span class="o">=</span><span class="s2">&quot;0.8em&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">textAlign</span><span class="o">=</span><span class="s2">&quot;left&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">background</span><span class="o">=</span><span class="s2">&quot;rgba(0,0,0,0.25)&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="s2">&quot;#fff&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="s2">&quot;120px&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">padding</span><span class="o">=</span><span class="s2">&quot;0.5em 0.5em 0.5em 0.5em&quot;</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">zIndex</span><span class="o">=</span><span class="mi">1</span><span class="nx">E3</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="s2">&quot;Loading ...&quot;</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">updateProgress</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="s2">&quot;Loaded &quot;</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">total</span><span class="o">?</span><span class="nx">b</span><span class="o">+</span><span class="p">((</span><span class="mi">100</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">loaded</span><span class="o">/</span></td>
      </tr>
      <tr>
        <td id="L208" class="blob-num js-line-number" data-line-number="208"></td>
        <td id="LC208" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">total</span><span class="p">).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;%&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="o">+</span><span class="p">((</span><span class="nx">a</span><span class="p">.</span><span class="nx">loaded</span><span class="o">/</span><span class="mi">1</span><span class="nx">E3</span><span class="p">).</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot; KB&quot;</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">statusDomElement</span><span class="p">.</span><span class="nx">innerHTML</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="nx">extractUrlBase</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">pop</span><span class="p">();</span><span class="k">return</span><span class="p">(</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="s2">&quot;.&quot;</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;/&quot;</span><span class="p">))</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="p">},</span><span class="nx">initMaterials</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="o">++</span><span class="nx">d</span><span class="p">)</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createMaterial</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">needsTangents</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">},</span><span class="nx">createMaterial</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">LN2</span><span class="p">;</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">==</span></td>
      </tr>
      <tr>
        <td id="L209" class="blob-num js-line-number" data-line-number="209"></td>
        <td id="LC209" class="blob-code js-file-line"><span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">LN2</span><span class="p">;</span><span class="k">return</span> <span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">round</span><span class="p">(</span><span class="nx">a</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">r</span><span class="p">){</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="sr">/\.dds$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">v</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="o">+</span><span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">){</span><span class="kd">var</span> <span class="nx">z</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">loadCompressedTexture</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">z</span><span class="p">}</span><span class="k">else</span> <span class="nx">z</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">),</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">(</span><span class="nx">z</span><span class="p">);</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">sourceFile</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span><span class="mi">1</span><span class="o">!==</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">wrapS</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">),</span><span class="mi">1</span><span class="o">!==</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">wrapT</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">));</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">offset</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">i</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">i</span><span class="p">[</span><span class="mi">1</span><span class="p">]);</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="p">{</span><span class="nx">repeat</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">,</span><span class="nx">mirror</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MirroredRepeatWrapping</span><span class="p">},</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span></td>
      </tr>
      <tr>
        <td id="L210" class="blob-num js-line-number" data-line-number="210"></td>
        <td id="LC210" class="blob-code js-file-line"><span class="nx">f</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">wrapS</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="mi">0</span><span class="p">]]),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">wrapT</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="mi">1</span><span class="p">]]));</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">anisotropy</span><span class="o">=</span><span class="nx">r</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">s</span><span class="p">){</span><span class="kd">var</span> <span class="nx">C</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">Image</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">)</span><span class="o">||!</span><span class="nx">c</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="nx">C</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">C</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">C</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">).</span><span class="nx">drawImage</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)}</span><span class="k">else</span> <span class="nx">C</span><span class="p">.</span><span class="nx">image</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">C</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">};</span><span class="nx">a</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="nx">v</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">(</span><span class="mi">255</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="mi">255</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="mi">255</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]}</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;MeshLambertMaterial&quot;</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="p">{</span><span class="nx">color</span><span class="o">:</span><span class="mi">15658734</span><span class="p">,</span><span class="nx">opacity</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">map</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L211" class="blob-num js-line-number" data-line-number="211"></td>
        <td id="LC211" class="blob-code js-file-line"><span class="nx">lightMap</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">normalMap</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">bumpMap</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">wireframe</span><span class="o">:!</span><span class="mi">1</span><span class="p">};</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span><span class="s2">&quot;phong&quot;</span><span class="o">===</span><span class="nx">j</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;MeshPhongMaterial&quot;</span><span class="o">:</span><span class="s2">&quot;basic&quot;</span><span class="o">===</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;MeshBasicMaterial&quot;</span><span class="p">)}</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">blending</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">blending</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">blending</span><span class="o">=</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">blending</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparent</span><span class="o">||</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">opacity</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparent</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthTest</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">depthTest</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthTest</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthWrite</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">depthWrite</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthWrite</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">visible</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">flipSided</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">side</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BackSide</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L212" class="blob-num js-line-number" data-line-number="212"></td>
        <td id="LC212" class="blob-code js-file-line"><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">doubleSided</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">side</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DoubleSide</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="s2">&quot;face&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceColors</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorDiffuse</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorDiffuse</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">DbgColor</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">DbgColor</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorSpecular</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">specular</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorSpecular</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorAmbient</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ambient</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorAmbient</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparency</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">opacity</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparency</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">specularCoef</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">shininess</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">specularCoef</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapDiffuse</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L213" class="blob-num js-line-number" data-line-number="213"></td>
        <td id="LC213" class="blob-code js-file-line"><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;map&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapDiffuse</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapDiffuseRepeat</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapDiffuseOffset</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapDiffuseWrap</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapDiffuseAnisotropy</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapLight</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;lightMap&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapLight</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapLightRepeat</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapLightOffset</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapLightWrap</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapLightAnisotropy</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapBump</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;bumpMap&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapBump</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapBumpRepeat</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapBumpOffset</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapBumpWrap</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapBumpAnisotropy</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormal</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;normalMap&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormal</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormalRepeat</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormalOffset</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormalWrap</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormalAnisotropy</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapSpecular</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;specularMap&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapSpecular</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapSpecularRepeat</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L214" class="blob-num js-line-number" data-line-number="214"></td>
        <td id="LC214" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">mapSpecularOffset</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapSpecularWrap</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapSpecularAnisotropy</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapBumpScale</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">bumpScale</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapBumpScale</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormal</span><span class="o">?</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderLib</span><span class="p">.</span><span class="nx">normalmap</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">tNormal</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">normalMap</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormalFactor</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">uNormalScale</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormalFactor</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapNormalFactor</span><span class="p">),</span><span class="nx">i</span><span class="p">.</span><span class="nx">map</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">tDiffuse</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">map</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">enableDiffuse</span><span class="p">.</span><span class="nx">value</span><span class="o">=!</span><span class="mi">0</span><span class="p">),</span><span class="nx">i</span><span class="p">.</span><span class="nx">specularMap</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">tSpecular</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">specularMap</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">enableSpecular</span><span class="p">.</span><span class="nx">value</span><span class="o">=!</span><span class="mi">0</span><span class="p">),</span><span class="nx">i</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">tAO</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">enableAO</span><span class="p">.</span><span class="nx">value</span><span class="o">=!</span><span class="mi">0</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">uDiffuseColor</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">color</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L215" class="blob-num js-line-number" data-line-number="215"></td>
        <td id="LC215" class="blob-code js-file-line"><span class="nx">j</span><span class="p">.</span><span class="nx">uSpecularColor</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">specular</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">uAmbientColor</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ambient</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">uShininess</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">shininess</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">i</span><span class="p">.</span><span class="nx">opacity</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">uOpacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">opacity</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">j</span><span class="p">,</span><span class="nx">lights</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">fog</span><span class="o">:!</span><span class="mi">0</span><span class="p">}),</span><span class="nx">i</span><span class="p">.</span><span class="nx">transparent</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=!</span><span class="mi">0</span><span class="p">))</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">[</span><span class="nx">g</span><span class="p">](</span><span class="nx">i</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">DbgName</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">DbgName</span><span class="p">);</span><span class="k">return</span> <span class="nx">g</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">XHRLoader</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">manager</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DefaultLoadingManager</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L216" class="blob-num js-line-number" data-line-number="216"></td>
        <td id="LC216" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">XHRLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">XHRLoader</span><span class="p">,</span><span class="nx">load</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;load&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">manager</span><span class="p">.</span><span class="nx">itemEnd</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">responseText</span><span class="p">)},</span><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;progress&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">manager</span><span class="p">.</span><span class="nx">itemStart</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">setCrossOrigin</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="nx">a</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageLoader</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">manager</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DefaultLoadingManager</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L217" class="blob-num js-line-number" data-line-number="217"></td>
        <td id="LC217" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageLoader</span><span class="p">,</span><span class="nx">load</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;img&quot;</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;load&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(){</span><span class="nx">e</span><span class="p">.</span><span class="nx">manager</span><span class="p">.</span><span class="nx">itemEnd</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="k">this</span><span class="p">)},</span><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;progress&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;error&quot;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">manager</span><span class="p">.</span><span class="nx">itemStart</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">setCrossOrigin</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="nx">a</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">withCredentials</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">load</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">extractUrlBase</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">loadAjaxJSON</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L218" class="blob-num js-line-number" data-line-number="218"></td>
        <td id="LC218" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">loadAjaxJSON</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">onreadystatechange</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">readyState</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">DONE</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="mi">200</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">status</span><span class="o">||</span><span class="mi">0</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">status</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">responseText</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">responseText</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">c</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">materials</span><span class="p">)}</span><span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;THREE.JSONLoader: [&quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;] seems to be unreachable or file there is empty&quot;</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">onLoadComplete</span><span class="p">()}</span><span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;THREE.JSONLoader: Couldn&#39;t load [&quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;] [&quot;</span><span class="o">+</span><span class="nx">f</span><span class="p">.</span><span class="nx">status</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">);</span><span class="k">else</span> <span class="nx">f</span><span class="p">.</span><span class="nx">readyState</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">LOADING</span><span class="o">?</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">h</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L219" class="blob-num js-line-number" data-line-number="219"></td>
        <td id="LC219" class="blob-code js-file-line"><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getResponseHeader</span><span class="p">(</span><span class="s2">&quot;Content-Length&quot;</span><span class="p">)),</span><span class="nx">e</span><span class="p">({</span><span class="nx">total</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">loaded</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">responseText</span><span class="p">.</span><span class="nx">length</span><span class="p">}))</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">readyState</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">HEADERS_RECEIVED</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getResponseHeader</span><span class="p">(</span><span class="s2">&quot;Content-Length&quot;</span><span class="p">))};</span><span class="nx">f</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">withCredentials</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">withCredentials</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L220" class="blob-num js-line-number" data-line-number="220"></td>
        <td id="LC220" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">parse</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">scale</span><span class="o">?</span><span class="mi">1</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">scale</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">;</span><span class="kd">var</span> <span class="nx">C</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">normals</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvs</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvs</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">H</span><span class="o">++</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">H</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="p">[]}</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;)</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">p</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;){</span><span class="nx">p</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">p</span><span class="o">&amp;</span><span class="mi">1</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">p</span><span class="o">&amp;</span><span class="mi">2</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">p</span><span class="o">&amp;</span><span class="mi">4</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">p</span><span class="o">&amp;</span><span class="mi">8</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">p</span><span class="o">&amp;</span><span class="mi">16</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">p</span><span class="o">&amp;</span><span class="mi">32</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">p</span><span class="o">&amp;</span><span class="mi">64</span><span class="p">;</span><span class="nx">p</span><span class="o">&amp;=</span><span class="mi">128</span><span class="p">;</span><span class="nx">j</span><span class="o">?</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L221" class="blob-num js-line-number" data-line-number="221"></td>
        <td id="LC221" class="blob-code js-file-line"><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">q</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">q</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">q</span><span class="p">.</span><span class="nx">d</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="mi">4</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">q</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">q</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="mi">3</span><span class="p">);</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">q</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="nx">h</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">H</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvs</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">v</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">n</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">[</span><span class="nx">e</span><span class="p">][</span><span class="nx">h</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">n</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">H</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvs</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="nx">s</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">v</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">n</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="o">*</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">s</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">n</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">e</span><span class="p">][</span><span class="nx">h</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="p">}</span><span class="nx">m</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">C</span><span class="p">[</span><span class="nx">m</span><span class="o">++</span><span class="p">],</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">C</span><span class="p">[</span><span class="nx">m</span><span class="o">++</span><span class="p">],</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">C</span><span class="p">[</span><span class="nx">m</span><span class="p">],</span><span class="nx">q</span><span class="p">.</span><span class="nx">normal</span><span class="o">=</span><span class="nx">f</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">m</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L222" class="blob-num js-line-number" data-line-number="222"></td>
        <td id="LC222" class="blob-code js-file-line"><span class="mi">3</span><span class="o">*</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">C</span><span class="p">[</span><span class="nx">m</span><span class="o">++</span><span class="p">],</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">C</span><span class="p">[</span><span class="nx">m</span><span class="o">++</span><span class="p">],</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">C</span><span class="p">[</span><span class="nx">m</span><span class="p">],</span><span class="nx">q</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">F</span><span class="p">[</span><span class="nx">l</span><span class="p">]),</span><span class="nx">q</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">l</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">l</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">g</span><span class="o">++</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">F</span><span class="p">[</span><span class="nx">l</span><span class="p">]),</span><span class="nx">q</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">q</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">+=</span><span class="mi">2</span><span class="p">)</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">C</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">[</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">+=</span><span class="mi">2</span><span class="p">)</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">C</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">[</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L223" class="blob-num js-line-number" data-line-number="223"></td>
        <td id="LC223" class="blob-code js-file-line"><span class="nx">C</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))}</span><span class="nx">c</span><span class="p">.</span><span class="nx">bones</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">bones</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">animation</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">animation</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">=</span><span class="p">{};</span><span class="nx">c</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">name</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">vertices</span><span class="o">=</span><span class="p">[];</span><span class="nx">F</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">vertices</span><span class="p">;</span><span class="nx">H</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">vertices</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">C</span><span class="o">=</span><span class="nx">H</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">C</span><span class="p">;</span><span class="nx">z</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">H</span><span class="p">[</span><span class="nx">z</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">H</span><span class="p">[</span><span class="nx">z</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">H</span><span class="p">[</span><span class="nx">z</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">F</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">p</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">=</span><span class="p">{};</span><span class="nx">c</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">name</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">colors</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L224" class="blob-num js-line-number" data-line-number="224"></td>
        <td id="LC224" class="blob-code js-file-line"><span class="p">[];</span><span class="nx">C</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">colors</span><span class="p">;</span><span class="nx">F</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphColors</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">colors</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">z</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">z</span><span class="p">;</span><span class="nx">d</span><span class="o">+=</span><span class="mi">3</span><span class="p">)</span><span class="nx">H</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16755200</span><span class="p">),</span><span class="nx">H</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">F</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">F</span><span class="p">[</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">F</span><span class="p">[</span><span class="nx">d</span><span class="o">+</span><span class="mi">2</span><span class="p">]),</span><span class="nx">C</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">H</span><span class="p">)}}</span><span class="nx">c</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="nx">c</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="nx">c</span><span class="p">.</span><span class="nx">computeBoundingSphere</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">)</span><span class="k">return</span><span class="p">{</span><span class="nx">geometry</span><span class="o">:</span><span class="nx">c</span><span class="p">};</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">initMaterials</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">needsTangents</span><span class="p">(</span><span class="nx">d</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">computeTangents</span><span class="p">();</span><span class="k">return</span><span class="p">{</span><span class="nx">geometry</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">materials</span><span class="o">:</span><span class="nx">d</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LoadingManager</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoad</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">onProgress</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">onError</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">itemStart</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">f</span><span class="o">++</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">itemEnd</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">e</span><span class="o">++</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">onProgress</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">onProgress</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="o">===</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">onLoad</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">onLoad</span><span class="p">()}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DefaultLoadingManager</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LoadingManager</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryLoader</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">manager</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DefaultLoadingManager</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryLoader</span><span class="p">,</span><span class="nx">load</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">XHRLoader</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">setCrossOrigin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">b</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">a</span><span class="p">)))})},</span><span class="nx">setCrossOrigin</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="nx">a</span><span class="p">},</span><span class="nx">parse</span><span class="o">:</span><span class="kd">function</span><span class="p">(){}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MaterialLoader</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">manager</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DefaultLoadingManager</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L225" class="blob-num js-line-number" data-line-number="225"></td>
        <td id="LC225" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MaterialLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MaterialLoader</span><span class="p">,</span><span class="nx">load</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">XHRLoader</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">setCrossOrigin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">b</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">a</span><span class="p">)))})},</span><span class="nx">setCrossOrigin</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="nx">a</span><span class="p">},</span><span class="nx">parse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;MeshBasicMaterial&quot;</span><span class="o">:</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">opacity</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">opacity</span><span class="p">,</span><span class="nx">transparent</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparent</span><span class="p">,</span><span class="nx">wireframe</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">});</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;MeshLambertMaterial&quot;</span><span class="o">:</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L226" class="blob-num js-line-number" data-line-number="226"></td>
        <td id="LC226" class="blob-code js-file-line"><span class="nx">ambient</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">ambient</span><span class="p">,</span><span class="nx">emissive</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">emissive</span><span class="p">,</span><span class="nx">opacity</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">opacity</span><span class="p">,</span><span class="nx">transparent</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparent</span><span class="p">,</span><span class="nx">wireframe</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">});</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;MeshPhongMaterial&quot;</span><span class="o">:</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">ambient</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">ambient</span><span class="p">,</span><span class="nx">emissive</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">emissive</span><span class="p">,</span><span class="nx">specular</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">specular</span><span class="p">,</span><span class="nx">shininess</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">shininess</span><span class="p">,</span><span class="nx">opacity</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">opacity</span><span class="p">,</span><span class="nx">transparent</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparent</span><span class="p">,</span><span class="nx">wireframe</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">});</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;MeshNormalMaterial&quot;</span><span class="o">:</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="p">({</span><span class="nx">opacity</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">opacity</span><span class="p">,</span><span class="nx">transparent</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparent</span><span class="p">,</span><span class="nx">wireframe</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">});</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;MeshDepthMaterial&quot;</span><span class="o">:</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="p">({</span><span class="nx">opacity</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">opacity</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L227" class="blob-num js-line-number" data-line-number="227"></td>
        <td id="LC227" class="blob-code js-file-line"><span class="nx">transparent</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparent</span><span class="p">,</span><span class="nx">wireframe</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">})}</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ObjectLoader</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">manager</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DefaultLoadingManager</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L228" class="blob-num js-line-number" data-line-number="228"></td>
        <td id="LC228" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ObjectLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ObjectLoader</span><span class="p">,</span><span class="nx">load</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">XHRLoader</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">manager</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">setCrossOrigin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">b</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">a</span><span class="p">)))})},</span><span class="nx">setCrossOrigin</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="nx">a</span><span class="p">},</span><span class="nx">parse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseGeometries</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometries</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">parseMaterials</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">materials</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">parseObject</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">)},</span><span class="nx">parseGeometries</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">{};</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L229" class="blob-num js-line-number" data-line-number="229"></td>
        <td id="LC229" class="blob-code js-file-line"><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="k">switch</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;PlaneGeometry&quot;</span><span class="o">:</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PlaneGeometry</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">widthSegments</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">heightSegments</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;CubeGeometry&quot;</span><span class="o">:</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">depth</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">widthSegments</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">heightSegments</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">depthSegments</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;CylinderGeometry&quot;</span><span class="o">:</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CylinderGeometry</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">radiusTop</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">radiusBottom</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">radiusSegments</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">heightSegments</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">openEnded</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;SphereGeometry&quot;</span><span class="o">:</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">widthSegments</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">heightSegments</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">phiStart</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">phiLength</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L230" class="blob-num js-line-number" data-line-number="230"></td>
        <td id="LC230" class="blob-code js-file-line"><span class="nx">h</span><span class="p">.</span><span class="nx">thetaStart</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">thetaLength</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;IcosahedronGeometry&quot;</span><span class="o">:</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">IcosahedronGeometry</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">detail</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;TorusGeometry&quot;</span><span class="o">:</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusGeometry</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">tube</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">arc</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;TorusKnotGeometry&quot;</span><span class="o">:</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusKnotGeometry</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">tube</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">p</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">q</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">heightScale</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;Geometry&quot;</span><span class="o">:</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">data</span><span class="p">).</span><span class="nx">geometry</span><span class="p">}</span><span class="nx">f</span><span class="p">.</span><span class="nx">uuid</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">uuid</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">h</span><span class="p">.</span><span class="nx">name</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">uuid</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">}</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">parseMaterials</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L231" class="blob-num js-line-number" data-line-number="231"></td>
        <td id="LC231" class="blob-code js-file-line"><span class="p">{};</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MaterialLoader</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">uuid</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">uuid</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="p">.</span><span class="nx">name</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">uuid</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">}</span><span class="k">return</span> <span class="nx">b</span><span class="p">},</span><span class="nx">parseObject</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="p">;</span><span class="k">switch</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;Scene&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;PerspectiveCamera&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">fov</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">aspect</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">far</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;OrthographicCamera&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">right</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">top</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">bottom</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">far</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;AmbientLight&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L232" class="blob-num js-line-number" data-line-number="232"></td>
        <td id="LC232" class="blob-code js-file-line"><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;DirectionalLight&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">intensity</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;PointLight&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">intensity</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">distance</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;SpotLight&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">intensity</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">distance</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">angle</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">exponent</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;HemisphereLight&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">HemisphereLight</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">groundColor</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">intensity</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;Mesh&quot;</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">geometry</span><span class="p">];</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">material</span><span class="p">];</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;THREE.ObjectLoader: Undefined geometry &quot;</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L233" class="blob-num js-line-number" data-line-number="233"></td>
        <td id="LC233" class="blob-code js-file-line"><span class="nx">b</span><span class="p">.</span><span class="nx">geometry</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;THREE.ObjectLoader: Undefined material &quot;</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">material</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">}</span><span class="nx">e</span><span class="p">.</span><span class="nx">uuid</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">uuid</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrix</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrix</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">decompose</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">scale</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">position</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">position</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">rotation</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">rotation</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">scale</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">scale</span><span class="p">));</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">visible</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">userData</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L234" class="blob-num js-line-number" data-line-number="234"></td>
        <td id="LC234" class="blob-code js-file-line"><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">userData</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">userData</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span> <span class="k">in</span> <span class="nx">b</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">parseObject</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">));</span><span class="k">return</span> <span class="nx">e</span><span class="p">}}()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SceneLoader</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadProgress</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">onLoadComplete</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">callbackSync</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">callbackProgress</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">geometryHandlers</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchyHandlers</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">addGeometryHandler</span><span class="p">(</span><span class="s2">&quot;ascii&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">JSONLoader</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L235" class="blob-num js-line-number" data-line-number="235"></td>
        <td id="LC235" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">SceneLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SceneLoader</span><span class="p">,</span><span class="nx">load</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">XHRLoader</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">manager</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">setCrossOrigin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)})},</span><span class="nx">setCrossOrigin</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="nx">a</span><span class="p">},</span><span class="nx">addGeometryHandler</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">geometryHandlers</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">loaderClass</span><span class="o">:</span><span class="nx">b</span><span class="p">}},</span><span class="nx">addHierarchyHandler</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchyHandlers</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">loaderClass</span><span class="o">:</span><span class="nx">b</span><span class="p">}},</span><span class="nx">parse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span><span class="s2">&quot;relativeToHTML&quot;</span><span class="o">==</span><span class="nx">b</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">n</span><span class="o">+</span><span class="s2">&quot;/&quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(){</span><span class="nx">f</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">scene</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L236" class="blob-num js-line-number" data-line-number="236"></td>
        <td id="LC236" class="blob-code js-file-line"><span class="nx">B</span><span class="p">.</span><span class="nx">objects</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span> <span class="k">in</span> <span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">n</span><span class="p">],</span><span class="nx">s</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">r</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span> <span class="k">in</span> <span class="nx">m</span><span class="p">.</span><span class="nx">hierarchyHandlers</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">loading</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">url</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">material</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">position</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">rotation</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">scale</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">visible</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">children</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">userData</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">skin</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">morph</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">mirroredLoop</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">duration</span><span class="o">:</span><span class="mi">1</span><span class="p">};</span><span class="nx">h</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">y</span> <span class="k">in</span> <span class="nx">s</span><span class="p">)</span><span class="nx">y</span> <span class="k">in</span> <span class="nx">e</span><span class="o">||</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">y</span><span class="p">]);</span><span class="nx">t</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">material</span><span class="p">];</span><span class="nx">s</span><span class="p">.</span><span class="nx">loading</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">hierarchyHandlers</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="p">].</span><span class="nx">loaderObject</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">options</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">urlBaseType</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">))</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">urlBaseType</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L237" class="blob-num js-line-number" data-line-number="237"></td>
        <td id="LC237" class="blob-code js-file-line"><span class="nx">a</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">s</span><span class="p">),</span><span class="nx">h</span><span class="p">)}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">geometry</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">geometry</span><span class="p">]){</span><span class="nx">r</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">material</span><span class="p">];</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">rotation</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">scale</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">matrix</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">material</span><span class="o">||</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">face_materials</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">geometry</span><span class="p">]));</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="nx">t</span><span class="p">.</span><span class="nx">materials</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">face_materials</span><span class="p">[</span><span class="nx">s</span><span class="p">.</span><span class="nx">geometry</span><span class="p">]));</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">materials</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">r</span><span class="o">=</span><span class="nx">r</span><span class="o">||</span><span class="nx">t</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L238" class="blob-num js-line-number" data-line-number="238"></td>
        <td id="LC238" class="blob-code js-file-line"><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">computeTangents</span><span class="p">();</span><span class="nx">s</span><span class="p">.</span><span class="nx">skin</span><span class="o">?</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">s</span><span class="p">.</span><span class="nx">morph</span><span class="o">?</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">duration</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">duration</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">duration</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">time</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">time</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">mirroredLoop</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">mirroredLoop</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">mirroredLoop</span><span class="p">),</span><span class="nx">t</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">computeMorphNormals</span><span class="p">())</span><span class="o">:</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">c</span><span class="o">?</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">8</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">9</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">10</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">11</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">14</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="mi">15</span><span class="p">]))</span><span class="o">:</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">h</span><span class="p">),</span><span class="nx">l</span><span class="o">?</span><span class="nx">r</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L239" class="blob-num js-line-number" data-line-number="239"></td>
        <td id="LC239" class="blob-code js-file-line"><span class="nx">r</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">j</span><span class="p">));</span><span class="nx">r</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">visible</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">castShadow</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="nx">A</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">}}</span><span class="k">else</span><span class="s2">&quot;DirectionalLight&quot;</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">||</span><span class="s2">&quot;PointLight&quot;</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">||</span><span class="s2">&quot;AmbientLight&quot;</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="p">(</span><span class="nx">z</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">color</span><span class="o">?</span><span class="nx">s</span><span class="p">.</span><span class="nx">color</span><span class="o">:</span><span class="mi">16777215</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">intensity</span><span class="o">?</span><span class="nx">s</span><span class="p">.</span><span class="nx">intensity</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="s2">&quot;DirectionalLight&quot;</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">direction</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span><span class="nx">C</span><span class="p">),</span><span class="nx">v</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">h</span><span class="p">),</span><span class="nx">s</span><span class="p">.</span><span class="nx">target</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">K</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">object</span><span class="o">:</span><span class="nx">v</span><span class="p">,</span><span class="nx">targetName</span><span class="o">:</span><span class="nx">s</span><span class="p">.</span><span class="nx">target</span><span class="p">}),</span><span class="nx">v</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="kc">null</span><span class="p">))</span><span class="o">:</span><span class="s2">&quot;PointLight&quot;</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">distance</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L240" class="blob-num js-line-number" data-line-number="240"></td>
        <td id="LC240" class="blob-code js-file-line"><span class="nx">C</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">v</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">h</span><span class="p">))</span><span class="o">:</span><span class="s2">&quot;AmbientLight&quot;</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="p">(</span><span class="nx">z</span><span class="p">)),</span><span class="nx">a</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">v</span><span class="p">),</span><span class="nx">v</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">lights</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">v</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">v</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;PerspectiveCamera&quot;</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">||</span><span class="s2">&quot;OrthographicCamera&quot;</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">rotation</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">,</span><span class="s2">&quot;PerspectiveCamera&quot;</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="nx">q</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">fov</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">aspect</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">far</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;OrthographicCamera&quot;</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">left</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">right</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">top</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">bottom</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">far</span><span class="p">)),</span><span class="nx">q</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">h</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">l</span><span class="o">?</span><span class="nx">q</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L241" class="blob-num js-line-number" data-line-number="241"></td>
        <td id="LC241" class="blob-code js-file-line"><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">q</span><span class="p">),</span><span class="nx">A</span><span class="p">.</span><span class="nx">cameras</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">rotation</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">scale</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">n</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">h</span><span class="p">),</span><span class="nx">l</span><span class="o">?</span><span class="nx">r</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="o">:</span><span class="nx">r</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="nx">r</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">j</span><span class="p">),</span><span class="nx">r</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">visible</span><span class="o">?</span><span class="nx">s</span><span class="p">.</span><span class="nx">visible</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">r</span><span class="p">),</span><span class="nx">A</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">empties</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">userData</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">F</span> <span class="k">in</span> <span class="nx">s</span><span class="p">.</span><span class="nx">userData</span><span class="p">)</span><span class="nx">r</span><span class="p">.</span><span class="nx">userData</span><span class="p">[</span><span class="nx">F</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">userData</span><span class="p">[</span><span class="nx">F</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">groups</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">.</span><span class="nx">groups</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">groups</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">A</span><span class="p">.</span><span class="nx">groups</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L242" class="blob-num js-line-number" data-line-number="242"></td>
        <td id="LC242" class="blob-code js-file-line"><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">groups</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="o">=</span><span class="p">[]),</span><span class="nx">A</span><span class="p">.</span><span class="nx">groups</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)}}</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">s</span><span class="p">.</span><span class="nx">children</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">children</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">face_materials</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">e</span><span class="p">();</span><span class="nx">F</span><span class="o">-=</span><span class="mi">1</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">onLoadComplete</span><span class="p">();</span><span class="nx">j</span><span class="p">()}}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">content</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">content</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">dae</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">scene</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">rotation</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">scale</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span><span class="nx">g</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">traverse</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">c</span><span class="p">});</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">visible</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">visible</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L243" class="blob-num js-line-number" data-line-number="243"></td>
        <td id="LC243" class="blob-code js-file-line"><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">traverse</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="nx">l</span><span class="p">});</span><span class="nx">b</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="p">();</span><span class="nx">F</span><span class="o">-=</span><span class="mi">1</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">onLoadComplete</span><span class="p">();</span><span class="nx">j</span><span class="p">()}}</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">face_materials</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(){</span><span class="nx">m</span><span class="p">.</span><span class="nx">callbackProgress</span><span class="p">({</span><span class="nx">totalModels</span><span class="o">:</span><span class="nx">I</span><span class="p">,</span><span class="nx">totalTextures</span><span class="o">:</span><span class="nx">G</span><span class="p">,</span><span class="nx">loadedModels</span><span class="o">:</span><span class="nx">I</span><span class="o">-</span><span class="nx">F</span><span class="p">,</span><span class="nx">loadedTextures</span><span class="o">:</span><span class="nx">G</span><span class="o">-</span><span class="nx">H</span><span class="p">},</span><span class="nx">A</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">onLoadProgress</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">===</span><span class="nx">F</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="nx">H</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">K</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">targetName</span><span class="p">];</span><span class="nx">d</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="nx">d</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">target</span><span class="p">));</span><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">userData</span><span class="p">.</span><span class="nx">targetInverse</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L244" class="blob-num js-line-number" data-line-number="244"></td>
        <td id="LC244" class="blob-code js-file-line"><span class="nx">c</span><span class="p">.</span><span class="nx">object</span><span class="p">}</span><span class="nx">b</span><span class="p">(</span><span class="nx">A</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">)</span><span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">b</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Loader</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">extractUrlBase</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">F</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">I</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">A</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="p">[],</span><span class="nx">B</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">J</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">J</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">geometryHandlers</span><span class="p">)</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometryHandlers</span><span class="p">[</span><span class="nx">J</span><span class="p">].</span><span class="nx">loaderClass</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">geometryHandlers</span><span class="p">[</span><span class="nx">J</span><span class="p">].</span><span class="nx">loaderObject</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">J</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">hierarchyHandlers</span><span class="p">)</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchyHandlers</span><span class="p">[</span><span class="nx">J</span><span class="p">].</span><span class="nx">loaderClass</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchyHandlers</span><span class="p">[</span><span class="nx">J</span><span class="p">].</span><span class="nx">loaderObject</span><span class="o">=</span><span class="k">new</span> <span class="nx">a</span><span class="p">;</span><span class="nx">H</span><span class="o">=</span><span class="nx">F</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">A</span><span class="o">=</span><span class="p">{</span><span class="nx">scene</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">,</span><span class="nx">geometries</span><span class="o">:</span><span class="p">{},</span><span class="nx">face_materials</span><span class="o">:</span><span class="p">{},</span><span class="nx">materials</span><span class="o">:</span><span class="p">{},</span><span class="nx">textures</span><span class="o">:</span><span class="p">{},</span></td>
      </tr>
      <tr>
        <td id="L245" class="blob-num js-line-number" data-line-number="245"></td>
        <td id="LC245" class="blob-code js-file-line"><span class="nx">objects</span><span class="o">:</span><span class="p">{},</span><span class="nx">cameras</span><span class="o">:</span><span class="p">{},</span><span class="nx">lights</span><span class="o">:</span><span class="p">{},</span><span class="nx">fogs</span><span class="o">:</span><span class="p">{},</span><span class="nx">empties</span><span class="o">:</span><span class="p">{},</span><span class="nx">groups</span><span class="o">:</span><span class="p">{}};</span><span class="k">if</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">transform</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">J</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">transform</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">transform</span><span class="p">.</span><span class="nx">rotation</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">transform</span><span class="p">.</span><span class="nx">scale</span><span class="p">,</span><span class="nx">J</span><span class="o">&amp;&amp;</span><span class="nx">A</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">J</span><span class="p">),</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">A</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">A</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">fromArray</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">J</span><span class="o">||</span><span class="nx">a</span><span class="o">||</span><span class="nx">c</span><span class="p">))</span><span class="nx">A</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">(),</span><span class="nx">A</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="nx">J</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">H</span><span class="o">-=</span><span class="nx">a</span><span class="p">;</span><span class="nx">j</span><span class="p">();</span><span class="nx">m</span><span class="p">.</span><span class="nx">onLoadComplete</span><span class="p">()}};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">N</span> <span class="k">in</span> <span class="nx">B</span><span class="p">.</span><span class="nx">fogs</span><span class="p">)</span><span class="nx">a</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">fogs</span><span class="p">[</span><span class="nx">N</span><span class="p">],</span><span class="s2">&quot;linear&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Fog</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">far</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;exp2&quot;</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">FogExp2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">density</span><span class="p">)),</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L246" class="blob-num js-line-number" data-line-number="246"></td>
        <td id="LC246" class="blob-code js-file-line"><span class="nx">r</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span><span class="nx">A</span><span class="p">.</span><span class="nx">fogs</span><span class="p">[</span><span class="nx">N</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">y</span> <span class="k">in</span> <span class="nx">B</span><span class="p">.</span><span class="nx">geometries</span><span class="p">)</span><span class="nx">r</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">y</span><span class="p">],</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">geometryHandlers</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">F</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="p">());</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">M</span> <span class="k">in</span> <span class="nx">B</span><span class="p">.</span><span class="nx">objects</span><span class="p">)</span><span class="nx">l</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">M</span><span class="p">],</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span> <span class="k">in</span> <span class="nx">m</span><span class="p">.</span><span class="nx">hierarchyHandlers</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">F</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="p">())});</span><span class="nx">I</span><span class="o">=</span><span class="nx">F</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">y</span> <span class="k">in</span> <span class="nx">B</span><span class="p">.</span><span class="nx">geometries</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">y</span><span class="p">],</span><span class="s2">&quot;cube&quot;</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">depth</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">widthSegments</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">heightSegments</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">depthSegments</span><span class="p">),</span><span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">y</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;plane&quot;</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PlaneGeometry</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L247" class="blob-num js-line-number" data-line-number="247"></td>
        <td id="LC247" class="blob-code js-file-line"><span class="nx">r</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">widthSegments</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">heightSegments</span><span class="p">),</span><span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">y</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;sphere&quot;</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">widthSegments</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">heightSegments</span><span class="p">),</span><span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">y</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;cylinder&quot;</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CylinderGeometry</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">topRad</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">botRad</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">radSegs</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">heightSegs</span><span class="p">),</span><span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">y</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;torus&quot;</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusGeometry</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">tube</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">segmentsR</span><span class="p">,</span><span class="nx">r</span><span class="p">.</span><span class="nx">segmentsT</span><span class="p">),</span><span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">y</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;icosahedron&quot;</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">IcosahedronGeometry</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L248" class="blob-num js-line-number" data-line-number="248"></td>
        <td id="LC248" class="blob-code js-file-line"><span class="nx">r</span><span class="p">.</span><span class="nx">subdivisions</span><span class="p">),</span><span class="nx">p</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">y</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">geometries</span><span class="p">[</span><span class="nx">y</span><span class="p">]</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">geometryHandlers</span><span class="p">){</span><span class="nx">M</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span> <span class="k">in</span> <span class="nx">r</span><span class="p">)</span><span class="s2">&quot;type&quot;</span><span class="o">!==</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="s2">&quot;url&quot;</span><span class="o">!==</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">M</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">s</span><span class="p">]);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometryHandlers</span><span class="p">[</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span><span class="p">].</span><span class="nx">loaderObject</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">d</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">urlBaseType</span><span class="p">),</span><span class="nx">h</span><span class="p">(</span><span class="nx">y</span><span class="p">),</span><span class="nx">M</span><span class="p">)}</span><span class="k">else</span><span class="s2">&quot;embedded&quot;</span><span class="o">===</span><span class="nx">r</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">M</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">embeds</span><span class="p">[</span><span class="nx">r</span><span class="p">.</span><span class="nx">id</span><span class="p">],</span><span class="nx">M</span><span class="p">.</span><span class="nx">metadata</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">metadata</span><span class="p">,</span><span class="nx">M</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">M</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometryHandlers</span><span class="p">.</span><span class="nx">ascii</span><span class="p">.</span><span class="nx">loaderObject</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">M</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">i</span><span class="p">(</span><span class="nx">y</span><span class="p">)(</span><span class="nx">M</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">M</span><span class="p">.</span><span class="nx">materials</span><span class="p">)));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">w</span> <span class="k">in</span> <span class="nx">B</span><span class="p">.</span><span class="nx">textures</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">textures</span><span class="p">[</span><span class="nx">w</span><span class="p">],</span><span class="nx">y</span><span class="p">.</span><span class="nx">url</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">){</span><span class="nx">H</span><span class="o">+=</span><span class="nx">y</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">y</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">)</span><span class="nx">m</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="p">()}</span><span class="k">else</span> <span class="nx">H</span><span class="o">+=</span></td>
      </tr>
      <tr>
        <td id="L249" class="blob-num js-line-number" data-line-number="249"></td>
        <td id="LC249" class="blob-code js-file-line"><span class="mi">1</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">onLoadStart</span><span class="p">();</span><span class="nx">G</span><span class="o">=</span><span class="nx">H</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">w</span> <span class="k">in</span> <span class="nx">B</span><span class="p">.</span><span class="nx">textures</span><span class="p">){</span><span class="nx">y</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">textures</span><span class="p">[</span><span class="nx">w</span><span class="p">];</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">y</span><span class="p">.</span><span class="nx">mapping</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">y</span><span class="p">.</span><span class="nx">mapping</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">mapping</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">[</span><span class="nx">y</span><span class="p">.</span><span class="nx">mapping</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">url</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">){</span><span class="nx">M</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">url</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">M</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">)</span><span class="nx">r</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">url</span><span class="p">[</span><span class="nx">s</span><span class="p">],</span><span class="nx">B</span><span class="p">.</span><span class="nx">urlBaseType</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="sr">/\.dds$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">loadCompressedTextureCube</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">y</span><span class="p">.</span><span class="nx">mapping</span><span class="p">,</span><span class="nx">J</span><span class="p">(</span><span class="nx">M</span><span class="p">))</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">loadTextureCube</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">y</span><span class="p">.</span><span class="nx">mapping</span><span class="p">,</span><span class="nx">J</span><span class="p">(</span><span class="nx">M</span><span class="p">))}</span><span class="k">else</span> <span class="nx">s</span><span class="o">=</span><span class="sr">/\.dds$/i</span><span class="p">.</span><span class="nx">test</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">url</span><span class="p">),</span><span class="nx">M</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">url</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">urlBaseType</span><span class="p">),</span><span class="nx">r</span><span class="o">=</span><span class="nx">J</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="nx">s</span><span class="o">=</span><span class="nx">s</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">loadCompressedTexture</span><span class="p">(</span><span class="nx">M</span><span class="p">,</span><span class="nx">y</span><span class="p">.</span><span class="nx">mapping</span><span class="p">,</span><span class="nx">r</span><span class="p">)</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">loadTexture</span><span class="p">(</span><span class="nx">M</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L250" class="blob-num js-line-number" data-line-number="250"></td>
        <td id="LC250" class="blob-code js-file-line"><span class="nx">y</span><span class="p">.</span><span class="nx">mapping</span><span class="p">,</span><span class="nx">r</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">y</span><span class="p">.</span><span class="nx">minFilter</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">=</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">y</span><span class="p">.</span><span class="nx">minFilter</span><span class="p">]),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">y</span><span class="p">.</span><span class="nx">magFilter</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">=</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">y</span><span class="p">.</span><span class="nx">magFilter</span><span class="p">]),</span><span class="nx">y</span><span class="p">.</span><span class="nx">anisotropy</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">anisotropy</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">anisotropy</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">repeat</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">repeat</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">y</span><span class="p">.</span><span class="nx">repeat</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span><span class="mi">1</span><span class="o">!==</span><span class="nx">y</span><span class="p">.</span><span class="nx">repeat</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">),</span><span class="mi">1</span><span class="o">!==</span><span class="nx">y</span><span class="p">.</span><span class="nx">repeat</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">)),</span><span class="nx">y</span><span class="p">.</span><span class="nx">offset</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">.</span><span class="nx">offset</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">offset</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">y</span><span class="p">.</span><span class="nx">offset</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span><span class="nx">y</span><span class="p">.</span><span class="nx">wrap</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">M</span><span class="o">=</span><span class="p">{</span><span class="nx">repeat</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">,</span><span class="nx">mirror</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MirroredRepeatWrapping</span><span class="p">},</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">M</span><span class="p">[</span><span class="nx">y</span><span class="p">.</span><span class="nx">wrap</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">y</span><span class="p">.</span><span class="nx">wrap</span><span class="p">[</span><span class="mi">0</span><span class="p">]]),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span></td>
      </tr>
      <tr>
        <td id="L251" class="blob-num js-line-number" data-line-number="251"></td>
        <td id="LC251" class="blob-code js-file-line"><span class="nx">M</span><span class="p">[</span><span class="nx">y</span><span class="p">.</span><span class="nx">wrap</span><span class="p">[</span><span class="mi">1</span><span class="p">]]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">=</span><span class="nx">M</span><span class="p">[</span><span class="nx">y</span><span class="p">.</span><span class="nx">wrap</span><span class="p">[</span><span class="mi">1</span><span class="p">]]));</span><span class="nx">A</span><span class="p">.</span><span class="nx">textures</span><span class="p">[</span><span class="nx">w</span><span class="p">]</span><span class="o">=</span><span class="nx">s</span><span class="p">}</span><span class="kd">var</span> <span class="nx">Z</span><span class="p">,</span><span class="nx">L</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">Z</span> <span class="k">in</span> <span class="nx">B</span><span class="p">.</span><span class="nx">materials</span><span class="p">){</span><span class="nx">w</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">Z</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">L</span> <span class="k">in</span> <span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">)</span><span class="s2">&quot;envMap&quot;</span><span class="o">===</span><span class="nx">L</span><span class="o">||</span><span class="s2">&quot;map&quot;</span><span class="o">===</span><span class="nx">L</span><span class="o">||</span><span class="s2">&quot;lightMap&quot;</span><span class="o">===</span><span class="nx">L</span><span class="o">||</span><span class="s2">&quot;bumpMap&quot;</span><span class="o">===</span><span class="nx">L</span><span class="o">?</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">textures</span><span class="p">[</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]]</span><span class="o">:</span><span class="s2">&quot;shading&quot;</span><span class="o">===</span><span class="nx">L</span><span class="o">?</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;flat&quot;</span><span class="o">===</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FlatShading</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="o">:</span><span class="s2">&quot;side&quot;</span><span class="o">===</span><span class="nx">L</span><span class="o">?</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;double&quot;</span><span class="o">==</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DoubleSide</span><span class="o">:</span><span class="s2">&quot;back&quot;</span><span class="o">==</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BackSide</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FrontSide</span><span class="o">:</span><span class="s2">&quot;blending&quot;</span><span class="o">===</span><span class="nx">L</span><span class="o">?</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="k">in</span> <span class="nx">THREE</span><span class="o">?</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]]</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L252" class="blob-num js-line-number" data-line-number="252"></td>
        <td id="LC252" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="o">:</span><span class="s2">&quot;combine&quot;</span><span class="o">===</span><span class="nx">L</span><span class="o">?</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="k">in</span> <span class="nx">THREE</span><span class="o">?</span><span class="nx">THREE</span><span class="p">[</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]]</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyOperation</span><span class="o">:</span><span class="s2">&quot;vertexColors&quot;</span><span class="o">===</span><span class="nx">L</span><span class="o">?</span><span class="s2">&quot;face&quot;</span><span class="o">==</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">?</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceColors</span><span class="o">:</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;wrapRGB&quot;</span><span class="o">===</span><span class="nx">L</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">J</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">],</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">[</span><span class="nx">L</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">J</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">J</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">J</span><span class="p">[</span><span class="mi">2</span><span class="p">]));</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">opacity</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">opacity</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">normalMap</span><span class="o">?</span><span class="p">(</span><span class="nx">J</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderLib</span><span class="p">.</span><span class="nx">normalmap</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">J</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L253" class="blob-num js-line-number" data-line-number="253"></td>
        <td id="LC253" class="blob-code js-file-line"><span class="nx">s</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">M</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">specular</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">ambient</span><span class="p">,</span><span class="nx">N</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">shininess</span><span class="p">,</span><span class="nx">y</span><span class="p">.</span><span class="nx">tNormal</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">textures</span><span class="p">[</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">normalMap</span><span class="p">],</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">normalScale</span><span class="o">&amp;&amp;</span><span class="nx">y</span><span class="p">.</span><span class="nx">uNormalScale</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">normalScale</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">normalScale</span><span class="p">[</span><span class="mi">1</span><span class="p">]),</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">map</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">tDiffuse</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">map</span><span class="p">,</span><span class="nx">y</span><span class="p">.</span><span class="nx">enableDiffuse</span><span class="p">.</span><span class="nx">value</span><span class="o">=!</span><span class="mi">0</span><span class="p">),</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">envMap</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">tCube</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">envMap</span><span class="p">,</span><span class="nx">y</span><span class="p">.</span><span class="nx">enableReflection</span><span class="p">.</span><span class="nx">value</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="p">.</span><span class="nx">uReflectivity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">reflectivity</span><span class="p">),</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">tAO</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L254" class="blob-num js-line-number" data-line-number="254"></td>
        <td id="LC254" class="blob-code js-file-line"><span class="nx">y</span><span class="p">.</span><span class="nx">enableAO</span><span class="p">.</span><span class="nx">value</span><span class="o">=!</span><span class="mi">0</span><span class="p">),</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">specularMap</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">tSpecular</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">textures</span><span class="p">[</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">specularMap</span><span class="p">],</span><span class="nx">y</span><span class="p">.</span><span class="nx">enableSpecular</span><span class="p">.</span><span class="nx">value</span><span class="o">=!</span><span class="mi">0</span><span class="p">),</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">displacementMap</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">tDisplacement</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">textures</span><span class="p">[</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">displacementMap</span><span class="p">],</span><span class="nx">y</span><span class="p">.</span><span class="nx">enableDisplacement</span><span class="p">.</span><span class="nx">value</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="p">.</span><span class="nx">uDisplacementBias</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">displacementBias</span><span class="p">,</span><span class="nx">y</span><span class="p">.</span><span class="nx">uDisplacementScale</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">displacementScale</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">uDiffuseColor</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">s</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">uSpecularColor</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">M</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">uAmbientColor</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">r</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">uShininess</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">N</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">opacity</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L255" class="blob-num js-line-number" data-line-number="255"></td>
        <td id="LC255" class="blob-code js-file-line"><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">uOpacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">opacity</span><span class="p">),</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">J</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">J</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">y</span><span class="p">,</span><span class="nx">lights</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">fog</span><span class="o">:!</span><span class="mi">0</span><span class="p">}))</span><span class="o">:</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">[</span><span class="nx">w</span><span class="p">.</span><span class="nx">type</span><span class="p">](</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">);</span><span class="nx">t</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">Z</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">Z</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="nx">Z</span> <span class="k">in</span> <span class="nx">B</span><span class="p">.</span><span class="nx">materials</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">Z</span><span class="p">],</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">materials</span><span class="p">){</span><span class="nx">L</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">materials</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">)</span><span class="nx">L</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">w</span><span class="p">.</span><span class="nx">parameters</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">s</span><span class="p">]]);</span><span class="nx">A</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">Z</span><span class="p">].</span><span class="nx">materials</span><span class="o">=</span><span class="nx">L</span><span class="p">}</span><span class="nx">e</span><span class="p">();</span><span class="nx">A</span><span class="p">.</span><span class="nx">cameras</span><span class="o">&amp;&amp;</span><span class="nx">B</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">camera</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">currentCamera</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">cameras</span><span class="p">[</span><span class="nx">B</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">camera</span><span class="p">]);</span><span class="nx">A</span><span class="p">.</span><span class="nx">fogs</span><span class="o">&amp;&amp;</span><span class="nx">B</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">fog</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L256" class="blob-num js-line-number" data-line-number="256"></td>
        <td id="LC256" class="blob-code js-file-line"><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">scene</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">fogs</span><span class="p">[</span><span class="nx">B</span><span class="p">.</span><span class="nx">defaults</span><span class="p">.</span><span class="nx">fog</span><span class="p">]);</span><span class="nx">m</span><span class="p">.</span><span class="nx">callbackSync</span><span class="p">(</span><span class="nx">A</span><span class="p">);</span><span class="nx">j</span><span class="p">()}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextureLoader</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">manager</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DefaultLoadingManager</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextureLoader</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextureLoader</span><span class="p">,</span><span class="nx">load</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageLoader</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">manager</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">setCrossOrigin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">)})},</span><span class="nx">setCrossOrigin</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="nx">a</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MaterialIdCount</span><span class="o">++</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">uuid</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">generateUUID</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">side</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FrontSide</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">opacity</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">blending</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">blendSrc</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcAlphaFactor</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">blendDst</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusSrcAlphaFactor</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">blendEquation</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AddEquation</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">depthWrite</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">depthTest</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">overdraw</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">alphaTest</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">polygonOffsetUnits</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">polygonOffsetFactor</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">visible</span><span class="o">=!</span><span class="mi">0</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L257" class="blob-num js-line-number" data-line-number="257"></td>
        <td id="LC257" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">,</span><span class="nx">setValues</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">)</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;THREE.Material: &#39;&quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;&#39; parameter is undefined.&quot;</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">b</span> <span class="k">in</span> <span class="k">this</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">&amp;&amp;</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="s2">&quot;overdraw&quot;</span><span class="o">==</span><span class="nx">b</span><span class="o">?</span><span class="nb">Number</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">}}},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">side</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">side</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">opacity</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">opacity</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">transparent</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L258" class="blob-num js-line-number" data-line-number="258"></td>
        <td id="LC258" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">blending</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">blending</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendSrc</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">blendSrc</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendDst</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">blendDst</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">blendEquation</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthTest</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">depthTest</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthWrite</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">depthWrite</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">polygonOffsetFactor</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">polygonOffsetFactor</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">polygonOffsetUnits</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">polygonOffsetUnits</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">alphaTest</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">alphaTest</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">overdraw</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">overdraw</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">visible</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">dispose</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;dispose&quot;</span><span class="p">})}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L259" class="blob-num js-line-number" data-line-number="259"></td>
        <td id="LC259" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MaterialIdCount</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">linewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">linejoin</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">linecap</span><span class="o">=</span><span class="s2">&quot;round&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setValues</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L260" class="blob-num js-line-number" data-line-number="260"></td>
        <td id="LC260" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">linewidth</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">linewidth</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">linecap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">linecap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">linejoin</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">linejoin</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineDashedMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">linewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">dashSize</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">gapSize</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setValues</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineDashedMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L261" class="blob-num js-line-number" data-line-number="261"></td>
        <td id="LC261" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineDashedMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineDashedMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">linewidth</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">linewidth</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">scale</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">dashSize</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">dashSize</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">gapSize</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">gapSize</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">envMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">specularMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">combine</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyOperation</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">=</span><span class="mf">0.98</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">=</span><span class="s2">&quot;round&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoColors</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">skinning</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setValues</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L262" class="blob-num js-line-number" data-line-number="262"></td>
        <td id="LC262" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L263" class="blob-num js-line-number" data-line-number="263"></td>
        <td id="LC263" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">specularMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">specularMap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">envMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">envMap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">combine</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">combine</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">reflectivity</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L264" class="blob-num js-line-number" data-line-number="264"></td>
        <td id="LC264" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">skinning</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">ambient</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">emissive</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">envMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">specularMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">combine</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyOperation</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">=</span><span class="mf">0.98</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L265" class="blob-num js-line-number" data-line-number="265"></td>
        <td id="LC265" class="blob-code js-file-line"><span class="s2">&quot;round&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoColors</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">skinning</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setValues</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L266" class="blob-num js-line-number" data-line-number="266"></td>
        <td id="LC266" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">ambient</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ambient</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">emissive</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">emissive</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapAround</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">specularMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">specularMap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">envMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">envMap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">combine</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">combine</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">reflectivity</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L267" class="blob-num js-line-number" data-line-number="267"></td>
        <td id="LC267" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">skinning</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">ambient</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">emissive</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">specular</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">1118481</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">shininess</span><span class="o">=</span><span class="mi">30</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">metal</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">perPixel</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">bumpMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">bumpScale</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normalMap</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normalScale</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">envMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">specularMap</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">combine</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyOperation</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L268" class="blob-num js-line-number" data-line-number="268"></td>
        <td id="LC268" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">=</span><span class="mf">0.98</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">=</span><span class="s2">&quot;round&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoColors</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">skinning</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setValues</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L269" class="blob-num js-line-number" data-line-number="269"></td>
        <td id="LC269" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">ambient</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">ambient</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">emissive</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">emissive</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">specular</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">specular</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">shininess</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shininess</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">metal</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">metal</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">perPixel</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">perPixel</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapAround</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">bumpMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bumpMap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">bumpScale</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bumpScale</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">normalMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">normalMap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">normalScale</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normalScale</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L270" class="blob-num js-line-number" data-line-number="270"></td>
        <td id="LC270" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">specularMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">specularMap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">envMap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">envMap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">combine</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">combine</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">reflectivity</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">reflectivity</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">skinning</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setValues</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FlatShading</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setValues</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">materials</span><span class="o">=</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="p">[]};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">materials</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">))};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setValues</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L271" class="blob-num js-line-number" data-line-number="271"></td>
        <td id="LC271" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleCanvasMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">program</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">setValues</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleCanvasMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleCanvasMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleCanvasMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">program</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">program</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexShader</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="o">=</span><span class="s2">&quot;void main() {}&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">uniforms</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">defines</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">linewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">lights</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoColors</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">skinning</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setValues</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L272" class="blob-num js-line-number" data-line-number="272"></td>
        <td id="LC272" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexShader</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">uniforms</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">attributes</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">defines</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">defines</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shading</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframe</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">lights</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lights</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">skinning</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L273" class="blob-num js-line-number" data-line-number="273"></td>
        <td id="LC273" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">depthTest</span><span class="o">=!</span><span class="k">this</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="o">=!</span><span class="k">this</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">scaleByViewport</span><span class="o">=!</span><span class="k">this</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">alignment</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">center</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">uvOffset</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">uvScale</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setValues</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{};</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthTest</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">depthTest</span><span class="o">=!</span><span class="k">this</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L274" class="blob-num js-line-number" data-line-number="274"></td>
        <td id="LC274" class="blob-code js-file-line"><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="o">=!</span><span class="k">this</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">scaleByViewport</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">scaleByViewport</span><span class="o">=!</span><span class="k">this</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L275" class="blob-num js-line-number" data-line-number="275"></td>
        <td id="LC275" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteMaterial</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteMaterial</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Material</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">map</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">scaleByViewport</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">scaleByViewport</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">alignment</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">alignment</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvOffset</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">uvOffset</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvScale</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">uvScale</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="o">=</span><span class="p">{};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">topLeft</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L276" class="blob-num js-line-number" data-line-number="276"></td>
        <td id="LC276" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">topCenter</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">topRight</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">centerLeft</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">center</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">centerRight</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">bottomLeft</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">bottomCenter</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteAlignment</span><span class="p">.</span><span class="nx">bottomRight</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextureIdCount</span><span class="o">++</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">uuid</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">generateUUID</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">image</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">mipmaps</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">mapping</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UVMapping</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ClampToEdgeWrapping</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ClampToEdgeWrapping</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearMipMapLinearFilter</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">anisotropy</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">i</span><span class="o">?</span><span class="nx">i</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">h</span><span class="o">?</span><span class="nx">h</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBAFormat</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">g</span><span class="o">?</span><span class="nx">g</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedByteType</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L277" class="blob-num js-line-number" data-line-number="277"></td>
        <td id="LC277" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">offset</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">repeat</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">premultiplyAlpha</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">flipY</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">unpackAlignment</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">onUpdate</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L278" class="blob-num js-line-number" data-line-number="278"></td>
        <td id="LC278" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">,</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">image</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">image</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">mipmaps</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">mipmaps</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">mapping</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">mapping</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapS</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapT</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">magFilter</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">minFilter</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">anisotropy</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">anisotropy</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">format</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">offset</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">repeat</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">premultiplyAlpha</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">premultiplyAlpha</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">flipY</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">flipY</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">unpackAlignment</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L279" class="blob-num js-line-number" data-line-number="279"></td>
        <td id="LC279" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">unpackAlignment</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">dispose</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;dispose&quot;</span><span class="p">})}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextureIdCount</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CompressedTexture</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">image</span><span class="o">=</span><span class="p">{</span><span class="nx">width</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">height</span><span class="o">:</span><span class="nx">c</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">mipmaps</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CompressedTexture</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CompressedTexture</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CompressedTexture</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">image</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">width</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">height</span><span class="o">:</span><span class="nx">c</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Particle</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="p">));</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">16777215</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()});</span><span class="k">this</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sortParticles</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L280" class="blob-num js-line-number" data-line-number="280"></td>
        <td id="LC280" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">sortParticles</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sortParticles</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">16777215</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()});</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineStrip</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineStrip</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinePieces</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">));</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">16777215</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random</span><span class="p">()});</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMorphTargets</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L281" class="blob-num js-line-number" data-line-number="281"></td>
        <td id="LC281" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateMorphTargets</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetBase</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetForcedOrder</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetDictionary</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetDictionary</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">}};</span></td>
      </tr>
      <tr>
        <td id="L282" class="blob-num js-line-number" data-line-number="282"></td>
        <td id="LC282" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getMorphTargetIndexByName</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetDictionary</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">morphTargetDictionary</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.Mesh.getMorphTargetIndexByName: morph target &quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot; does not exist. Returning 0.&quot;</span><span class="p">);</span><span class="k">return</span> <span class="mi">0</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="p">));</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">skin</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">|=</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">());</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="p">)</span><span class="nx">a</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">update</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">useVertexTexture</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">identityMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">boneMatrices</span><span class="o">=</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">bones</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">bones</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">pos</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">rotq</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">scl</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">addBone</span><span class="p">(),</span><span class="nx">b</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span><span class="nx">b</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="p">]),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L283" class="blob-num js-line-number" data-line-number="283"></td>
        <td id="LC283" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">bones</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">parent</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">parent</span><span class="p">].</span><span class="nx">add</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">useVertexTexture</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">boneTextureHeight</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">boneTextureWidth</span><span class="o">=</span><span class="nx">a</span><span class="o">=</span><span class="mi">256</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">?</span><span class="mi">64</span><span class="o">:</span><span class="mi">64</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">?</span><span class="mi">32</span><span class="o">:</span><span class="mi">16</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">?</span><span class="mi">16</span><span class="o">:</span><span class="mi">8</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">boneMatrices</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">boneTextureWidth</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">boneTextureHeight</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">boneTexture</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">boneMatrices</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">boneTextureWidth</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">boneTextureHeight</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBAFormat</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FloatType</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">boneTexture</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestFilter</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">boneTexture</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L284" class="blob-num js-line-number" data-line-number="284"></td>
        <td id="LC284" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestFilter</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">boneTexture</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">boneTexture</span><span class="p">.</span><span class="nx">flipY</span><span class="o">=!</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">boneMatrices</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="o">*</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">pose</span><span class="p">()}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addBone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">(</span><span class="k">this</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L285" class="blob-num js-line-number" data-line-number="285"></td>
        <td id="LC285" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">||</span><span class="nx">b</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">identityMatrix</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">boneInverses</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">boneInverses</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L286" class="blob-num js-line-number" data-line-number="286"></td>
        <td id="LC286" class="blob-code js-file-line"><span class="p">[];</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">skinMatrix</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">boneInverses</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">)}</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">bones</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">skinMatrix</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">boneInverses</span><span class="p">[</span><span class="nx">b</span><span class="p">]),</span><span class="nx">a</span><span class="p">.</span><span class="nx">flattenToArrayOffset</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">boneMatrices</span><span class="p">,</span><span class="mi">16</span><span class="o">*</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">useVertexTexture</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">boneTexture</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">)}}();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pose</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">normalizeSkinWeights</span><span class="p">()};</span></td>
      </tr>
      <tr>
        <td id="L287" class="blob-num js-line-number" data-line-number="287"></td>
        <td id="LC287" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">normalizeSkinWeights</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">b</span><span class="p">.</span><span class="nx">lengthManhattan</span><span class="p">();</span><span class="kc">Infinity</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">useVertexTexture</span><span class="p">));</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="o">=</span><span class="mi">1</span><span class="nx">E3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">mirroredLoop</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lastKeyframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setFrameRange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setFrameRange</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">startKeyframe</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">endKeyframe</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">endKeyframe</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">startKeyframe</span><span class="o">+</span><span class="mi">1</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L288" class="blob-num js-line-number" data-line-number="288"></td>
        <td id="LC288" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setDirectionForward</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setDirectionBackward</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=!</span><span class="mi">0</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L289" class="blob-num js-line-number" data-line-number="289"></td>
        <td id="LC289" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">parseAnimations</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">animations</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">animations</span><span class="o">=</span><span class="p">{});</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">animations</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="sr">/([a-z]+)(\d+)/</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">name</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="kc">Infinity</span><span class="p">,</span><span class="nx">end</span><span class="o">:-</span><span class="kc">Infinity</span><span class="p">});</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">start</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">start</span><span class="o">=</span><span class="nx">e</span><span class="p">);</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">end</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">end</span><span class="o">=</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">h</span><span class="p">)}}</span><span class="nx">a</span><span class="p">.</span><span class="nx">firstAnimation</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L290" class="blob-num js-line-number" data-line-number="290"></td>
        <td id="LC290" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationLabel</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">animations</span><span class="o">||</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">animations</span><span class="o">=</span><span class="p">{});</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">animations</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">end</span><span class="o">:</span><span class="nx">c</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">playAnimation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">animations</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">c</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">setFrameRange</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">end</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="o">=</span><span class="mi">1</span><span class="nx">E3</span><span class="o">*</span><span class="p">((</span><span class="nx">c</span><span class="p">.</span><span class="nx">end</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">start</span><span class="p">)</span><span class="o">/</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;animation[&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;] undefined&quot;</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L291" class="blob-num js-line-number" data-line-number="291"></td>
        <td id="LC291" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateAnimation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">mirroredLoop</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="o">||</span><span class="mi">0</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="o">*=-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=!</span><span class="mi">0</span><span class="p">),</span><span class="mi">0</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=!</span><span class="mi">1</span><span class="p">)}</span><span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">%=</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="p">,</span><span class="mi">0</span><span class="o">&gt;</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">startKeyframe</span><span class="o">+</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">clamp</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">/</span><span class="nx">b</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L292" class="blob-num js-line-number" data-line-number="292"></td>
        <td id="LC292" class="blob-code js-file-line"><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">lastKeyframe</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">lastKeyframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="o">=</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="o">%</span><span class="nx">b</span><span class="o">/</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">lastKeyframe</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">b</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L293" class="blob-num js-line-number" data-line-number="293"></td>
        <td id="LC293" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphAnimMesh</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">duration</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">duration</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">mirroredLoop</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">mirroredLoop</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">time</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">lastKeyframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lastKeyframe</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentKeyframe</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">direction</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="p">));</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="o">=</span><span class="p">[]};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addLevel</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">b</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">distance</span><span class="p">);</span><span class="nx">c</span><span class="o">++</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,{</span><span class="nx">distance</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="nx">a</span><span class="p">});</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getObjectForDistance</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">distance</span><span class="p">);</span><span class="nx">b</span><span class="o">++</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">object</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L294" class="blob-num js-line-number" data-line-number="294"></td>
        <td id="LC294" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">object</span><span class="p">.</span><span class="nx">visible</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">&gt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">distance</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">object</span><span class="p">.</span><span class="nx">visible</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">object</span><span class="p">.</span><span class="nx">visible</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">else</span> <span class="k">break</span><span class="p">;</span><span class="k">for</span><span class="p">(;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">objects</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">object</span><span class="p">.</span><span class="nx">visible</span><span class="o">=!</span><span class="mi">1</span><span class="p">}}}();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LOD</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpriteMaterial</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation3d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="mi">0</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation3d</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation3d</span><span class="p">.</span><span class="nx">order</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">setFromEuler</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation3d</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L295" class="blob-num js-line-number" data-line-number="295"></td>
        <td id="LC295" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="p">));</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">overrideMaterial</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">autoUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">__objects</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">__lights</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="o">=</span><span class="p">[]};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L296" class="blob-num js-line-number" data-line-number="296"></td>
        <td id="LC296" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__addObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">__lights</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">__lights</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">parent</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="p">)</span><span class="o">&amp;&amp;-</span><span class="mi">1</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">__objects</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">)){</span><span class="k">this</span><span class="p">.</span><span class="nx">__objects</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">__addObject</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">])};</span></td>
      </tr>
      <tr>
        <td id="L297" class="blob-num js-line-number" data-line-number="297"></td>
        <td id="LC297" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">__removeObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Light</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__lights</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">__lights</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="k">else</span> <span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__objects</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">__objects</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">)));</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">__removeObject</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">])};</span></td>
      </tr>
      <tr>
        <td id="L298" class="blob-num js-line-number" data-line-number="298"></td>
        <td id="LC298" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Scene</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="kc">null</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fog</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span><span class="kc">null</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">overrideMaterial</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">overrideMaterial</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">overrideMaterial</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span><span class="nx">a</span><span class="p">.</span><span class="nx">autoUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">autoUpdate</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Fog</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">1</span><span class="nx">E3</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Fog</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Fog</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">getHex</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FogExp2</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="o">=</span><span class="s2">&quot;&quot;</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">density</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mf">2.5</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FogExp2</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">clone</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">FogExp2</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">getHex</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">density</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CanvasRenderer</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">I</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">I</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="nx">Xb</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">).</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="mi">0</span><span class="o">&gt;=</span><span class="nx">g</span><span class="o">||</span><span class="p">(</span><span class="nx">g</span><span class="o">*=</span><span class="nx">f</span><span class="p">.</span><span class="nx">intensity</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">Xb</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">g</span><span class="p">)))}</span><span class="k">else</span> <span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">a</span><span class="p">).</span><span class="nx">normalize</span><span class="p">()),</span><span class="mi">0</span><span class="o">&gt;=</span><span class="nx">g</span><span class="o">||</span><span class="p">(</span><span class="nx">g</span><span class="o">*=</span><span class="mi">0</span><span class="o">==</span><span class="nx">f</span><span class="p">.</span><span class="nx">distance</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">1</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">/</span><span class="nx">f</span><span class="p">.</span><span class="nx">distance</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="mi">0</span><span class="o">!=</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">*=</span><span class="nx">f</span><span class="p">.</span><span class="nx">intensity</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">Xb</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">g</span><span class="p">)))))}}</span></td>
      </tr>
      <tr>
        <td id="L299" class="blob-num js-line-number" data-line-number="299"></td>
        <td id="LC299" class="blob-code js-file-line"><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">q</span><span class="p">){</span><span class="nx">C</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="nx">C</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">++</span><span class="p">;</span><span class="nx">m</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">opacity</span><span class="p">);</span><span class="nx">n</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">blending</span><span class="p">);</span><span class="nx">ya</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">Ha</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">fa</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">da</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">T</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">aa</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">d</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">);(</span><span class="nx">q</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">||</span><span class="nx">q</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">===</span><span class="nx">q</span><span class="p">.</span><span class="nx">map</span><span class="o">?</span><span class="p">(</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">color</span><span class="p">),</span><span class="nx">Xa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">emissive</span><span class="p">),</span><span class="nx">q</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceColors</span><span class="o">&amp;&amp;</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">color</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">q</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">.</span><span class="nx">shading</span><span class="o">==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="o">&amp;&amp;</span><span class="mi">3</span><span class="o">==</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsLength</span><span class="o">?</span></td>
      </tr>
      <tr>
        <td id="L300" class="blob-num js-line-number" data-line-number="300"></td>
        <td id="LC300" class="blob-code js-file-line"><span class="p">(</span><span class="nx">ra</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ib</span><span class="p">),</span><span class="nx">ja</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ib</span><span class="p">),</span><span class="nx">ua</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ib</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModel</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">ra</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModel</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">ja</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModel</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">ua</span><span class="p">),</span><span class="nx">ra</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">Qa</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">Xa</span><span class="p">),</span><span class="nx">ja</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">Qa</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">Xa</span><span class="p">),</span><span class="nx">ua</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">Qa</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">Xa</span><span class="p">),</span><span class="nx">Ra</span><span class="p">.</span><span class="nx">addColors</span><span class="p">(</span><span class="nx">ja</span><span class="p">,</span><span class="nx">ua</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span><span class="nx">lb</span><span class="o">=</span><span class="nx">j</span><span class="p">(</span><span class="nx">ra</span><span class="p">,</span><span class="nx">ja</span><span class="p">,</span><span class="nx">ua</span><span class="p">,</span><span class="nx">Ra</span><span class="p">),</span><span class="nx">i</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">lb</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">ia</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ib</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">centroidModel</span><span class="p">,</span><span class="nx">U</span><span class="p">.</span><span class="nx">normalModel</span><span class="p">,</span><span class="nx">ia</span><span class="p">),</span><span class="nx">ia</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">Qa</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">Xa</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">q</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">f</span><span class="p">(</span><span class="nx">ia</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L301" class="blob-num js-line-number" data-line-number="301"></td>
        <td id="LC301" class="blob-code js-file-line"><span class="nx">h</span><span class="p">(</span><span class="nx">ia</span><span class="p">)))</span><span class="o">:</span><span class="nx">q</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="o">||</span><span class="nx">q</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">||</span><span class="nx">q</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="o">?</span><span class="kc">null</span><span class="o">!==</span><span class="nx">q</span><span class="p">.</span><span class="nx">map</span><span class="o">?</span><span class="nx">q</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">mapping</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">UVMapping</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Ga</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">uvs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">g</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">p</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">p</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">r</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ga</span><span class="p">[</span><span class="nx">r</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">map</span><span class="p">))</span><span class="o">:</span><span class="kc">null</span><span class="o">!==</span><span class="nx">q</span><span class="p">.</span><span class="nx">envMap</span><span class="o">?</span><span class="nx">q</span><span class="p">.</span><span class="nx">envMap</span><span class="p">.</span><span class="nx">mapping</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SphericalReflectionMapping</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModelView</span><span class="p">[</span><span class="nx">l</span><span class="p">]),</span><span class="nx">Ca</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">yb</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModelView</span><span class="p">[</span><span class="nx">p</span><span class="p">]),</span><span class="nx">Ib</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModelView</span><span class="p">[</span><span class="nx">r</span><span class="p">]),</span></td>
      </tr>
      <tr>
        <td id="L302" class="blob-num js-line-number" data-line-number="302"></td>
        <td id="LC302" class="blob-code js-file-line"><span class="nx">Rb</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">Yb</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">Wa</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">g</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="nx">Ca</span><span class="p">,</span><span class="nx">yb</span><span class="p">,</span><span class="nx">Ib</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">Rb</span><span class="p">,</span><span class="nx">Yb</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">envMap</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">ia</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">color</span><span class="p">),</span><span class="nx">q</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceColors</span><span class="o">&amp;&amp;</span><span class="nx">ia</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">color</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">q</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">f</span><span class="p">(</span><span class="nx">ia</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">h</span><span class="p">(</span><span class="nx">ia</span><span class="p">))</span><span class="o">:</span><span class="nx">q</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="o">?</span><span class="p">(</span><span class="nx">Sa</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">xb</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">far</span><span class="p">,</span><span class="nx">ra</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">ra</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">ra</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">z</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Sa</span><span class="p">,</span><span class="nx">xb</span><span class="p">),</span><span class="nx">ja</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">ja</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">ja</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">z</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Sa</span><span class="p">,</span><span class="nx">xb</span><span class="p">),</span><span class="nx">ua</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">ua</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">ua</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">z</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">e</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Sa</span><span class="p">,</span><span class="nx">xb</span><span class="p">),</span><span class="nx">Ra</span><span class="p">.</span><span class="nx">addColors</span><span class="p">(</span><span class="nx">ja</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L303" class="blob-num js-line-number" data-line-number="303"></td>
        <td id="LC303" class="blob-code js-file-line"><span class="nx">ua</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span><span class="nx">lb</span><span class="o">=</span><span class="nx">j</span><span class="p">(</span><span class="nx">ra</span><span class="p">,</span><span class="nx">ja</span><span class="p">,</span><span class="nx">ua</span><span class="p">,</span><span class="nx">Ra</span><span class="p">),</span><span class="nx">i</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">lb</span><span class="p">))</span><span class="o">:</span><span class="nx">q</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">shading</span><span class="o">==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FlatShading</span><span class="o">?</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">normalModelView</span><span class="p">,</span><span class="nx">ia</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">).</span><span class="nx">addScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">q</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">f</span><span class="p">(</span><span class="nx">ia</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">h</span><span class="p">(</span><span class="nx">ia</span><span class="p">))</span><span class="o">:</span><span class="nx">q</span><span class="p">.</span><span class="nx">shading</span><span class="o">==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModelView</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">ra</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">).</span><span class="nx">addScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModelView</span><span class="p">[</span><span class="nx">p</span><span class="p">],</span><span class="nx">ja</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">).</span><span class="nx">addScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L304" class="blob-num js-line-number" data-line-number="304"></td>
        <td id="LC304" class="blob-code js-file-line"><span class="nx">a</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModelView</span><span class="p">[</span><span class="nx">r</span><span class="p">],</span><span class="nx">ua</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">).</span><span class="nx">addScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span><span class="nx">Ra</span><span class="p">.</span><span class="nx">addColors</span><span class="p">(</span><span class="nx">ja</span><span class="p">,</span><span class="nx">ua</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span><span class="nx">lb</span><span class="o">=</span><span class="nx">j</span><span class="p">(</span><span class="nx">ra</span><span class="p">,</span><span class="nx">ja</span><span class="p">,</span><span class="nx">ua</span><span class="p">,</span><span class="nx">Ra</span><span class="p">),</span><span class="nx">i</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">lb</span><span class="p">)))}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">y</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">y</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">closePath</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="nx">y</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">();</span><span class="nx">y</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">closePath</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">p</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">t</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">q</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getStyle</span><span class="p">());</span><span class="nx">y</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span><span class="nx">va</span><span class="p">.</span><span class="nx">expandByScalar</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">b</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">s</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getStyle</span><span class="p">());</span></td>
      </tr>
      <tr>
        <td id="L305" class="blob-num js-line-number" data-line-number="305"></td>
        <td id="LC305" class="blob-code js-file-line"><span class="nx">y</span><span class="p">.</span><span class="nx">fill</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">n</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">n</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">image</span><span class="o">||</span><span class="mi">0</span><span class="o">==</span><span class="nx">n</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="p">)){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">n</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">;</span><span class="nx">Jb</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">createPattern</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">image</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">p</span><span class="o">&amp;&amp;!</span><span class="mi">0</span><span class="o">===</span><span class="nx">q</span><span class="o">?</span><span class="s2">&quot;repeat&quot;</span><span class="o">:!</span><span class="mi">0</span><span class="o">===</span><span class="nx">p</span><span class="o">&amp;&amp;!</span><span class="mi">1</span><span class="o">===</span><span class="nx">q</span><span class="o">?</span><span class="s2">&quot;repeat-x&quot;</span><span class="o">:!</span><span class="mi">1</span><span class="o">===</span><span class="nx">p</span><span class="o">&amp;&amp;!</span><span class="mi">0</span><span class="o">===</span><span class="nx">q</span><span class="o">?</span><span class="s2">&quot;repeat-y&quot;</span><span class="o">:</span><span class="s2">&quot;no-repeat&quot;</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">}</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">Jb</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span><span class="o">?</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;rgba(0,0,0,1)&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">s</span><span class="p">(</span><span class="nx">Jb</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">id</span><span class="p">]);</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">offset</span><span class="p">.</span><span class="nx">x</span><span class="o">/</span><span class="nx">n</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">offset</span><span class="p">.</span><span class="nx">y</span><span class="o">/</span><span class="nx">n</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="o">*</span><span class="nx">n</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">height</span><span class="o">*</span><span class="nx">n</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L306" class="blob-num js-line-number" data-line-number="306"></td>
        <td id="LC306" class="blob-code js-file-line"><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="nx">g</span><span class="o">+</span><span class="nx">p</span><span class="p">)</span><span class="o">*</span><span class="nx">r</span><span class="p">,</span><span class="nx">k</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">k</span><span class="o">+</span><span class="nx">q</span><span class="p">)</span><span class="o">*</span><span class="nx">t</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">-</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="o">-</span><span class="nx">b</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="nx">i</span><span class="o">+</span><span class="nx">p</span><span class="p">)</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">j</span><span class="o">+</span><span class="nx">q</span><span class="p">)</span><span class="o">*</span><span class="nx">t</span><span class="o">-</span><span class="nx">k</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="p">(</span><span class="nx">m</span><span class="o">+</span><span class="nx">p</span><span class="p">)</span><span class="o">*</span><span class="nx">r</span><span class="o">-</span><span class="nx">g</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">l</span><span class="o">+</span><span class="nx">q</span><span class="p">)</span><span class="o">*</span><span class="nx">t</span><span class="o">-</span><span class="nx">k</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">i</span><span class="o">*</span><span class="nx">l</span><span class="o">-</span><span class="nx">m</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="mi">0</span><span class="o">===</span><span class="nx">p</span><span class="o">?</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">Ab</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">image</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">Ab</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">id</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getImageData</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">height</span><span class="p">).</span><span class="nx">data</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="nx">Ab</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">id</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">k</span><span class="p">)</span><span class="o">*</span><span class="nx">n</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="p">),</span><span class="nx">ia</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="mi">255</span><span class="p">),</span><span class="nx">h</span><span class="p">(</span><span class="nx">ia</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">p</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">(</span><span class="nx">l</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">e</span><span class="p">)</span><span class="o">*</span><span class="nx">p</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="p">(</span><span class="nx">l</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">f</span><span class="p">)</span><span class="o">*</span><span class="nx">p</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">i</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">m</span><span class="o">*</span><span class="nx">c</span><span class="p">)</span><span class="o">*</span><span class="nx">p</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">i</span><span class="o">*</span><span class="nx">f</span><span class="o">-</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">p</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span></td>
      </tr>
      <tr>
        <td id="L307" class="blob-num js-line-number" data-line-number="307"></td>
        <td id="LC307" class="blob-code js-file-line"><span class="nx">n</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">k</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">g</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">k</span><span class="p">,</span><span class="nx">y</span><span class="p">.</span><span class="nx">save</span><span class="p">(),</span><span class="nx">y</span><span class="p">.</span><span class="nx">transform</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">fill</span><span class="p">(),</span><span class="nx">y</span><span class="p">.</span><span class="nx">restore</span><span class="p">())}}</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">l</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">width</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">height</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">h</span><span class="o">*=</span><span class="nx">n</span><span class="p">;</span><span class="nx">g</span><span class="o">*=</span><span class="nx">p</span><span class="p">;</span><span class="nx">c</span><span class="o">-=</span><span class="nx">a</span><span class="p">;</span><span class="nx">d</span><span class="o">-=</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="o">-=</span><span class="nx">a</span><span class="p">;</span><span class="nx">f</span><span class="o">-=</span><span class="nx">b</span><span class="p">;</span><span class="nx">k</span><span class="o">=</span><span class="nx">k</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">h</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span><span class="nx">g</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">n</span><span class="o">-</span><span class="nx">h</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">m</span><span class="o">*</span><span class="nx">p</span><span class="o">-</span><span class="nx">g</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="nx">k</span><span class="o">*</span><span class="nx">m</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">i</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="p">(</span><span class="nx">m</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="nx">i</span><span class="o">*</span><span class="nx">e</span><span class="p">)</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="o">-</span><span class="nx">i</span><span class="o">*</span><span class="nx">f</span><span class="p">)</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">k</span><span class="o">*</span><span class="nx">e</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">c</span><span class="p">)</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">k</span><span class="o">*</span><span class="nx">f</span><span class="o">-</span><span class="nx">j</span><span class="o">*</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">p</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span><span class="nx">n</span><span class="o">*</span><span class="nx">h</span><span class="o">-</span><span class="nx">c</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="nx">i</span><span class="o">*</span><span class="nx">h</span><span class="o">-</span><span class="nx">d</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="nx">y</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span><span class="nx">y</span><span class="p">.</span><span class="nx">transform</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">clip</span><span class="p">();</span><span class="nx">y</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">y</span><span class="p">.</span><span class="nx">restore</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">Ka</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">r</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ka</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">g</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ka</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ka</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">r</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ka</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">g</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ka</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">.</span><span class="nx">b</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ka</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L308" class="blob-num js-line-number" data-line-number="308"></td>
        <td id="LC308" class="blob-code js-file-line"><span class="nx">c</span><span class="p">.</span><span class="nx">r</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ka</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">g</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ka</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ka</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">r</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ka</span><span class="p">[</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">g</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ka</span><span class="p">[</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">Bb</span><span class="p">.</span><span class="nx">putImageData</span><span class="p">(</span><span class="nx">Kb</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">Lb</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">Gb</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="nx">Sb</span><span class="p">}</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">/=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">d</span><span class="o">*=</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="o">*=</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">+=</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">+=</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-=</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-=</span><span class="nx">e</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">m</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">Z</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Z</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">globalAlpha</span><span class="o">=</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">L</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="o">?</span><span class="nx">y</span><span class="p">.</span><span class="nx">globalCompositeOperation</span><span class="o">=</span><span class="s2">&quot;source-over&quot;</span><span class="o">:</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AdditiveBlending</span><span class="o">?</span><span class="nx">y</span><span class="p">.</span><span class="nx">globalCompositeOperation</span><span class="o">=</span><span class="s2">&quot;lighter&quot;</span><span class="o">:</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SubtractiveBlending</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">globalCompositeOperation</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L309" class="blob-num js-line-number" data-line-number="309"></td>
        <td id="LC309" class="blob-code js-file-line"><span class="s2">&quot;darker&quot;</span><span class="p">),</span><span class="nx">L</span><span class="o">=</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">Ua</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Ua</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">lineWidth</span><span class="o">=</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">O</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">O</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">lineCap</span><span class="o">=</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">ka</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">ka</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">lineJoin</span><span class="o">=</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">pa</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">pa</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">strokeStyle</span><span class="o">=</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">s</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">Pa</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Pa</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">v</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">Fa</span><span class="o">!==</span><span class="nx">a</span><span class="o">||</span><span class="nx">wa</span><span class="o">!==</span><span class="nx">b</span><span class="p">)</span><span class="nx">y</span><span class="p">.</span><span class="nx">setLineDash</span><span class="p">([</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">]),</span><span class="nx">Fa</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">wa</span><span class="o">=</span><span class="nx">b</span><span class="p">}</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.CanvasRenderer&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">REVISION</span><span class="p">);</span><span class="kd">var</span> <span class="nx">z</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">smoothstep</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{},</span><span class="nx">C</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">F</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">I</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Projector</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">canvas</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">canvas</span><span class="o">:</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">),</span><span class="nx">K</span><span class="p">,</span><span class="nx">B</span><span class="p">,</span><span class="nx">J</span><span class="p">,</span><span class="nx">N</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">),</span><span class="nx">M</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L310" class="blob-num js-line-number" data-line-number="310"></td>
        <td id="LC310" class="blob-code js-file-line"><span class="nx">w</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Z</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">L</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">pa</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">Pa</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">Ua</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">O</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">ka</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">Fa</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">wa</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">D</span><span class="p">,</span><span class="nx">V</span><span class="p">,</span><span class="nx">ea</span><span class="p">,</span><span class="nx">qa</span><span class="p">,</span><span class="nx">eb</span><span class="p">,</span><span class="nx">pb</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">,</span><span class="nx">ub</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">,</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="nx">na</span><span class="p">,</span><span class="nx">ha</span><span class="p">,</span><span class="nx">X</span><span class="p">,</span><span class="nx">xa</span><span class="p">,</span><span class="nx">ab</span><span class="p">,</span><span class="nx">la</span><span class="p">,</span><span class="nx">ia</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">ra</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">ja</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">ua</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">Ra</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">Qa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">Xa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">Xb</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">Jb</span><span class="o">=</span><span class="p">{},</span><span class="nx">Ab</span><span class="o">=</span><span class="p">{},</span><span class="nx">Sa</span><span class="p">,</span><span class="nx">xb</span><span class="p">,</span><span class="nx">lb</span><span class="p">,</span><span class="nx">Ga</span><span class="p">,</span><span class="nx">Ca</span><span class="p">,</span><span class="nx">yb</span><span class="p">,</span><span class="nx">Ib</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">Rb</span><span class="p">,</span><span class="nx">Yb</span><span class="p">,</span><span class="nx">fb</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Box2</span><span class="p">,</span><span class="nx">oa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Box2</span><span class="p">,</span><span class="nx">va</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Box2</span><span class="p">,</span><span class="nx">ib</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">Tb</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">Ub</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="nx">Wa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">Gb</span><span class="p">,</span><span class="nx">Bb</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L311" class="blob-num js-line-number" data-line-number="311"></td>
        <td id="LC311" class="blob-code js-file-line"><span class="nx">Kb</span><span class="p">,</span><span class="nx">Ka</span><span class="p">,</span><span class="nx">Sb</span><span class="p">,</span><span class="nx">Lb</span><span class="p">,</span><span class="nx">Hb</span><span class="o">=</span><span class="mi">16</span><span class="p">;</span><span class="nx">Gb</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="nx">Gb</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">Gb</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">Bb</span><span class="o">=</span><span class="nx">Gb</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span><span class="nx">Bb</span><span class="p">.</span><span class="nx">fillStyle</span><span class="o">=</span><span class="s2">&quot;rgba(0,0,0,1)&quot;</span><span class="p">;</span><span class="nx">Bb</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="nx">Kb</span><span class="o">=</span><span class="nx">Bb</span><span class="p">.</span><span class="nx">getImageData</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="nx">Ka</span><span class="o">=</span><span class="nx">Kb</span><span class="p">.</span><span class="nx">data</span><span class="p">;</span><span class="nx">Sb</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="nx">Sb</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">Sb</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">Hb</span><span class="p">;</span><span class="nx">Lb</span><span class="o">=</span><span class="nx">Sb</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span><span class="nx">Lb</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="o">-</span><span class="nx">Hb</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="nx">Hb</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="nx">Lb</span><span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">Hb</span><span class="p">,</span><span class="nx">Hb</span><span class="p">);</span><span class="nx">Hb</span><span class="o">--</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">y</span><span class="p">.</span><span class="nx">setLineDash</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">setLineDash</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">y</span><span class="p">.</span><span class="nx">mozDash</span><span class="o">?</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">y</span><span class="p">.</span><span class="nx">mozDash</span><span class="o">=</span><span class="kc">null</span><span class="o">!==</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="kc">null</span><span class="p">}</span><span class="o">:</span><span class="kd">function</span><span class="p">(){});</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">=</span><span class="nx">A</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L312" class="blob-num js-line-number" data-line-number="312"></td>
        <td id="LC312" class="blob-code js-file-line"><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nb">window</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="o">?</span><span class="nb">window</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">sortElements</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sortObjects</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClear</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">info</span><span class="o">=</span><span class="p">{</span><span class="nx">render</span><span class="o">:</span><span class="p">{</span><span class="nx">vertices</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">faces</span><span class="o">:</span><span class="mi">0</span><span class="p">}};</span><span class="k">this</span><span class="p">.</span><span class="nx">supportsVertexTextures</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">setFaceCulling</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="k">this</span><span class="p">.</span><span class="nx">setSize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">K</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="p">;</span><span class="nx">J</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">K</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="nx">N</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">B</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="nx">A</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">K</span><span class="p">;</span><span class="nx">A</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">B</span><span class="p">;</span><span class="mi">1</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="o">&amp;&amp;!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">);</span><span class="nx">fb</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="o">-</span><span class="nx">J</span><span class="p">,</span><span class="o">-</span><span class="nx">N</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">J</span><span class="p">,</span><span class="nx">N</span><span class="p">));</span><span class="nx">oa</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="o">-</span><span class="nx">J</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L313" class="blob-num js-line-number" data-line-number="313"></td>
        <td id="LC313" class="blob-code js-file-line"><span class="o">-</span><span class="nx">N</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">J</span><span class="p">,</span><span class="nx">N</span><span class="p">));</span><span class="nx">Z</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">L</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ka</span><span class="o">=</span><span class="nx">O</span><span class="o">=</span><span class="nx">Ua</span><span class="o">=</span><span class="nx">Pa</span><span class="o">=</span><span class="nx">pa</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">setClearColor</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">M</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">w</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="nx">oa</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="o">-</span><span class="nx">J</span><span class="p">,</span><span class="o">-</span><span class="nx">N</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">J</span><span class="p">,</span><span class="nx">N</span><span class="p">))};</span><span class="k">this</span><span class="p">.</span><span class="nx">setClearColorHex</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: .setClearColorHex() is being removed. Use .setClearColor() instead.&quot;</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setClearColor</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">getMaxAnisotropy</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="mi">0</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">clear</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">y</span><span class="p">.</span><span class="nx">setTransform</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">J</span><span class="p">,</span><span class="nx">N</span><span class="p">);</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">oa</span><span class="p">.</span><span class="nx">empty</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">oa</span><span class="p">.</span><span class="nx">intersect</span><span class="p">(</span><span class="nx">fb</span><span class="p">),</span><span class="nx">oa</span><span class="p">.</span><span class="nx">expandByScalar</span><span class="p">(</span><span class="mi">2</span><span class="p">),</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">w</span><span class="o">&amp;&amp;</span><span class="nx">y</span><span class="p">.</span><span class="nx">clearRect</span><span class="p">(</span><span class="nx">oa</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">|</span></td>
      </tr>
      <tr>
        <td id="L314" class="blob-num js-line-number" data-line-number="314"></td>
        <td id="LC314" class="blob-code js-file-line"><span class="mi">0</span><span class="p">,</span><span class="nx">oa</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">|</span><span class="mi">0</span><span class="p">,</span><span class="nx">oa</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">oa</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">|</span><span class="mi">0</span><span class="p">,</span><span class="nx">oa</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">oa</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">|</span><span class="mi">0</span><span class="p">),</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">w</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="p">),</span><span class="nx">m</span><span class="p">(</span><span class="mi">1</span><span class="p">),</span><span class="nx">s</span><span class="p">(</span><span class="s2">&quot;rgba(&quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mi">255</span><span class="o">*</span><span class="nx">M</span><span class="p">.</span><span class="nx">r</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mi">255</span><span class="o">*</span><span class="nx">M</span><span class="p">.</span><span class="nx">g</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mi">255</span><span class="o">*</span><span class="nx">M</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;,&quot;</span><span class="o">+</span><span class="nx">w</span><span class="o">+</span><span class="s2">&quot;)&quot;</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="nx">oa</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">|</span><span class="mi">0</span><span class="p">,</span><span class="nx">oa</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">|</span><span class="mi">0</span><span class="p">,</span><span class="nx">oa</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">oa</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">x</span><span class="o">|</span><span class="mi">0</span><span class="p">,</span><span class="nx">oa</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">oa</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">y</span><span class="o">|</span><span class="mi">0</span><span class="p">)),</span><span class="nx">oa</span><span class="p">.</span><span class="nx">makeEmpty</span><span class="p">())};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">g</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">)</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;THREE.CanvasRenderer.render: camera is not an instance of THREE.Camera.&quot;</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClear</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span><span class="nx">y</span><span class="p">.</span><span class="nx">setTransform</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">J</span><span class="p">,</span><span class="nx">N</span><span class="p">);</span><span class="nx">C</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L315" class="blob-num js-line-number" data-line-number="315"></td>
        <td id="LC315" class="blob-code js-file-line"><span class="mi">0</span><span class="p">;</span><span class="nx">C</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">F</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">projectScene</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">sortObjects</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">sortElements</span><span class="p">);</span><span class="nx">H</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">elements</span><span class="p">;</span><span class="nx">I</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">lights</span><span class="p">;</span><span class="nx">D</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">ib</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">Tb</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">Ub</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="nx">I</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">A</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">w</span><span class="o">=</span><span class="nx">I</span><span class="p">[</span><span class="nx">k</span><span class="p">],</span><span class="nx">B</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="nx">w</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="o">?</span><span class="nx">ib</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">B</span><span class="p">)</span><span class="o">:</span><span class="nx">w</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="o">?</span><span class="nx">Tb</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">B</span><span class="p">)</span><span class="o">:</span><span class="nx">w</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="o">&amp;&amp;</span><span class="nx">Ub</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">B</span><span class="p">)}</span><span class="nx">k</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">A</span><span class="o">=</span><span class="nx">H</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">k</span><span class="o">&lt;</span><span class="nx">A</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">U</span><span class="o">=</span><span class="nx">H</span><span class="p">[</span><span class="nx">k</span><span class="p">],</span><span class="nx">w</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">w</span><span class="o">||!</span><span class="mi">1</span><span class="o">===</span><span class="nx">w</span><span class="p">.</span><span class="nx">visible</span><span class="p">)){</span><span class="nx">va</span><span class="p">.</span><span class="nx">makeEmpty</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">U</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableParticle</span><span class="p">){</span><span class="nx">V</span><span class="o">=</span><span class="nx">U</span><span class="p">;</span><span class="nx">V</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">J</span><span class="p">;</span><span class="nx">V</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span></td>
      </tr>
      <tr>
        <td id="L316" class="blob-num js-line-number" data-line-number="316"></td>
        <td id="LC316" class="blob-code js-file-line"><span class="nx">N</span><span class="p">;</span><span class="nx">B</span><span class="o">=</span><span class="nx">V</span><span class="p">;</span><span class="nx">m</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">opacity</span><span class="p">);</span><span class="nx">n</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">blending</span><span class="p">);</span><span class="kd">var</span> <span class="nx">mb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">nb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">vb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">zb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Zb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Jc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Kc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="nx">w</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="o">?</span><span class="kc">null</span><span class="o">===</span><span class="nx">w</span><span class="p">.</span><span class="nx">map</span><span class="o">?</span><span class="p">(</span><span class="nx">vb</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">zb</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">vb</span><span class="o">*=</span><span class="nx">U</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">J</span><span class="p">,</span><span class="nx">zb</span><span class="o">*=</span><span class="nx">U</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">N</span><span class="p">,</span><span class="nx">va</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">vb</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">zb</span><span class="p">),</span><span class="nx">va</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">vb</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">zb</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">fb</span><span class="p">.</span><span class="nx">isIntersectionBox</span><span class="p">(</span><span class="nx">va</span><span class="p">)</span><span class="o">?</span><span class="nx">va</span><span class="p">.</span><span class="nx">makeEmpty</span><span class="p">()</span><span class="o">:</span><span class="p">(</span><span class="nx">s</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">getStyle</span><span class="p">()),</span><span class="nx">y</span><span class="p">.</span><span class="nx">save</span><span class="p">(),</span><span class="nx">y</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="o">-</span><span class="nx">U</span><span class="p">.</span><span class="nx">rotation</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">vb</span><span class="p">,</span><span class="nx">zb</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">fillRect</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">restore</span><span class="p">()))</span><span class="o">:</span><span class="p">(</span><span class="nx">Zb</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">image</span><span class="p">,</span><span class="nx">Jc</span><span class="o">=</span><span class="nx">Zb</span><span class="p">.</span><span class="nx">width</span><span class="o">&gt;&gt;</span><span class="mi">1</span><span class="p">,</span><span class="nx">Kc</span><span class="o">=</span><span class="nx">Zb</span><span class="p">.</span><span class="nx">height</span><span class="o">&gt;&gt;</span></td>
      </tr>
      <tr>
        <td id="L317" class="blob-num js-line-number" data-line-number="317"></td>
        <td id="LC317" class="blob-code js-file-line"><span class="mi">1</span><span class="p">,</span><span class="nx">vb</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">J</span><span class="p">,</span><span class="nx">zb</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">N</span><span class="p">,</span><span class="nx">mb</span><span class="o">=</span><span class="nx">vb</span><span class="o">*</span><span class="nx">Jc</span><span class="p">,</span><span class="nx">nb</span><span class="o">=</span><span class="nx">zb</span><span class="o">*</span><span class="nx">Kc</span><span class="p">,</span><span class="nx">va</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">mb</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">nb</span><span class="p">),</span><span class="nx">va</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">mb</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">nb</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">fb</span><span class="p">.</span><span class="nx">isIntersectionBox</span><span class="p">(</span><span class="nx">va</span><span class="p">)</span><span class="o">?</span><span class="nx">va</span><span class="p">.</span><span class="nx">makeEmpty</span><span class="p">()</span><span class="o">:</span><span class="p">(</span><span class="nx">y</span><span class="p">.</span><span class="nx">save</span><span class="p">(),</span><span class="nx">y</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="o">-</span><span class="nx">U</span><span class="p">.</span><span class="nx">rotation</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">vb</span><span class="p">,</span><span class="o">-</span><span class="nx">zb</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="o">-</span><span class="nx">Jc</span><span class="p">,</span><span class="o">-</span><span class="nx">Kc</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">Zb</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">restore</span><span class="p">()))</span><span class="o">:</span><span class="nx">w</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleCanvasMaterial</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">mb</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">J</span><span class="p">,</span><span class="nx">nb</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">N</span><span class="p">,</span><span class="nx">va</span><span class="p">.</span><span class="nx">min</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">mb</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">nb</span><span class="p">),</span><span class="nx">va</span><span class="p">.</span><span class="nx">max</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">mb</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">nb</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">fb</span><span class="p">.</span><span class="nx">isIntersectionBox</span><span class="p">(</span><span class="nx">va</span><span class="p">)</span><span class="o">?</span><span class="nx">va</span><span class="p">.</span><span class="nx">makeEmpty</span><span class="p">()</span><span class="o">:</span><span class="p">(</span><span class="nx">r</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">getStyle</span><span class="p">()),</span><span class="nx">s</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">getStyle</span><span class="p">()),</span><span class="nx">y</span><span class="p">.</span><span class="nx">save</span><span class="p">(),</span><span class="nx">y</span><span class="p">.</span><span class="nx">translate</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L318" class="blob-num js-line-number" data-line-number="318"></td>
        <td id="LC318" class="blob-code js-file-line"><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">rotate</span><span class="p">(</span><span class="o">-</span><span class="nx">U</span><span class="p">.</span><span class="nx">rotation</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">scale</span><span class="p">(</span><span class="nx">mb</span><span class="p">,</span><span class="nx">nb</span><span class="p">),</span><span class="nx">w</span><span class="p">.</span><span class="nx">program</span><span class="p">(</span><span class="nx">y</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">restore</span><span class="p">()))}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">U</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableLine</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">V</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">v1</span><span class="p">,</span><span class="nx">ea</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">v2</span><span class="p">,</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">J</span><span class="p">,</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">N</span><span class="p">,</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">J</span><span class="p">,</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">N</span><span class="p">,</span><span class="nx">va</span><span class="p">.</span><span class="nx">setFromPoints</span><span class="p">([</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">]),</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">fb</span><span class="p">.</span><span class="nx">isIntersectionBox</span><span class="p">(</span><span class="nx">va</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">B</span><span class="o">=</span><span class="nx">V</span><span class="p">,</span><span class="nx">mb</span><span class="o">=</span><span class="nx">ea</span><span class="p">,</span><span class="nx">m</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">opacity</span><span class="p">),</span><span class="nx">n</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">blending</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">beginPath</span><span class="p">(),</span><span class="nx">y</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">mb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">mb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">w</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">){</span><span class="nx">p</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">linewidth</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L319" class="blob-num js-line-number" data-line-number="319"></td>
        <td id="LC319" class="blob-code js-file-line"><span class="nx">t</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">linecap</span><span class="p">);</span><span class="nx">q</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">linejoin</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">!==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="p">)</span><span class="nx">r</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">getStyle</span><span class="p">());</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">nb</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getStyle</span><span class="p">(),</span><span class="nx">U</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">getStyle</span><span class="p">(),</span><span class="nx">nb</span><span class="o">===</span><span class="nx">U</span><span class="p">)</span><span class="nx">r</span><span class="p">(</span><span class="nx">nb</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="k">try</span><span class="p">{</span><span class="kd">var</span> <span class="nx">wc</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">createLinearGradient</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">mb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">mb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">wc</span><span class="p">.</span><span class="nx">addColorStop</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">nb</span><span class="p">);</span><span class="nx">wc</span><span class="p">.</span><span class="nx">addColorStop</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nx">U</span><span class="p">)}</span><span class="k">catch</span><span class="p">(</span><span class="nx">fd</span><span class="p">){</span><span class="nx">wc</span><span class="o">=</span><span class="nx">nb</span><span class="p">}</span><span class="nx">r</span><span class="p">(</span><span class="nx">wc</span><span class="p">)}</span><span class="nx">y</span><span class="p">.</span><span class="nx">stroke</span><span class="p">();</span><span class="nx">va</span><span class="p">.</span><span class="nx">expandByScalar</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">w</span><span class="p">.</span><span class="nx">linewidth</span><span class="p">)}</span><span class="k">else</span> <span class="nx">w</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineDashedMaterial</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">p</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">linewidth</span><span class="p">),</span><span class="nx">t</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">linecap</span><span class="p">),</span><span class="nx">q</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">linejoin</span><span class="p">),</span><span class="nx">r</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">getStyle</span><span class="p">()),</span></td>
      </tr>
      <tr>
        <td id="L320" class="blob-num js-line-number" data-line-number="320"></td>
        <td id="LC320" class="blob-code js-file-line"><span class="nx">v</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">dashSize</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">gapSize</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">stroke</span><span class="p">(),</span><span class="nx">va</span><span class="p">.</span><span class="nx">expandByScalar</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">w</span><span class="p">.</span><span class="nx">linewidth</span><span class="p">),</span><span class="nx">v</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="p">))}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">U</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace3</span><span class="p">){</span><span class="nx">V</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">v1</span><span class="p">;</span><span class="nx">ea</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">v2</span><span class="p">;</span><span class="nx">qa</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">v3</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">||</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">||</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">||</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">J</span><span class="p">;</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">N</span><span class="p">;</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">J</span><span class="p">;</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">N</span><span class="p">;</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">J</span><span class="p">;</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">N</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">w</span><span class="p">.</span><span class="nx">overdraw</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="p">(</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L321" class="blob-num js-line-number" data-line-number="321"></td>
        <td id="LC321" class="blob-code js-file-line"><span class="nx">w</span><span class="p">.</span><span class="nx">overdraw</span><span class="p">),</span><span class="nx">l</span><span class="p">(</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">overdraw</span><span class="p">),</span><span class="nx">l</span><span class="p">(</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">overdraw</span><span class="p">));</span><span class="nx">va</span><span class="p">.</span><span class="nx">setFromPoints</span><span class="p">([</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">]);</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">fb</span><span class="p">.</span><span class="nx">isIntersectionBox</span><span class="p">(</span><span class="nx">va</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">(</span><span class="nx">V</span><span class="p">,</span><span class="nx">ea</span><span class="p">,</span><span class="nx">qa</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">w</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">U</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace4</span><span class="p">){</span><span class="nx">V</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">v1</span><span class="p">;</span><span class="nx">ea</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">v2</span><span class="p">;</span><span class="nx">qa</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">v3</span><span class="p">;</span><span class="nx">eb</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">v4</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">||</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">||</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">||</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">eb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">||</span></td>
      </tr>
      <tr>
        <td id="L322" class="blob-num js-line-number" data-line-number="322"></td>
        <td id="LC322" class="blob-code js-file-line"><span class="mi">1</span><span class="o">&lt;</span><span class="nx">eb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">J</span><span class="p">;</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">N</span><span class="p">;</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">J</span><span class="p">;</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">N</span><span class="p">;</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">J</span><span class="p">;</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">N</span><span class="p">;</span><span class="nx">eb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">*=</span><span class="nx">J</span><span class="p">;</span><span class="nx">eb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">*=</span><span class="nx">N</span><span class="p">;</span><span class="nx">pb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="nx">ub</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">eb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">);</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">w</span><span class="p">.</span><span class="nx">overdraw</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="p">(</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">overdraw</span><span class="p">),</span><span class="nx">l</span><span class="p">(</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">eb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">overdraw</span><span class="p">),</span><span class="nx">l</span><span class="p">(</span><span class="nx">eb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">overdraw</span><span class="p">),</span><span class="nx">l</span><span class="p">(</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">pb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">overdraw</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L323" class="blob-num js-line-number" data-line-number="323"></td>
        <td id="LC323" class="blob-code js-file-line"><span class="nx">l</span><span class="p">(</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">ub</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">overdraw</span><span class="p">));</span><span class="nx">va</span><span class="p">.</span><span class="nx">setFromPoints</span><span class="p">([</span><span class="nx">V</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">ea</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">qa</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">,</span><span class="nx">eb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">]);</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">fb</span><span class="p">.</span><span class="nx">isIntersectionBox</span><span class="p">(</span><span class="nx">va</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">B</span><span class="o">=</span><span class="nx">V</span><span class="p">,</span><span class="nx">mb</span><span class="o">=</span><span class="nx">ea</span><span class="p">,</span><span class="nx">nb</span><span class="o">=</span><span class="nx">qa</span><span class="p">,</span><span class="nx">vb</span><span class="o">=</span><span class="nx">eb</span><span class="p">,</span><span class="nx">zb</span><span class="o">=</span><span class="nx">pb</span><span class="p">,</span><span class="nx">Zb</span><span class="o">=</span><span class="nx">ub</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">+=</span><span class="mi">4</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">++</span><span class="p">,</span><span class="nx">m</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">opacity</span><span class="p">),</span><span class="nx">n</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">blending</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">w</span><span class="p">.</span><span class="nx">map</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">w</span><span class="p">.</span><span class="nx">map</span><span class="o">||</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">w</span><span class="p">.</span><span class="nx">envMap</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">w</span><span class="p">.</span><span class="nx">envMap</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="p">(</span><span class="nx">B</span><span class="p">,</span><span class="nx">mb</span><span class="p">,</span><span class="nx">vb</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">w</span><span class="p">),</span><span class="nx">c</span><span class="p">(</span><span class="nx">zb</span><span class="p">,</span><span class="nx">nb</span><span class="p">,</span><span class="nx">Zb</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">U</span><span class="p">,</span><span class="nx">w</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">ya</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ha</span><span class="o">=</span><span class="nx">B</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">fa</span><span class="o">=</span><span class="nx">mb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">da</span><span class="o">=</span><span class="nx">mb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">T</span><span class="o">=</span><span class="nx">nb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L324" class="blob-num js-line-number" data-line-number="324"></td>
        <td id="LC324" class="blob-code js-file-line"><span class="nx">aa</span><span class="o">=</span><span class="nx">nb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">na</span><span class="o">=</span><span class="nx">vb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">ha</span><span class="o">=</span><span class="nx">vb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">X</span><span class="o">=</span><span class="nx">zb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">xa</span><span class="o">=</span><span class="nx">zb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">ab</span><span class="o">=</span><span class="nx">Zb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">la</span><span class="o">=</span><span class="nx">Zb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">w</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">||</span><span class="nx">w</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="o">?</span><span class="p">(</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">),</span><span class="nx">Xa</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">emissive</span><span class="p">),</span><span class="nx">w</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceColors</span><span class="o">&amp;&amp;</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">color</span><span class="p">),</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">w</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">&amp;&amp;</span><span class="nx">w</span><span class="p">.</span><span class="nx">shading</span><span class="o">==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="o">&amp;&amp;</span><span class="mi">4</span><span class="o">==</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsLength</span><span class="o">?</span><span class="p">(</span><span class="nx">ra</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ib</span><span class="p">),</span><span class="nx">ja</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ib</span><span class="p">),</span><span class="nx">ua</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ib</span><span class="p">),</span><span class="nx">Ra</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ib</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModel</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">ra</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L325" class="blob-num js-line-number" data-line-number="325"></td>
        <td id="LC325" class="blob-code js-file-line"><span class="nx">b</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModel</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">ja</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">v4</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModel</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">ua</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">,</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModel</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">Ra</span><span class="p">),</span><span class="nx">ra</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">Qa</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">Xa</span><span class="p">),</span><span class="nx">ja</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">Qa</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">Xa</span><span class="p">),</span><span class="nx">ua</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">Qa</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">Xa</span><span class="p">),</span><span class="nx">Ra</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">Qa</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">Xa</span><span class="p">),</span><span class="nx">lb</span><span class="o">=</span><span class="nx">j</span><span class="p">(</span><span class="nx">ra</span><span class="p">,</span><span class="nx">ja</span><span class="p">,</span><span class="nx">ua</span><span class="p">,</span><span class="nx">Ra</span><span class="p">),</span><span class="nx">d</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">na</span><span class="p">,</span><span class="nx">ha</span><span class="p">),</span><span class="nx">i</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">na</span><span class="p">,</span><span class="nx">ha</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">lb</span><span class="p">),</span><span class="nx">d</span><span class="p">(</span><span class="nx">X</span><span class="p">,</span><span class="nx">xa</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="nx">ab</span><span class="p">,</span><span class="nx">la</span><span class="p">),</span><span class="nx">i</span><span class="p">(</span><span class="nx">X</span><span class="p">,</span><span class="nx">xa</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="nx">ab</span><span class="p">,</span><span class="nx">la</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">lb</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">ia</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">ib</span><span class="p">),</span><span class="nx">b</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">centroidModel</span><span class="p">,</span><span class="nx">U</span><span class="p">.</span><span class="nx">normalModel</span><span class="p">,</span><span class="nx">ia</span><span class="p">),</span><span class="nx">ia</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">Qa</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">Xa</span><span class="p">),</span><span class="nx">e</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="nx">na</span><span class="p">,</span><span class="nx">ha</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">w</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">f</span><span class="p">(</span><span class="nx">ia</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L326" class="blob-num js-line-number" data-line-number="326"></td>
        <td id="LC326" class="blob-code js-file-line"><span class="nx">w</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">h</span><span class="p">(</span><span class="nx">ia</span><span class="p">)))</span><span class="o">:</span><span class="nx">w</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="o">?</span><span class="p">(</span><span class="nx">ia</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">),</span><span class="nx">w</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceColors</span><span class="o">&amp;&amp;</span><span class="nx">ia</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">U</span><span class="p">.</span><span class="nx">color</span><span class="p">),</span><span class="nx">e</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="nx">na</span><span class="p">,</span><span class="nx">ha</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">w</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">f</span><span class="p">(</span><span class="nx">ia</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">h</span><span class="p">(</span><span class="nx">ia</span><span class="p">))</span><span class="o">:</span><span class="nx">w</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="o">?</span><span class="p">(</span><span class="nx">B</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">shading</span><span class="o">==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FlatShading</span><span class="o">?</span><span class="p">(</span><span class="nx">B</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">normalModelView</span><span class="p">,</span><span class="nx">ia</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">).</span><span class="nx">addScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span><span class="nx">e</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="nx">na</span><span class="p">,</span><span class="nx">ha</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">w</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="nx">f</span><span class="p">(</span><span class="nx">ia</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">wireframeLinecap</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L327" class="blob-num js-line-number" data-line-number="327"></td>
        <td id="LC327" class="blob-code js-file-line"><span class="nx">w</span><span class="p">.</span><span class="nx">wireframeLinejoin</span><span class="p">)</span><span class="o">:</span><span class="nx">h</span><span class="p">(</span><span class="nx">ia</span><span class="p">))</span><span class="o">:</span><span class="nx">w</span><span class="p">.</span><span class="nx">shading</span><span class="o">==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">B</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModelView</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">ra</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">).</span><span class="nx">addScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span><span class="nx">B</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModelView</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">ja</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">).</span><span class="nx">addScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span><span class="nx">B</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModelView</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">ua</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">).</span><span class="nx">addScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span><span class="nx">B</span><span class="o">=</span><span class="nx">U</span><span class="p">.</span><span class="nx">vertexNormalsModelView</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">Ra</span><span class="p">.</span><span class="nx">setRGB</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">B</span><span class="p">.</span><span class="nx">z</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">).</span><span class="nx">addScalar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">),</span><span class="nx">lb</span><span class="o">=</span><span class="nx">j</span><span class="p">(</span><span class="nx">ra</span><span class="p">,</span><span class="nx">ja</span><span class="p">,</span><span class="nx">ua</span><span class="p">,</span><span class="nx">Ra</span><span class="p">),</span><span class="nx">d</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">na</span><span class="p">,</span><span class="nx">ha</span><span class="p">),</span><span class="nx">i</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">na</span><span class="p">,</span><span class="nx">ha</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">lb</span><span class="p">),</span><span class="nx">d</span><span class="p">(</span><span class="nx">X</span><span class="p">,</span><span class="nx">xa</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="nx">ab</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L328" class="blob-num js-line-number" data-line-number="328"></td>
        <td id="LC328" class="blob-code js-file-line"><span class="nx">la</span><span class="p">),</span><span class="nx">i</span><span class="p">(</span><span class="nx">X</span><span class="p">,</span><span class="nx">xa</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="nx">ab</span><span class="p">,</span><span class="nx">la</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">lb</span><span class="p">)))</span><span class="o">:</span><span class="nx">w</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Sa</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">xb</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">far</span><span class="p">,</span><span class="nx">ra</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">ra</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">ra</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">z</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">B</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Sa</span><span class="p">,</span><span class="nx">xb</span><span class="p">),</span><span class="nx">ja</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">ja</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">ja</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">z</span><span class="p">(</span><span class="nx">mb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">mb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Sa</span><span class="p">,</span><span class="nx">xb</span><span class="p">),</span><span class="nx">ua</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">ua</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">ua</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">z</span><span class="p">(</span><span class="nx">vb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">vb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Sa</span><span class="p">,</span><span class="nx">xb</span><span class="p">),</span><span class="nx">Ra</span><span class="p">.</span><span class="nx">r</span><span class="o">=</span><span class="nx">Ra</span><span class="p">.</span><span class="nx">g</span><span class="o">=</span><span class="nx">Ra</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">z</span><span class="p">(</span><span class="nx">nb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">nb</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Sa</span><span class="p">,</span><span class="nx">xb</span><span class="p">),</span><span class="nx">lb</span><span class="o">=</span><span class="nx">j</span><span class="p">(</span><span class="nx">ra</span><span class="p">,</span><span class="nx">ja</span><span class="p">,</span><span class="nx">ua</span><span class="p">,</span><span class="nx">Ra</span><span class="p">),</span><span class="nx">d</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">na</span><span class="p">,</span><span class="nx">ha</span><span class="p">),</span><span class="nx">i</span><span class="p">(</span><span class="nx">ya</span><span class="p">,</span><span class="nx">Ha</span><span class="p">,</span><span class="nx">fa</span><span class="p">,</span><span class="nx">da</span><span class="p">,</span><span class="nx">na</span><span class="p">,</span><span class="nx">ha</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">lb</span><span class="p">),</span><span class="nx">d</span><span class="p">(</span><span class="nx">X</span><span class="p">,</span><span class="nx">xa</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="nx">ab</span><span class="p">,</span><span class="nx">la</span><span class="p">),</span><span class="nx">i</span><span class="p">(</span><span class="nx">X</span><span class="p">,</span><span class="nx">xa</span><span class="p">,</span><span class="nx">T</span><span class="p">,</span><span class="nx">aa</span><span class="p">,</span><span class="nx">ab</span><span class="p">,</span><span class="nx">la</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">lb</span><span class="p">))))}</span><span class="nx">oa</span><span class="p">.</span><span class="nx">union</span><span class="p">(</span><span class="nx">va</span><span class="p">)}}</span><span class="nx">y</span><span class="p">.</span><span class="nx">setTransform</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L329" class="blob-num js-line-number" data-line-number="329"></td>
        <td id="LC329" class="blob-code js-file-line"><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="o">=</span><span class="p">{</span><span class="nx">fog_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif&quot;</span><span class="p">,</span><span class="nx">fog_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L330" class="blob-num js-line-number" data-line-number="330"></td>
        <td id="LC330" class="blob-code js-file-line"><span class="nx">envmap_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_ENVMAP\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nuniform int combine;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nuniform bool useRefract;\nuniform float refractionRatio;\n#else\nvarying vec3 vReflect;\n#endif\n#endif&quot;</span><span class="p">,</span><span class="nx">envmap_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_ENVMAP\nvec3 reflectVec;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nreflectVec = refract( cameraToVertex, normal, refractionRatio );\n} else { \nreflectVec = reflect( cameraToVertex, normal );\n}\n#else\nreflectVec = vReflect;\n#endif\n#ifdef DOUBLE_SIDED\nfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\nvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#else\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#endif\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\n} else if ( combine == 2 ) {\ngl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\n} else {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\n}\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L331" class="blob-num js-line-number" data-line-number="331"></td>
        <td id="LC331" class="blob-code js-file-line"><span class="nx">envmap_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#if defined( USE_ENVMAP ) &amp;&amp; ! defined( USE_BUMPMAP ) &amp;&amp; ! defined( USE_NORMALMAP )\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif&quot;</span><span class="p">,</span><span class="nx">worldpos_vertex</span><span class="o">:</span><span class="s2">&quot;#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n#ifdef USE_SKINNING\nvec4 worldPosition = modelMatrix * skinned;\n#endif\n#if defined( USE_MORPHTARGETS ) &amp;&amp; ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n#endif\n#if ! defined( USE_MORPHTARGETS ) &amp;&amp; ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n#endif\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L332" class="blob-num js-line-number" data-line-number="332"></td>
        <td id="LC332" class="blob-code js-file-line"><span class="nx">envmap_vertex</span><span class="o">:</span><span class="s2">&quot;#if defined( USE_ENVMAP ) &amp;&amp; ! defined( USE_BUMPMAP ) &amp;&amp; ! defined( USE_NORMALMAP )\nvec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\nworldNormal = normalize( worldNormal );\nvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, worldNormal );\n}\n#endif&quot;</span><span class="p">,</span><span class="nx">map_particle_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MAP\nuniform sampler2D map;\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L333" class="blob-num js-line-number" data-line-number="333"></td>
        <td id="LC333" class="blob-code js-file-line"><span class="nx">map_particle_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n#endif&quot;</span><span class="p">,</span><span class="nx">map_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif&quot;</span><span class="p">,</span><span class="nx">map_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L334" class="blob-num js-line-number" data-line-number="334"></td>
        <td id="LC334" class="blob-code js-file-line"><span class="nx">map_vertex</span><span class="o">:</span><span class="s2">&quot;#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif&quot;</span><span class="p">,</span><span class="nx">map_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MAP\nvec4 texelColor = texture2D( map, vUv );\n#ifdef GAMMA_INPUT\ntexelColor.xyz *= texelColor.xyz;\n#endif\ngl_FragColor = gl_FragColor * texelColor;\n#endif&quot;</span><span class="p">,</span><span class="nx">lightmap_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif&quot;</span><span class="p">,</span><span class="nx">lightmap_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L335" class="blob-num js-line-number" data-line-number="335"></td>
        <td id="LC335" class="blob-code js-file-line"><span class="nx">lightmap_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif&quot;</span><span class="p">,</span><span class="nx">lightmap_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif&quot;</span><span class="p">,</span><span class="nx">bumpmap_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_BUMPMAP\nuniform sampler2D bumpMap;\nuniform float bumpScale;\nvec2 dHdxy_fwd() {\nvec2 dSTdx = dFdx( vUv );\nvec2 dSTdy = dFdy( vUv );\nfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\nfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\nfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\nreturn vec2( dBx, dBy );\n}\nvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\nvec3 vSigmaX = dFdx( surf_pos );\nvec3 vSigmaY = dFdy( surf_pos );\nvec3 vN = surf_norm;\nvec3 R1 = cross( vSigmaY, vN );\nvec3 R2 = cross( vN, vSigmaX );\nfloat fDet = dot( vSigmaX, R1 );\nvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\nreturn normalize( abs( fDet ) * surf_norm - vGrad );\n}\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L336" class="blob-num js-line-number" data-line-number="336"></td>
        <td id="LC336" class="blob-code js-file-line"><span class="nx">normalmap_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_NORMALMAP\nuniform sampler2D normalMap;\nuniform vec2 normalScale;\nvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\nvec3 q0 = dFdx( eye_pos.xyz );\nvec3 q1 = dFdy( eye_pos.xyz );\nvec2 st0 = dFdx( vUv.st );\nvec2 st1 = dFdy( vUv.st );\nvec3 S = normalize(  q0 * st1.t - q1 * st0.t );\nvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\nvec3 N = normalize( surf_norm );\nvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\nmapN.xy = normalScale * mapN.xy;\nmat3 tsn = mat3( S, T, N );\nreturn normalize( tsn * mapN );\n}\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L337" class="blob-num js-line-number" data-line-number="337"></td>
        <td id="LC337" class="blob-code js-file-line"><span class="nx">specularmap_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SPECULARMAP\nuniform sampler2D specularMap;\n#endif&quot;</span><span class="p">,</span><span class="nx">specularmap_fragment</span><span class="o">:</span><span class="s2">&quot;float specularStrength;\n#ifdef USE_SPECULARMAP\nvec4 texelSpecular = texture2D( specularMap, vUv );\nspecularStrength = texelSpecular.r;\n#else\nspecularStrength = 1.0;\n#endif&quot;</span><span class="p">,</span><span class="nx">lights_lambert_pars_vertex</span><span class="o">:</span><span class="s2">&quot;uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS &gt; 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L338" class="blob-num js-line-number" data-line-number="338"></td>
        <td id="LC338" class="blob-code js-file-line"><span class="nx">lights_lambert_vertex</span><span class="o">:</span><span class="s2">&quot;vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\nif ( spotEffect &gt; spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\nspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\nspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n#ifdef DOUBLE_SIDED\nvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\nvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n#ifdef DOUBLE_SIDED\nvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n#endif\n}\n#endif\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n#ifdef DOUBLE_SIDED\nvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L339" class="blob-num js-line-number" data-line-number="339"></td>
        <td id="LC339" class="blob-code js-file-line"><span class="nx">lights_phong_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS &gt; 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L340" class="blob-num js-line-number" data-line-number="340"></td>
        <td id="LC340" class="blob-code js-file-line"><span class="nx">lights_phong_vertex</span><span class="o">:</span><span class="s2">&quot;#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nfor( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nvSpotLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0 || defined( USE_BUMPMAP )\nvWorldPosition = worldPosition.xyz;\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L341" class="blob-num js-line-number" data-line-number="341"></td>
        <td id="LC341" class="blob-code js-file-line"><span class="nx">lights_phong_pars_fragment</span><span class="o">:</span><span class="s2">&quot;uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS &gt; 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#else\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L342" class="blob-num js-line-number" data-line-number="342"></td>
        <td id="LC342" class="blob-code js-file-line"><span class="nx">lights_phong_fragment</span><span class="o">:</span><span class="s2">&quot;vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#ifdef USE_NORMALMAP\nnormal = perturbNormal2Arb( -vViewPosition, normal );\n#elif defined( USE_BUMPMAP )\nnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nvec3 spotDiffuse  = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] &gt; 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vSpotLight[ i ].xyz );\nfloat lDistance = vSpotLight[ i ].w;\n#endif\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect &gt; spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n#endif\nspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\nvec3 spotHalfVector = normalize( lVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS &gt; 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i &lt; MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i &lt; MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += diffuse * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS &gt; 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L343" class="blob-num js-line-number" data-line-number="343"></td>
        <td id="LC343" class="blob-code js-file-line"><span class="nx">color_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif&quot;</span><span class="p">,</span><span class="nx">color_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif&quot;</span><span class="p">,</span><span class="nx">color_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif&quot;</span><span class="p">,</span><span class="nx">color_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif&quot;</span><span class="p">,</span><span class="nx">skinning_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SKINNING\n#ifdef BONE_TEXTURE\nuniform sampler2D boneTexture;\nmat4 getBoneMatrix( const in float i ) {\nfloat j = i * 4.0;\nfloat x = mod( j, N_BONE_PIXEL_X );\nfloat y = floor( j / N_BONE_PIXEL_X );\nconst float dx = 1.0 / N_BONE_PIXEL_X;\nconst float dy = 1.0 / N_BONE_PIXEL_Y;\ny = dy * ( y + 0.5 );\nvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\nvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\nvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\nvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\nmat4 bone = mat4( v1, v2, v3, v4 );\nreturn bone;\n}\n#else\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\nmat4 getBoneMatrix( const in float i ) {\nmat4 bone = boneGlobalMatrices[ int(i) ];\nreturn bone;\n}\n#endif\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L344" class="blob-num js-line-number" data-line-number="344"></td>
        <td id="LC344" class="blob-code js-file-line"><span class="nx">skinbase_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SKINNING\nmat4 boneMatX = getBoneMatrix( skinIndex.x );\nmat4 boneMatY = getBoneMatrix( skinIndex.y );\n#endif&quot;</span><span class="p">,</span><span class="nx">skinning_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SKINNING\n#ifdef USE_MORPHTARGETS\nvec4 skinVertex = vec4( morphed, 1.0 );\n#else\nvec4 skinVertex = vec4( position, 1.0 );\n#endif\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\n#endif&quot;</span><span class="p">,</span><span class="nx">morphtarget_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MORPHTARGETS\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[ 8 ];\n#else\nuniform float morphTargetInfluences[ 4 ];\n#endif\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L345" class="blob-num js-line-number" data-line-number="345"></td>
        <td id="LC345" class="blob-code js-file-line"><span class="nx">morphtarget_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n#ifndef USE_MORPHNORMALS\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n#endif\nmorphed += position;\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L346" class="blob-num js-line-number" data-line-number="346"></td>
        <td id="LC346" class="blob-code js-file-line"><span class="nx">default_vertex</span><span class="o">:</span><span class="s2">&quot;vec4 mvPosition;\n#ifdef USE_SKINNING\nmvPosition = modelViewMatrix * skinned;\n#endif\n#if !defined( USE_SKINNING ) &amp;&amp; defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n#endif\n#if !defined( USE_SKINNING ) &amp;&amp; ! defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( position, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;&quot;</span><span class="p">,</span><span class="nx">morphnormal_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_MORPHNORMALS\nvec3 morphedNormal = vec3( 0.0 );\nmorphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\nmorphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\nmorphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\nmorphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\nmorphedNormal += normal;\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L347" class="blob-num js-line-number" data-line-number="347"></td>
        <td id="LC347" class="blob-code js-file-line"><span class="nx">skinnormal_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SKINNING\nmat4 skinMatrix = skinWeight.x * boneMatX;\nskinMatrix \t+= skinWeight.y * boneMatY;\n#ifdef USE_MORPHNORMALS\nvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n#else\nvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n#endif\n#endif&quot;</span><span class="p">,</span><span class="nx">defaultnormal_vertex</span><span class="o">:</span><span class="s2">&quot;vec3 objectNormal;\n#ifdef USE_SKINNING\nobjectNormal = skinnedNormal.xyz;\n#endif\n#if !defined( USE_SKINNING ) &amp;&amp; defined( USE_MORPHNORMALS )\nobjectNormal = morphedNormal;\n#endif\n#if !defined( USE_SKINNING ) &amp;&amp; ! defined( USE_MORPHNORMALS )\nobjectNormal = normal;\n#endif\n#ifdef FLIP_SIDED\nobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L348" class="blob-num js-line-number" data-line-number="348"></td>
        <td id="LC348" class="blob-code js-file-line"><span class="nx">shadowmap_pars_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif&quot;</span><span class="p">,</span><span class="nx">shadowmap_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i &lt; MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x &gt;= 0.0, shadowCoord.x &lt;= 1.0, shadowCoord.y &gt;= 0.0, shadowCoord.y &lt;= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z &lt;= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z &lt;= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#if defined( SHADOWMAP_TYPE_PCF )\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth &lt; shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\nfloat shadow = 0.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.0 * xPixelOffset;\nfloat dy0 = -1.0 * yPixelOffset;\nfloat dx1 = 1.0 * xPixelOffset;\nfloat dy1 = 1.0 * yPixelOffset;\nmat3 shadowKernel;\nmat3 depthKernel;\ndepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\ndepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\ndepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\ndepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\ndepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\ndepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\ndepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\ndepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\ndepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nvec3 shadowZ = vec3( shadowCoord.z );\nshadowKernel[0] = vec3(lessThan(depthKernel[0], shadowZ ));\nshadowKernel[0] *= vec3(0.25);\nshadowKernel[1] = vec3(lessThan(depthKernel[1], shadowZ ));\nshadowKernel[1] *= vec3(0.25);\nshadowKernel[2] = vec3(lessThan(depthKernel[2], shadowZ ));\nshadowKernel[2] *= vec3(0.25);\nvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\nshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\nshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\nvec4 shadowValues;\nshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\nshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\nshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\nshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\nshadow = dot( shadowValues, vec4( 1.0 ) );\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth &lt; shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum &amp;&amp; inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L349" class="blob-num js-line-number" data-line-number="349"></td>
        <td id="LC349" class="blob-code js-file-line"><span class="nx">shadowmap_pars_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif&quot;</span><span class="p">,</span><span class="nx">shadowmap_vertex</span><span class="o">:</span><span class="s2">&quot;#ifdef USE_SHADOWMAP\nfor( int i = 0; i &lt; MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif&quot;</span><span class="p">,</span><span class="nx">alphatest_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef ALPHATEST\nif ( gl_FragColor.a &lt; ALPHATEST ) discard;\n#endif&quot;</span><span class="p">,</span><span class="nx">linear_to_gamma_fragment</span><span class="o">:</span><span class="s2">&quot;#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif&quot;</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L350" class="blob-num js-line-number" data-line-number="350"></td>
        <td id="LC350" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="o">=</span><span class="p">{</span><span class="nx">merge</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]),</span><span class="nx">d</span><span class="p">)</span><span class="nx">e</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="nx">e</span><span class="p">},</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span> <span class="k">in</span> <span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">{},</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">])</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">c</span><span class="p">],</span><span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">clone</span><span class="p">()</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">slice</span><span class="p">()</span><span class="o">:</span><span class="nx">d</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">}};</span></td>
      </tr>
      <tr>
        <td id="L351" class="blob-num js-line-number" data-line-number="351"></td>
        <td id="LC351" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="o">=</span><span class="p">{</span><span class="nx">common</span><span class="o">:</span><span class="p">{</span><span class="nx">diffuse</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">15658734</span><span class="p">)},</span><span class="nx">opacity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">map</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">offsetRepeat</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v4&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)},</span><span class="nx">lightMap</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">specularMap</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">envMap</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">flipEnvMap</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:-</span><span class="mi">1</span><span class="p">},</span><span class="nx">useRefract</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">reflectivity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">refractionRatio</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mf">0.98</span><span class="p">},</span><span class="nx">combine</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">morphTargetInfluences</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">}},</span><span class="nx">bump</span><span class="o">:</span><span class="p">{</span><span class="nx">bumpMap</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L352" class="blob-num js-line-number" data-line-number="352"></td>
        <td id="LC352" class="blob-code js-file-line"><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">bumpScale</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">}},</span><span class="nx">normalmap</span><span class="o">:</span><span class="p">{</span><span class="nx">normalMap</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">normalScale</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v2&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)}},</span><span class="nx">fog</span><span class="o">:</span><span class="p">{</span><span class="nx">fogDensity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mf">2.5</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">},</span><span class="nx">fogNear</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">fogFar</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="nx">E3</span><span class="p">},</span><span class="nx">fogColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">)}},</span><span class="nx">lights</span><span class="o">:</span><span class="p">{</span><span class="nx">ambientLightColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">directionalLightDirection</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">directionalLightColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">hemisphereLightDirection</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">hemisphereLightSkyColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L353" class="blob-num js-line-number" data-line-number="353"></td>
        <td id="LC353" class="blob-code js-file-line"><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">hemisphereLightGroundColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">pointLightColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">pointLightPosition</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">pointLightDistance</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv1&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spotLightColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spotLightPosition</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spotLightDirection</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spotLightDistance</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv1&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spotLightAngleCos</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv1&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spotLightExponent</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv1&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]}},</span><span class="nx">particle</span><span class="o">:</span><span class="p">{</span><span class="nx">psColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">15658734</span><span class="p">)},</span><span class="nx">opacity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">size</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L354" class="blob-num js-line-number" data-line-number="354"></td>
        <td id="LC354" class="blob-code js-file-line"><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">scale</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">map</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">fogDensity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mf">2.5</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">},</span><span class="nx">fogNear</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">fogFar</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="nx">E3</span><span class="p">},</span><span class="nx">fogColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">)}},</span><span class="nx">shadowmap</span><span class="o">:</span><span class="p">{</span><span class="nx">shadowMap</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;tv&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">shadowMapSize</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v2v&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">shadowBias</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv1&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">shadowDarkness</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;fv1&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]},</span><span class="nx">shadowMatrix</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;m4v&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="p">[]}}};</span></td>
      </tr>
      <tr>
        <td id="L355" class="blob-num js-line-number" data-line-number="355"></td>
        <td id="LC355" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderLib</span><span class="o">=</span><span class="p">{</span><span class="nx">basic</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">merge</span><span class="p">([</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">common</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">fog</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">shadowmap</span><span class="p">]),</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_vertex</span><span class="p">,</span><span class="s2">&quot;void main() {&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_vertex</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L356" class="blob-num js-line-number" data-line-number="356"></td>
        <td id="LC356" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinbase_vertex</span><span class="p">,</span><span class="s2">&quot;#ifdef USE_ENVMAP&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphnormal_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinnormal_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">defaultnormal_vertex</span><span class="p">,</span><span class="s2">&quot;#endif&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">default_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">worldpos_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_vertex</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform vec3 diffuse;\nuniform float opacity;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_pars_fragment</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L357" class="blob-num js-line-number" data-line-number="357"></td>
        <td id="LC357" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">specularmap_pars_fragment</span><span class="p">,</span><span class="s2">&quot;void main() {\ngl_FragColor = vec4( diffuse, opacity );&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">alphatest_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">specularmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_fragment</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L358" class="blob-num js-line-number" data-line-number="358"></td>
        <td id="LC358" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">linear_to_gamma_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_fragment</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)},</span><span class="nx">lambert</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">merge</span><span class="p">([</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">common</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">fog</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">lights</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">shadowmap</span><span class="p">,{</span><span class="nx">ambient</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">)},</span><span class="nx">emissive</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">)},</span><span class="nx">wrapRGB</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v3&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)}}]),</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L359" class="blob-num js-line-number" data-line-number="359"></td>
        <td id="LC359" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lights_lambert_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_vertex</span><span class="p">,</span><span class="s2">&quot;void main() {&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphnormal_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinbase_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinnormal_vertex</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L360" class="blob-num js-line-number" data-line-number="360"></td>
        <td id="LC360" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">defaultnormal_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">default_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">worldpos_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lights_lambert_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_vertex</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_pars_fragment</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L361" class="blob-num js-line-number" data-line-number="361"></td>
        <td id="LC361" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">specularmap_pars_fragment</span><span class="p">,</span><span class="s2">&quot;void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">alphatest_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">specularmap_fragment</span><span class="p">,</span><span class="s2">&quot;#ifdef DOUBLE_SIDED\nif ( gl_FrontFacing )\ngl_FragColor.xyz *= vLightFront;\nelse\ngl_FragColor.xyz *= vLightBack;\n#else\ngl_FragColor.xyz *= vLightFront;\n#endif&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_fragment</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L362" class="blob-num js-line-number" data-line-number="362"></td>
        <td id="LC362" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">linear_to_gamma_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_fragment</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)},</span><span class="nx">phong</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">merge</span><span class="p">([</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">common</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">bump</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">normalmap</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">fog</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">lights</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">shadowmap</span><span class="p">,{</span><span class="nx">ambient</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">)},</span><span class="nx">emissive</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">)},</span><span class="nx">specular</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L363" class="blob-num js-line-number" data-line-number="363"></td>
        <td id="LC363" class="blob-code js-file-line"><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">1118481</span><span class="p">)},</span><span class="nx">shininess</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">30</span><span class="p">},</span><span class="nx">wrapRGB</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v3&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)}}]),</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;#define PHONG\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lights_phong_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_vertex</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L364" class="blob-num js-line-number" data-line-number="364"></td>
        <td id="LC364" class="blob-code js-file-line"><span class="s2">&quot;void main() {&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphnormal_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinbase_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinnormal_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">defaultnormal_vertex</span><span class="p">,</span><span class="s2">&quot;vNormal = normalize( transformedNormal );&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">default_vertex</span><span class="p">,</span><span class="s2">&quot;vViewPosition = -mvPosition.xyz;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">worldpos_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_vertex</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L365" class="blob-num js-line-number" data-line-number="365"></td>
        <td id="LC365" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lights_phong_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_vertex</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lights_phong_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_fragment</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L366" class="blob-num js-line-number" data-line-number="366"></td>
        <td id="LC366" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">bumpmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">normalmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">specularmap_pars_fragment</span><span class="p">,</span><span class="s2">&quot;void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">alphatest_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">specularmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lights_phong_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">lightmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">envmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">linear_to_gamma_fragment</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L367" class="blob-num js-line-number" data-line-number="367"></td>
        <td id="LC367" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_fragment</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)},</span><span class="nx">particle_basic</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">merge</span><span class="p">([</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">particle</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">shadowmap</span><span class="p">]),</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform float size;\nuniform float scale;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_vertex</span><span class="p">,</span><span class="s2">&quot;void main() {&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_vertex</span><span class="p">,</span><span class="s2">&quot;vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L368" class="blob-num js-line-number" data-line-number="368"></td>
        <td id="LC368" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">worldpos_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_vertex</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform vec3 psColor;\nuniform float opacity;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_particle_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_fragment</span><span class="p">,</span><span class="s2">&quot;void main() {\ngl_FragColor = vec4( psColor, opacity );&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">map_particle_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">alphatest_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_fragment</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L369" class="blob-num js-line-number" data-line-number="369"></td>
        <td id="LC369" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_fragment</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)},</span><span class="nx">dashed</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">merge</span><span class="p">([</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">common</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">fog</span><span class="p">,{</span><span class="nx">scale</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">dashSize</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">totalSize</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="p">}}]),</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_vertex</span><span class="p">,</span><span class="s2">&quot;void main() {&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_vertex</span><span class="p">,</span><span class="s2">&quot;vLineDistance = scale * lineDistance;\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L370" class="blob-num js-line-number" data-line-number="370"></td>
        <td id="LC370" class="blob-code js-file-line"><span class="nx">fragmentShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_pars_fragment</span><span class="p">,</span><span class="s2">&quot;void main() {\nif ( mod( vLineDistance, totalSize ) &gt; dashSize ) {\ndiscard;\n}\ngl_FragColor = vec4( diffuse, opacity );&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">color_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_fragment</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)},</span><span class="nx">depth</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="p">{</span><span class="nx">mNear</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">mFar</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">2</span><span class="nx">E3</span><span class="p">},</span><span class="nx">opacity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L371" class="blob-num js-line-number" data-line-number="371"></td>
        <td id="LC371" class="blob-code js-file-line"><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">}},</span><span class="nx">vertexShader</span><span class="o">:</span><span class="s2">&quot;void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}&quot;</span><span class="p">,</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}&quot;</span><span class="p">},</span><span class="nx">normal</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="p">{</span><span class="nx">opacity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">}},</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;varying vec3 vNormal;&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_pars_vertex</span><span class="p">,</span><span class="s2">&quot;void main() {\nvNormal = normalize( normalMatrix * normal );&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L372" class="blob-num js-line-number" data-line-number="372"></td>
        <td id="LC372" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">default_vertex</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}&quot;</span><span class="p">},</span><span class="nx">normalmap</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">merge</span><span class="p">([</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">fog</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">lights</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsLib</span><span class="p">.</span><span class="nx">shadowmap</span><span class="p">,{</span><span class="nx">enableAO</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">enableDiffuse</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">enableSpecular</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">enableReflection</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">enableDisplacement</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L373" class="blob-num js-line-number" data-line-number="373"></td>
        <td id="LC373" class="blob-code js-file-line"><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">tDisplacement</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">tDiffuse</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">tCube</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">tNormal</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">tSpecular</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">tAO</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">uNormalScale</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v2&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)},</span><span class="nx">uDisplacementBias</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">uDisplacementScale</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">uDiffuseColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">)},</span><span class="nx">uSpecularColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">1118481</span><span class="p">)},</span><span class="nx">uAmbientColor</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">)},</span><span class="nx">uShininess</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L374" class="blob-num js-line-number" data-line-number="374"></td>
        <td id="LC374" class="blob-code js-file-line"><span class="nx">value</span><span class="o">:</span><span class="mi">30</span><span class="p">},</span><span class="nx">uOpacity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">useRefract</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;i&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">uRefractionRatio</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mf">0.98</span><span class="p">},</span><span class="nx">uReflectivity</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="mf">0.5</span><span class="p">},</span><span class="nx">uOffset</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v2&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)},</span><span class="nx">uRepeat</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v2&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)},</span><span class="nx">wrapRGB</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;v3&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)}}]),</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform vec2 uNormalScale;\nuniform bool useRefract;\nuniform float uRefractionRatio;\nuniform float uReflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS &gt; 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L375" class="blob-num js-line-number" data-line-number="375"></td>
        <td id="LC375" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_pars_fragment</span><span class="p">,</span><span class="s2">&quot;void main() {\ngl_FragColor = vec4( vec3( 1.0 ), uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\n#ifdef FLIP_SIDED\nfinalNormal = -finalNormal;\n#endif\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS &gt; 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i &lt; MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 pointVector = lPosition.xyz + vViewPosition.xyz;\nfloat pointDistance = 1.0;\nif ( pointLightDistance[ i ] &gt; 0.0 )\npointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\npointVector = normalize( pointVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n#else\npointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\nvec3 spotDiffuse = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i &lt; MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 spotVector = lPosition.xyz + vViewPosition.xyz;\nfloat spotDistance = 1.0;\nif ( spotLightDistance[ i ] &gt; 0.0 )\nspotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\nspotVector = normalize( spotVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect &gt; spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\n#endif\nspotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\nvec3 spotHalfVector = normalize( spotVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS &gt; 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i &lt; MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i &lt; MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += uDiffuseColor * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS &gt; 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS &gt; 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS &gt; 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS &gt; 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\n#endif\nif ( enableReflection ) {\nvec3 vReflect;\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, normal, uRefractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, normal );\n}\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\n}&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L376" class="blob-num js-line-number" data-line-number="376"></td>
        <td id="LC376" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">linear_to_gamma_fragment</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">fog_fragment</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\nuniform bool enableDisplacement;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L377" class="blob-num js-line-number" data-line-number="377"></td>
        <td id="LC377" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">shadowmap_pars_vertex</span><span class="p">,</span><span class="s2">&quot;void main() {&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinbase_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinnormal_vertex</span><span class="p">,</span><span class="s2">&quot;#ifdef USE_SKINNING\nvNormal = normalize( normalMatrix * skinnedNormal.xyz );\nvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\nvTangent = normalize( normalMatrix * skinnedTangent.xyz );\n#else\nvNormal = normalize( normalMatrix * normal );\nvTangent = normalize( normalMatrix * tangent.xyz );\n#endif\nvBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\nvUv = uv * uRepeat + uOffset;\nvec3 displacedPosition;\n#ifdef VERTEX_TEXTURES\nif ( enableDisplacement ) {\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\ndisplacedPosition = position + normalize( normal ) * df;\n} else {\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n}\n#else\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n#endif\nvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\nvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\nvWorldPosition = worldPosition.xyz;\nvViewPosition = -mvPosition.xyz;\n#ifdef USE_SHADOWMAP\nfor( int i = 0; i &lt; MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif\n}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)},</span></td>
      </tr>
      <tr>
        <td id="L378" class="blob-num js-line-number" data-line-number="378"></td>
        <td id="LC378" class="blob-code js-file-line"><span class="nx">cube</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="p">{</span><span class="nx">tCube</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:</span><span class="kc">null</span><span class="p">},</span><span class="nx">tFlip</span><span class="o">:</span><span class="p">{</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;f&quot;</span><span class="p">,</span><span class="nx">value</span><span class="o">:-</span><span class="mi">1</span><span class="p">}},</span><span class="nx">vertexShader</span><span class="o">:</span><span class="s2">&quot;varying vec3 vWorldPosition;\nvoid main() {\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\nvWorldPosition = worldPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}&quot;</span><span class="p">,</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\nvoid main() {\ngl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n}&quot;</span><span class="p">},</span></td>
      </tr>
      <tr>
        <td id="L379" class="blob-num js-line-number" data-line-number="379"></td>
        <td id="LC379" class="blob-code js-file-line"><span class="nx">depthRGBA</span><span class="o">:</span><span class="p">{</span><span class="nx">uniforms</span><span class="o">:</span><span class="p">{},</span><span class="nx">vertexShader</span><span class="o">:</span><span class="p">[</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_pars_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_pars_vertex</span><span class="p">,</span><span class="s2">&quot;void main() {&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinbase_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">morphtarget_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">skinning_vertex</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderChunk</span><span class="p">.</span><span class="nx">default_vertex</span><span class="p">,</span><span class="s2">&quot;}&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}&quot;</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderer</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">buffer</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">attributes</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="o">=</span><span class="p">[]);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span> <span class="k">in</span> <span class="nx">d</span><span class="p">.</span><span class="nx">attributes</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">f</span><span class="p">.</span><span class="nx">__webglInitialized</span><span class="o">||</span><span class="nx">f</span><span class="p">.</span><span class="nx">createUniqueBuffers</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">__webglInitialized</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="s2">&quot;v2&quot;</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="nx">h</span><span class="o">=</span><span class="mi">2</span><span class="o">:</span><span class="s2">&quot;v3&quot;</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="nx">h</span><span class="o">=</span><span class="mi">3</span><span class="o">:</span><span class="s2">&quot;v4&quot;</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span></td>
      </tr>
      <tr>
        <td id="L380" class="blob-num js-line-number" data-line-number="380"></td>
        <td id="LC380" class="blob-code js-file-line"><span class="nx">h</span><span class="o">=</span><span class="mi">4</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="mi">3</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">belongsToAttribute</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">)}}}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces3</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces4</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="mi">4</span><span class="o">*</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="mi">1</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="mi">4</span><span class="o">*</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">l</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">n</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">:!</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="p">);</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__normalArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="p">));</span><span class="nx">c</span><span class="p">.</span><span class="nx">hasTangents</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__tangentArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="nx">i</span><span class="p">));</span><span class="nx">n</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L381" class="blob-num js-line-number" data-line-number="381"></td>
        <td id="LC381" class="blob-code js-file-line"><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__colorArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">__uvArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">.</span><span class="nx">length</span><span class="o">||</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">__uv2Array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">i</span><span class="p">)}</span><span class="nx">b</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__skinIndexArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="nx">i</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">__skinWeightArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="nx">i</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">__faceArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">j</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">__lineArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">g</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">numMorphTargets</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">__morphTargetsArrays</span><span class="o">=</span><span class="p">[];</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">numMorphTargets</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span></td>
      </tr>
      <tr>
        <td id="L382" class="blob-num js-line-number" data-line-number="382"></td>
        <td id="LC382" class="blob-code js-file-line"><span class="nx">m</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">__morphTargetsArrays</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="p">))}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">numMorphNormals</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">__morphNormalsArrays</span><span class="o">=</span><span class="p">[];</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">numMorphNormals</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">__morphNormalsArrays</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="p">))}</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFaceCount</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">j</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglLineCount</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">g</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">attributes</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="o">=</span><span class="p">[]);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span> <span class="k">in</span> <span class="nx">d</span><span class="p">.</span><span class="nx">attributes</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">p</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="p">{},</span><span class="nx">q</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">q</span> <span class="k">in</span> <span class="nx">j</span><span class="p">)</span><span class="nx">c</span><span class="p">[</span><span class="nx">q</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">q</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglInitialized</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">createUniqueBuffers</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglInitialized</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="s2">&quot;v2&quot;</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="mi">2</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L383" class="blob-num js-line-number" data-line-number="383"></td>
        <td id="LC383" class="blob-code js-file-line"><span class="s2">&quot;v3&quot;</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="mi">3</span><span class="o">:</span><span class="s2">&quot;v4&quot;</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="nx">g</span><span class="o">=</span><span class="mi">4</span><span class="o">:</span><span class="s2">&quot;c&quot;</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">3</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">i</span><span class="o">*</span><span class="nx">g</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">(),</span><span class="nx">c</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">belongsToAttribute</span><span class="o">=</span><span class="nx">p</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">__original</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">)}}</span><span class="nx">a</span><span class="p">.</span><span class="nx">__inittedArrays</span><span class="o">=!</span><span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">material</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">]</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="p">}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">envMap</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="o">?!</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">shading</span><span class="o">===</span></td>
      </tr>
      <tr>
        <td id="L384" class="blob-num js-line-number" data-line-number="384"></td>
        <td id="LC384" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FlatShading</span><span class="p">}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">bumpMap</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">normalMap</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">specularMap</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="o">?!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">Ab</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">||</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">Ab</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=!</span><span class="mi">0</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">i</span><span class="p">(){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span> <span class="k">in</span> <span class="nx">Ab</span><span class="p">)</span><span class="nx">Ab</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">disableVertexAttribArray</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">Ab</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=!</span><span class="mi">1</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">j</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="kd">function</span> <span class="nx">l</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]}</span><span class="kd">function</span> <span class="nx">m</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">ya</span><span class="o">=</span><span class="nx">qa</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">pb</span><span class="o">=</span><span class="nx">ub</span><span class="o">=</span><span class="nx">T</span><span class="o">=</span><span class="nx">da</span><span class="o">=</span><span class="nx">ab</span><span class="o">=</span><span class="nx">xa</span><span class="o">=</span><span class="nx">aa</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">yb</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L385" class="blob-num js-line-number" data-line-number="385"></td>
        <td id="LC385" class="blob-code js-file-line"><span class="nx">c</span><span class="p">,</span><span class="nx">Xb</span><span class="p">,</span><span class="nx">Jb</span><span class="p">),</span><span class="nx">ya</span><span class="o">=</span><span class="nx">qa</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">pb</span><span class="o">=</span><span class="nx">ub</span><span class="o">=</span><span class="nx">T</span><span class="o">=</span><span class="nx">da</span><span class="o">=</span><span class="nx">ab</span><span class="o">=</span><span class="nx">xa</span><span class="o">=</span><span class="nx">aa</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">yb</span><span class="o">=!</span><span class="mi">0</span><span class="p">}</span><span class="kd">function</span> <span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="kd">var</span> <span class="nx">k</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">m</span><span class="p">;</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="o">=-</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="nx">l</span><span class="o">!==</span><span class="nx">b</span><span class="p">;</span><span class="nx">l</span><span class="o">+=</span><span class="nx">m</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">k</span><span class="p">.</span><span class="nx">render</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">object</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">buffer</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">)</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">k</span><span class="o">=</span><span class="nx">k</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">k</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="nx">D</span><span class="p">.</span><span class="nx">setBlending</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">blending</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendSrc</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendDst</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">depthTest</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">setDepthWrite</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">depthWrite</span><span class="p">);</span><span class="nx">K</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">polygonOffsetFactor</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">polygonOffsetUnits</span><span class="p">)}</span><span class="nx">D</span><span class="p">.</span><span class="nx">setMaterialFaces</span><span class="p">(</span><span class="nx">k</span><span class="p">);</span><span class="nx">j</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="o">?</span><span class="nx">D</span><span class="p">.</span><span class="nx">renderBufferDirect</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L386" class="blob-num js-line-number" data-line-number="386"></td>
        <td id="LC386" class="blob-code js-file-line"><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">)</span><span class="o">:</span><span class="nx">D</span><span class="p">.</span><span class="nx">renderBuffer</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">k</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">visible</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">g</span><span class="p">)</span><span class="k">continue</span><span class="p">;</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="nx">D</span><span class="p">.</span><span class="nx">setBlending</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">blending</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">blendSrc</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">blendDst</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">depthTest</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">setDepthWrite</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">depthWrite</span><span class="p">);</span><span class="nx">K</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">polygonOffsetFactor</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">polygonOffsetUnits</span><span class="p">)}</span><span class="nx">D</span><span class="p">.</span><span class="nx">renderImmediateObject</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">k</span><span class="p">)}}</span><span class="kd">function</span> <span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L387" class="blob-num js-line-number" data-line-number="387"></td>
        <td id="LC387" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">_normalMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;dispose&quot;</span><span class="p">,</span><span class="nx">lc</span><span class="p">)),</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">f</span><span class="p">.</span><span class="nx">attributes</span><span class="p">)</span><span class="nx">j</span><span class="o">=</span><span class="s2">&quot;index&quot;</span><span class="o">===</span><span class="nx">i</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">g</span><span class="p">.</span><span class="nx">numItems</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">numItems</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">array</span><span class="p">.</span><span class="nx">length</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">buffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">buffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">STATIC_DRAW</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L388" class="blob-num js-line-number" data-line-number="388"></td>
        <td id="LC388" class="blob-code js-file-line"><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="kd">var</span> <span class="nx">m</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">r</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="p">{};</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">h</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="o">=</span><span class="p">{};</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">l</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">v</span><span class="o">?</span><span class="nx">l</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">j</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">[</span><span class="nx">n</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">hash</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">counter</span><span class="o">:</span><span class="mi">0</span><span class="p">}),</span><span class="nx">r</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">hash</span><span class="o">+</span><span class="s2">&quot;_&quot;</span><span class="o">+</span><span class="nx">j</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">counter</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">faces3</span><span class="o">:</span><span class="p">[],</span><span class="nx">faces4</span><span class="o">:</span><span class="p">[],</span><span class="nx">materialIndex</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">vertices</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">numMorphTargets</span><span class="o">:</span><span class="nx">s</span><span class="p">,</span><span class="nx">numMorphNormals</span><span class="o">:</span><span class="nx">t</span><span class="p">}),</span><span class="nx">p</span><span class="o">=</span><span class="nx">l</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="mi">3</span><span class="o">:</span><span class="mi">4</span><span class="p">,</span><span class="mi">65535</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">r</span><span class="p">].</span><span class="nx">vertices</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L389" class="blob-num js-line-number" data-line-number="389"></td>
        <td id="LC389" class="blob-code js-file-line"><span class="nx">p</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">counter</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">hash</span><span class="o">+</span><span class="s2">&quot;_&quot;</span><span class="o">+</span><span class="nx">j</span><span class="p">[</span><span class="nx">n</span><span class="p">].</span><span class="nx">counter</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">faces3</span><span class="o">:</span><span class="p">[],</span><span class="nx">faces4</span><span class="o">:</span><span class="p">[],</span><span class="nx">materialIndex</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">vertices</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">numMorphTargets</span><span class="o">:</span><span class="nx">s</span><span class="p">,</span><span class="nx">numMorphNormals</span><span class="o">:</span><span class="nx">t</span><span class="p">})),</span><span class="nx">l</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">r</span><span class="p">].</span><span class="nx">faces3</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">r</span><span class="p">].</span><span class="nx">faces4</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">),</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">r</span><span class="p">].</span><span class="nx">vertices</span><span class="o">+=</span><span class="nx">p</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroupsList</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span> <span class="k">in</span> <span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">id</span><span class="o">=</span><span class="nx">Ha</span><span class="o">++</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroupsList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">g</span><span class="p">])}</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span> <span class="k">in</span> <span class="nx">f</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="o">!</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L390" class="blob-num js-line-number" data-line-number="390"></td>
        <td id="LC390" class="blob-code js-file-line"><span class="nx">g</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglTangentBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglUVBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglUV2Buffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglSkinIndicesBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglSkinWeightsBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglFaceBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglLineBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">s</span><span class="o">=</span><span class="nx">j</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">numMorphTargets</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="o">=</span><span class="p">[];</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">numMorphTargets</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">())}</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">numMorphNormals</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglMorphNormalsBuffers</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L391" class="blob-num js-line-number" data-line-number="391"></td>
        <td id="LC391" class="blob-code js-file-line"><span class="p">[];</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">numMorphNormals</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglMorphNormalsBuffers</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">())}</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">geometries</span><span class="o">++</span><span class="p">;</span><span class="nx">d</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetsNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">elementsNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">uvsNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">tangentsNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">}}</span><span class="k">else</span> <span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">||</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">(),</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">(),</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">(),</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">geometries</span><span class="o">++</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L392" class="blob-num js-line-number" data-line-number="392"></td>
        <td id="LC392" class="blob-code js-file-line"><span class="nx">g</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">__colorArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">__normalArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglVertexCount</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">||</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">(),</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">(),</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglLineDistanceBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">(),</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">geometries</span><span class="o">++</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">__colorArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L393" class="blob-num js-line-number" data-line-number="393"></td>
        <td id="LC393" class="blob-code js-file-line"><span class="nx">i</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">__lineDistanceArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">1</span><span class="o">*</span><span class="nx">i</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglLineCount</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">lineDistancesNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="o">&amp;&amp;!</span><span class="nx">f</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">(),</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">(),</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">geometries</span><span class="o">++</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">__colorArray</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">i</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">__sortArray</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglParticleCount</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">c</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L394" class="blob-num js-line-number" data-line-number="394"></td>
        <td id="LC394" class="blob-code js-file-line"><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglActive</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="p">)</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span> <span class="k">in</span> <span class="nx">f</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">)}</span><span class="k">else</span> <span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="o">?</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">q</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">a</span><span class="p">))</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ImmediateRenderObject</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">immediateRenderCallback</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">id</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">opaque</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L395" class="blob-num js-line-number" data-line-number="395"></td>
        <td id="LC395" class="blob-code js-file-line"><span class="nx">transparent</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">z</span><span class="o">:</span><span class="mi">0</span><span class="p">})</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">__webglSprites</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">__webglFlares</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglActive</span><span class="o">=!</span><span class="mi">0</span><span class="p">}}</span><span class="kd">function</span> <span class="nx">q</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">id</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">buffer</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">object</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">opaque</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">transparent</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">z</span><span class="o">:</span><span class="mi">0</span><span class="p">})}</span><span class="kd">function</span> <span class="nx">r</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">needsUpdate</span><span class="p">)</span><span class="k">return</span><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span><span class="o">!</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">s</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">}</span><span class="kd">function</span> <span class="nx">v</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="o">||</span><span class="nx">a</span> <span class="k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L396" class="blob-num js-line-number" data-line-number="396"></td>
        <td id="LC396" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="o">?</span><span class="nx">z</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sprite</span><span class="o">?</span><span class="nx">C</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">__webglSprites</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="o">?</span><span class="nx">C</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">__webglFlares</span><span class="p">,</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ImmediateRenderObject</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">immediateRenderCallback</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">z</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">delete</span> <span class="nx">a</span><span class="p">.</span><span class="nx">__webglActive</span><span class="p">}</span><span class="kd">function</span> <span class="nx">z</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">--</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">object</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">C</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">--</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">F</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">fa</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">program</span><span class="o">&amp;&amp;</span><span class="nx">vc</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">D</span><span class="p">.</span><span class="nx">initMaterial</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L397" class="blob-num js-line-number" data-line-number="397"></td>
        <td id="LC397" class="blob-code js-file-line"><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">&amp;&amp;!</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphTargetInfluences</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphTargetInfluences</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="nx">D</span><span class="p">.</span><span class="nx">maxMorphTargets</span><span class="p">));</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">program</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">;</span><span class="nx">g</span><span class="o">!==</span><span class="nx">qa</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">useProgram</span><span class="p">(</span><span class="nx">g</span><span class="p">),</span><span class="nx">qa</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">f</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="o">!==</span><span class="nx">pb</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">pb</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span><span class="nx">f</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">||</span><span class="nx">a</span><span class="o">!==</span><span class="nx">ya</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">),</span><span class="nx">a</span><span class="o">!==</span><span class="nx">ya</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">ya</span><span class="o">=</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">skinning</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">Bb</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">useVertexTexture</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="nx">h</span><span class="p">.</span><span class="nx">boneTexture</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">H</span><span class="p">();</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">boneTexture</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">setTexture</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">boneTexture</span><span class="p">,</span><span class="nx">j</span><span class="p">)}}</span><span class="k">else</span> <span class="kc">null</span><span class="o">!==</span><span class="nx">h</span><span class="p">.</span><span class="nx">boneGlobalMatrices</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">boneGlobalMatrices</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L398" class="blob-num js-line-number" data-line-number="398"></td>
        <td id="LC398" class="blob-code js-file-line"><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">boneMatrices</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">fog</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">fogColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Fog</span><span class="o">?</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">fogNear</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">fogFar</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">far</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">FogExp2</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">fogDensity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">density</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">lights</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">yb</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">m</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">Ib</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">directional</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">directional</span><span class="p">.</span><span class="nx">positions</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">positions</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">distances</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">positions</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">distances</span><span class="p">,</span><span class="nx">E</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">directions</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L399" class="blob-num js-line-number" data-line-number="399"></td>
        <td id="LC399" class="blob-code js-file-line"><span class="nx">s</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">anglesCos</span><span class="p">,</span><span class="nx">L</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">exponents</span><span class="p">,</span><span class="nx">V</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">hemi</span><span class="p">.</span><span class="nx">skyColors</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">hemi</span><span class="p">.</span><span class="nx">groundColors</span><span class="p">,</span><span class="nx">M</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">hemi</span><span class="p">.</span><span class="nx">positions</span><span class="p">,</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">ea</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">T</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">aa</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">da</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">R</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">S</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">P</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">ba</span><span class="o">=</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">r</span><span class="o">=</span><span class="nx">ba</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">m</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="o">||</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">intensity</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">distance</span><span class="p">,</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">AmbientLight</span><span class="o">?</span><span class="nx">m</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">D</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">?</span><span class="p">(</span><span class="nx">j</span><span class="o">+=</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">l</span><span class="o">+=</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">n</span><span class="o">+=</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">j</span><span class="o">+=</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">l</span><span class="o">+=</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">n</span><span class="o">+=</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="p">))</span><span class="o">:</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="o">?</span><span class="p">(</span><span class="nx">da</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">Ga</span><span class="p">),</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">normalize</span><span class="p">(),</span></td>
      </tr>
      <tr>
        <td id="L400" class="blob-num js-line-number" data-line-number="400"></td>
        <td id="LC400" class="blob-code js-file-line"><span class="mi">0</span><span class="o">===</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">z</span><span class="o">||</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">O</span><span class="p">,</span><span class="nx">v</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">=</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">v</span><span class="p">[</span><span class="nx">m</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">v</span><span class="p">[</span><span class="nx">m</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">?</span><span class="nx">I</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="o">*</span><span class="nx">q</span><span class="p">)</span><span class="o">:</span><span class="nx">G</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">),</span><span class="nx">O</span><span class="o">+=</span><span class="mi">1</span><span class="p">)))</span><span class="o">:</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="o">?</span><span class="p">(</span><span class="nx">R</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">ba</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">ea</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">?</span><span class="nx">I</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span><span class="nx">ba</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="o">*</span><span class="nx">q</span><span class="p">)</span><span class="o">:</span><span class="nx">G</span><span class="p">(</span><span class="nx">z</span><span class="p">,</span><span class="nx">ba</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">),</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">y</span><span class="p">[</span><span class="nx">ba</span><span class="p">]</span><span class="o">=</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">y</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">y</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">A</span><span class="p">[</span><span class="nx">ea</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">,</span><span class="nx">ea</span><span class="o">+=</span><span class="mi">1</span><span class="p">))</span><span class="o">:</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="o">?</span><span class="p">(</span><span class="nx">S</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">ba</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">T</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">?</span><span class="nx">I</span><span class="p">(</span><span class="nx">B</span><span class="p">,</span><span class="nx">ba</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="o">*</span><span class="nx">q</span><span class="p">)</span><span class="o">:</span><span class="nx">G</span><span class="p">(</span><span class="nx">B</span><span class="p">,</span><span class="nx">ba</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">),</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">F</span><span class="p">[</span><span class="nx">ba</span><span class="p">]</span><span class="o">=</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">F</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">F</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">C</span><span class="p">[</span><span class="nx">T</span><span class="p">]</span><span class="o">=</span><span class="nx">r</span><span class="p">,</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">Ga</span><span class="p">),</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L401" class="blob-num js-line-number" data-line-number="401"></td>
        <td id="LC401" class="blob-code js-file-line"><span class="nx">Ca</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">Ga</span><span class="p">),</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">E</span><span class="p">[</span><span class="nx">ba</span><span class="p">]</span><span class="o">=</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">E</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">E</span><span class="p">[</span><span class="nx">ba</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">J</span><span class="p">[</span><span class="nx">T</span><span class="p">]</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">angle</span><span class="p">),</span><span class="nx">L</span><span class="p">[</span><span class="nx">T</span><span class="p">]</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">exponent</span><span class="p">,</span><span class="nx">T</span><span class="o">+=</span><span class="mi">1</span><span class="p">))</span><span class="o">:</span><span class="nx">m</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">HemisphereLight</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">P</span><span class="o">+=</span><span class="mi">1</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">normalize</span><span class="p">(),</span><span class="mi">0</span><span class="o">===</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">z</span><span class="o">||</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">aa</span><span class="p">,</span><span class="nx">M</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">M</span><span class="p">[</span><span class="nx">r</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">M</span><span class="p">[</span><span class="nx">r</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">groundColor</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">?</span><span class="p">(</span><span class="nx">q</span><span class="o">*=</span><span class="nx">q</span><span class="p">,</span><span class="nx">I</span><span class="p">(</span><span class="nx">V</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">),</span><span class="nx">I</span><span class="p">(</span><span class="nx">K</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">q</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">G</span><span class="p">(</span><span class="nx">V</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">),</span><span class="nx">G</span><span class="p">(</span><span class="nx">K</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">q</span><span class="p">)),</span><span class="nx">aa</span><span class="o">+=</span><span class="mi">1</span><span class="p">))));</span><span class="nx">c</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">O</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="mi">3</span><span class="o">*</span><span class="nx">da</span><span class="p">);</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">ea</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="mi">3</span><span class="o">*</span><span class="nx">R</span><span class="p">);</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">z</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">T</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L402" class="blob-num js-line-number" data-line-number="402"></td>
        <td id="LC402" class="blob-code js-file-line"><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="mi">3</span><span class="o">*</span><span class="nx">S</span><span class="p">);</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">B</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">aa</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">V</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="mi">3</span><span class="o">*</span><span class="nx">P</span><span class="p">);</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">V</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">aa</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">K</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="mi">3</span><span class="o">*</span><span class="nx">P</span><span class="p">);</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">K</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">directional</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">O</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">ea</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">T</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">hemi</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">aa</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">ambient</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">ambient</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">ambient</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">yb</span><span class="o">=!</span><span class="mi">1</span><span class="p">}</span><span class="nx">c</span><span class="o">=</span><span class="nx">Ib</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">ambientLightColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">ambient</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">directionalLightColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">directional</span><span class="p">.</span><span class="nx">colors</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">directionalLightDirection</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">directional</span><span class="p">.</span><span class="nx">positions</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">pointLightColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">colors</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">pointLightPosition</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">positions</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">pointLightDistance</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L403" class="blob-num js-line-number" data-line-number="403"></td>
        <td id="LC403" class="blob-code js-file-line"><span class="nx">c</span><span class="p">.</span><span class="nx">point</span><span class="p">.</span><span class="nx">distances</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">spotLightColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">colors</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">spotLightPosition</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">positions</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">spotLightDistance</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">distances</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">spotLightDirection</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">directions</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">spotLightAngleCos</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">anglesCos</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">spotLightExponent</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">spot</span><span class="p">.</span><span class="nx">exponents</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">hemisphereLightSkyColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">hemi</span><span class="p">.</span><span class="nx">skyColors</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">hemisphereLightGroundColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">hemi</span><span class="p">.</span><span class="nx">groundColors</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">hemisphereLightDirection</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">hemi</span><span class="p">.</span><span class="nx">positions</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">||</span></td>
      </tr>
      <tr>
        <td id="L404" class="blob-num js-line-number" data-line-number="404"></td>
        <td id="LC404" class="blob-code js-file-line"><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="p">){</span><span class="nx">i</span><span class="p">.</span><span class="nx">opacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">opacity</span><span class="p">;</span><span class="nx">D</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">?</span><span class="nx">i</span><span class="p">.</span><span class="nx">diffuse</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copyGammaToLinear</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">)</span><span class="o">:</span><span class="nx">i</span><span class="p">.</span><span class="nx">diffuse</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">map</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">specularMap</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">specularMap</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">bumpMap</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">bumpMap</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">bumpMap</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">bumpScale</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">bumpScale</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">normalMap</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">normalMap</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">normalMap</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">normalScale</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">normalScale</span><span class="p">));</span><span class="kd">var</span> <span class="nx">X</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">map</span><span class="o">?</span><span class="nx">X</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">map</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">specularMap</span><span class="o">?</span><span class="nx">X</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">specularMap</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">normalMap</span><span class="o">?</span><span class="nx">X</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">normalMap</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">bumpMap</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">X</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">bumpMap</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">X</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">offset</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L405" class="blob-num js-line-number" data-line-number="405"></td>
        <td id="LC405" class="blob-code js-file-line"><span class="nx">X</span><span class="o">=</span><span class="nx">X</span><span class="p">.</span><span class="nx">repeat</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">offsetRepeat</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">X</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">X</span><span class="p">.</span><span class="nx">y</span><span class="p">));</span><span class="nx">i</span><span class="p">.</span><span class="nx">envMap</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">envMap</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">flipEnvMap</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">envMap</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="o">?</span><span class="mi">1</span><span class="o">:-</span><span class="mi">1</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">reflectivity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">reflectivity</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">refractionRatio</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">combine</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">combine</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">useRefract</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">envMap</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">envMap</span><span class="p">.</span><span class="nx">mapping</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeRefractionMapping</span><span class="p">}</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="o">?</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">diffuse</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">opacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">opacity</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineDashedMaterial</span><span class="o">?</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">diffuse</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">opacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L406" class="blob-num js-line-number" data-line-number="406"></td>
        <td id="LC406" class="blob-code js-file-line"><span class="nx">d</span><span class="p">.</span><span class="nx">opacity</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">dashSize</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">dashSize</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">totalSize</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">dashSize</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">gapSize</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">scale</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="o">?</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">psColor</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">opacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">opacity</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">size</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">height</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">map</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="o">?</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">shininess</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">shininess</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">?</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ambient</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copyGammaToLinear</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">ambient</span><span class="p">),</span><span class="nx">i</span><span class="p">.</span><span class="nx">emissive</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copyGammaToLinear</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">emissive</span><span class="p">),</span><span class="nx">i</span><span class="p">.</span><span class="nx">specular</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copyGammaToLinear</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">specular</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ambient</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">ambient</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L407" class="blob-num js-line-number" data-line-number="407"></td>
        <td id="LC407" class="blob-code js-file-line"><span class="nx">i</span><span class="p">.</span><span class="nx">emissive</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">emissive</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">specular</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">specular</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="p">))</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">?</span><span class="p">(</span><span class="nx">D</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">?</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ambient</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copyGammaToLinear</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">ambient</span><span class="p">),</span><span class="nx">i</span><span class="p">.</span><span class="nx">emissive</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copyGammaToLinear</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">emissive</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">ambient</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">ambient</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">emissive</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">emissive</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">wrapRGB</span><span class="p">))</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="o">?</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">mNear</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">near</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">mFar</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">far</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">opacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">opacity</span><span class="p">)</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">opacity</span><span class="p">.</span><span class="nx">value</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L408" class="blob-num js-line-number" data-line-number="408"></td>
        <td id="LC408" class="blob-code js-file-line"><span class="nx">d</span><span class="p">.</span><span class="nx">opacity</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="o">&amp;&amp;!</span><span class="nx">d</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">X</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">j</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="o">||</span><span class="nx">j</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="o">&amp;&amp;!</span><span class="nx">j</span><span class="p">.</span><span class="nx">shadowCascade</span><span class="p">))</span><span class="nx">i</span><span class="p">.</span><span class="nx">shadowMap</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">X</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">shadowMap</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">shadowMapSize</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">X</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">shadowMapSize</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">X</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">X</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">shadowBias</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">X</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">shadowBias</span><span class="p">,</span><span class="nx">X</span><span class="o">++</span><span class="p">}</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">uniformsList</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">X</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">X</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]])</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span><span class="s2">&quot;i&quot;</span><span class="o">===</span></td>
      </tr>
      <tr>
        <td id="L409" class="blob-num js-line-number" data-line-number="409"></td>
        <td id="LC409" class="blob-code js-file-line"><span class="nx">l</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;f&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;v2&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform2f</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;v3&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;v4&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform4f</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">w</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">b</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;iv1&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform1iv</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;iv&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform3iv</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;fv1&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform1fv</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;fv&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform3fv</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;v2v&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">));</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">s</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">l</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">s</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L410" class="blob-num js-line-number" data-line-number="410"></td>
        <td id="LC410" class="blob-code js-file-line"><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">y</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform2fv</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;v3v&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">));</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">s</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">l</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">s</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">s</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">z</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform3fv</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;v4v&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">4</span><span class="o">*</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">));</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">s</span><span class="o">=</span><span class="mi">4</span><span class="o">*</span><span class="nx">l</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">s</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">s</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">z</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">s</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">w</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform4fv</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;m4&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">)</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">)),</span></td>
      </tr>
      <tr>
        <td id="L411" class="blob-num js-line-number" data-line-number="411"></td>
        <td id="LC411" class="blob-code js-file-line"><span class="nx">j</span><span class="p">.</span><span class="nx">flattenToArray</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;m4v&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="o">*</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">));</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">flattenToArrayOffset</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">,</span><span class="mi">16</span><span class="o">*</span><span class="nx">l</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;t&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">j</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">H</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">j</span><span class="p">),</span><span class="nx">s</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">image</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">&amp;&amp;</span><span class="mi">6</span><span class="o">===</span><span class="nx">s</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">s</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">j</span><span class="p">,</span><span class="mi">6</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">__webglTextureCube</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;dispose&quot;</span><span class="p">,</span><span class="nx">gc</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">__webglTextureCube</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createTexture</span><span class="p">(),</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">textures</span><span class="o">++</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L412" class="blob-num js-line-number" data-line-number="412"></td>
        <td id="LC412" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="o">+</span><span class="nx">f</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">__webglTextureCube</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">pixelStorei</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">UNPACK_FLIP_Y_WEBGL</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">flipY</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CompressedTexture</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">6</span><span class="o">&gt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">D</span><span class="p">.</span><span class="nx">autoScaleCubemaps</span><span class="o">&amp;&amp;!</span><span class="nx">f</span><span class="o">?</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">j</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">image</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">z</span><span class="o">=</span><span class="nx">Ub</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">width</span><span class="o">&lt;=</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">height</span><span class="o">&lt;=</span><span class="nx">z</span><span class="o">||</span><span class="p">(</span><span class="nx">y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">height</span><span class="p">),</span><span class="nx">v</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">width</span><span class="o">*</span><span class="nx">z</span><span class="o">/</span><span class="nx">y</span><span class="p">),</span><span class="nx">z</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">height</span><span class="o">*</span><span class="nx">z</span><span class="o">/</span><span class="nx">y</span><span class="p">),</span><span class="nx">y</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">),</span><span class="nx">y</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">v</span><span class="p">,</span><span class="nx">y</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">z</span><span class="p">,</span><span class="nx">y</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">).</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">z</span><span class="p">),</span><span class="nx">t</span><span class="o">=</span><span class="nx">y</span><span class="p">),</span><span class="nx">n</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">image</span><span class="p">[</span><span class="nx">l</span><span class="p">];</span></td>
      </tr>
      <tr>
        <td id="L413" class="blob-num js-line-number" data-line-number="413"></td>
        <td id="LC413" class="blob-code js-file-line"><span class="nx">l</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="o">===</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">width</span><span class="o">&amp;</span><span class="nx">l</span><span class="p">.</span><span class="nx">width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">height</span><span class="o">&amp;</span><span class="nx">l</span><span class="p">.</span><span class="nx">height</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">s</span><span class="o">=</span><span class="nx">w</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">format</span><span class="p">);</span><span class="nx">t</span><span class="o">=</span><span class="nx">w</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span><span class="nx">N</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">n</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">6</span><span class="o">&gt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">){</span><span class="nx">z</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">].</span><span class="nx">mipmaps</span><span class="p">;</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">A</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">A</span><span class="p">;</span><span class="nx">y</span><span class="o">++</span><span class="p">)</span><span class="nx">v</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">y</span><span class="p">],</span><span class="nx">k</span><span class="p">.</span><span class="nx">compressedTexImage2D</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="o">+</span><span class="nx">l</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">data</span><span class="p">)}</span><span class="k">else</span> <span class="nx">k</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="o">+</span><span class="nx">l</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">j</span><span class="p">[</span><span class="nx">l</span><span class="p">]);</span><span class="nx">c</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">generateMipmap</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">onUpdate</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">onUpdate</span><span class="p">()}</span><span class="k">else</span> <span class="nx">k</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="o">+</span><span class="nx">f</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L414" class="blob-num js-line-number" data-line-number="414"></td>
        <td id="LC414" class="blob-code js-file-line"><span class="nx">c</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">__webglTextureCube</span><span class="p">)}</span><span class="k">else</span> <span class="nx">s</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">s</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="o">+</span><span class="nx">j</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">))</span><span class="o">:</span><span class="nx">D</span><span class="p">.</span><span class="nx">setTexture</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">j</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;tv&quot;</span><span class="o">===</span><span class="nx">l</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="o">=</span><span class="p">[]);</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">l</span><span class="p">]</span><span class="o">=</span><span class="nx">H</span><span class="p">();</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform1iv</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">s</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">_array</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">s</span><span class="o">&amp;&amp;</span><span class="nx">D</span><span class="p">.</span><span class="nx">setTexture</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">j</span><span class="p">)}</span><span class="k">else</span> <span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;THREE.WebGLRenderer: Unknown uniform type: &quot;</span><span class="o">+</span><span class="nx">l</span><span class="p">);</span><span class="k">if</span><span class="p">((</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L415" class="blob-num js-line-number" data-line-number="415"></td>
        <td id="LC415" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">envMap</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">h</span><span class="p">.</span><span class="nx">cameraPosition</span><span class="p">)</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">cameraPosition</span><span class="p">,</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">z</span><span class="p">);(</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">||</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="o">||</span><span class="nx">d</span><span class="p">.</span><span class="nx">skinning</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="kc">null</span><span class="o">!==</span><span class="nx">h</span><span class="p">.</span><span class="nx">viewMatrix</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">viewMatrix</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">elements</span><span class="p">)}</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">modelViewMatrix</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">normalMatrix</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniformMatrix3fv</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">normalMatrix</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">_normalMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L416" class="blob-num js-line-number" data-line-number="416"></td>
        <td id="LC416" class="blob-code js-file-line"><span class="kc">null</span><span class="o">!==</span><span class="nx">h</span><span class="p">.</span><span class="nx">modelMatrix</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">modelMatrix</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">elements</span><span class="p">);</span><span class="k">return</span> <span class="nx">g</span><span class="p">}</span><span class="kd">function</span> <span class="nx">H</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">fa</span><span class="p">;</span><span class="nx">a</span><span class="o">&gt;=</span><span class="nx">ib</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;WebGLRenderer: trying to use &quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot; texture units while this GPU supports only &quot;</span><span class="o">+</span><span class="nx">ib</span><span class="p">);</span><span class="nx">fa</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">}</span><span class="kd">function</span> <span class="nx">I</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">d</span><span class="p">}</span><span class="kd">function</span> <span class="nx">G</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">r</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">g</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="o">*</span><span class="nx">d</span><span class="p">}</span><span class="kd">function</span> <span class="nx">A</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">!==</span><span class="nx">ja</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">lineWidth</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">ja</span><span class="o">=</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">K</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">la</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">POLYGON_OFFSET_FILL</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">POLYGON_OFFSET_FILL</span><span class="p">),</span><span class="nx">la</span><span class="o">=</span><span class="nx">a</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L417" class="blob-num js-line-number" data-line-number="417"></td>
        <td id="LC417" class="blob-code js-file-line"><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">ia</span><span class="o">!==</span><span class="nx">b</span><span class="o">||</span><span class="nx">ra</span><span class="o">!==</span><span class="nx">c</span><span class="p">))</span><span class="nx">k</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">ia</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">ra</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">B</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="s2">&quot;: &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">J</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="p">;</span><span class="s2">&quot;fragment&quot;</span><span class="o">===</span><span class="nx">a</span><span class="o">?</span><span class="nx">c</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;vertex&quot;</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">));</span><span class="nx">k</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span><span class="o">!</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderParameter</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">COMPILE_STATUS</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderInfoLog</span><span class="p">(</span><span class="nx">c</span><span class="p">)),</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">B</span><span class="p">(</span><span class="nx">b</span><span class="p">)),</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="nx">c</span><span class="p">}</span><span class="kd">function</span> <span class="nx">N</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">c</span><span class="o">?</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_S</span><span class="p">,</span><span class="nx">w</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">wrapS</span><span class="p">)),</span><span class="nx">k</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L418" class="blob-num js-line-number" data-line-number="418"></td>
        <td id="LC418" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_T</span><span class="p">,</span><span class="nx">w</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">wrapT</span><span class="p">)),</span><span class="nx">k</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_MAG_FILTER</span><span class="p">,</span><span class="nx">w</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">magFilter</span><span class="p">)),</span><span class="nx">k</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_MIN_FILTER</span><span class="p">,</span><span class="nx">w</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">minFilter</span><span class="p">)))</span><span class="o">:</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_S</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_T</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_MAG_FILTER</span><span class="p">,</span><span class="nx">M</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">magFilter</span><span class="p">)),</span><span class="nx">k</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_MIN_FILTER</span><span class="p">,</span><span class="nx">M</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">minFilter</span><span class="p">)));</span><span class="k">if</span><span class="p">(</span><span class="nx">fb</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">type</span><span class="o">!==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FloatType</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">anisotropy</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">__oldAnisotropy</span><span class="p">))</span><span class="nx">k</span><span class="p">.</span><span class="nx">texParameterf</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">fb</span><span class="p">.</span><span class="nx">TEXTURE_MAX_ANISOTROPY_EXT</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">anisotropy</span><span class="p">,</span><span class="nx">Wa</span><span class="p">)),</span><span class="nx">b</span><span class="p">.</span><span class="nx">__oldAnisotropy</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L419" class="blob-num js-line-number" data-line-number="419"></td>
        <td id="LC419" class="blob-code js-file-line"><span class="nx">b</span><span class="p">.</span><span class="nx">anisotropy</span><span class="p">}</span><span class="kd">function</span> <span class="nx">y</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindRenderbuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">&amp;&amp;!</span><span class="nx">b</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">?</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">renderbufferStorage</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">DEPTH_COMPONENT16</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">framebufferRenderbuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">DEPTH_ATTACHMENT</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">))</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">?</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">renderbufferStorage</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">DEPTH_STENCIL</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">framebufferRenderbuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">DEPTH_STENCIL_ATTACHMENT</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">))</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">renderbufferStorage</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">RGBA4</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="p">)}</span></td>
      </tr>
      <tr>
        <td id="L420" class="blob-num js-line-number" data-line-number="420"></td>
        <td id="LC420" class="blob-code js-file-line"><span class="kd">function</span> <span class="nx">M</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestFilter</span><span class="o">||</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestMipMapNearestFilter</span><span class="o">||</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestMipMapLinearFilter</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">NEAREST</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">LINEAR</span><span class="p">}</span><span class="kd">function</span> <span class="nx">w</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RepeatWrapping</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">REPEAT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ClampToEdgeWrapping</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MirroredRepeatWrapping</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">MIRRORED_REPEAT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestFilter</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">NEAREST</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestMipMapNearestFilter</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">NEAREST_MIPMAP_NEAREST</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestMipMapLinearFilter</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">NEAREST_MIPMAP_LINEAR</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span></td>
      </tr>
      <tr>
        <td id="L421" class="blob-num js-line-number" data-line-number="421"></td>
        <td id="LC421" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">LINEAR</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearMipMapNearestFilter</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">LINEAR_MIPMAP_NEAREST</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearMipMapLinearFilter</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">LINEAR_MIPMAP_LINEAR</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedByteType</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">UNSIGNED_BYTE</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedShort4444Type</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT_4_4_4_4</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedShort5551Type</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT_5_5_5_1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedShort565Type</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT_5_6_5</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ByteType</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">BYTE</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShortType</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">SHORT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span></td>
      </tr>
      <tr>
        <td id="L422" class="blob-num js-line-number" data-line-number="422"></td>
        <td id="LC422" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedShortType</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">IntType</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">INT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedIntType</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">UNSIGNED_INT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FloatType</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AlphaFormat</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">ALPHA</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBFormat</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">RGB</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBAFormat</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">RGBA</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LuminanceFormat</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">LUMINANCE</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LuminanceAlphaFormat</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">LUMINANCE_ALPHA</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AddEquation</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SubtractEquation</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">FUNC_SUBTRACT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ReverseSubtractEquation</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">FUNC_REVERSE_SUBTRACT</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L423" class="blob-num js-line-number" data-line-number="423"></td>
        <td id="LC423" class="blob-code js-file-line"><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ZeroFactor</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">ZERO</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneFactor</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">ONE</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcColorFactor</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">SRC_COLOR</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusSrcColorFactor</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">ONE_MINUS_SRC_COLOR</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcAlphaFactor</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">SRC_ALPHA</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusSrcAlphaFactor</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">ONE_MINUS_SRC_ALPHA</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DstAlphaFactor</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">DST_ALPHA</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusDstAlphaFactor</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">ONE_MINUS_DST_ALPHA</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DstColorFactor</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">DST_COLOR</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OneMinusDstColorFactor</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">ONE_MINUS_DST_COLOR</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L424" class="blob-num js-line-number" data-line-number="424"></td>
        <td id="LC424" class="blob-code js-file-line"><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SrcAlphaSaturateFactor</span><span class="p">)</span><span class="k">return</span> <span class="nx">k</span><span class="p">.</span><span class="nx">SRC_ALPHA_SATURATE</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">oa</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGB_S3TC_DXT1_Format</span><span class="p">)</span><span class="k">return</span> <span class="nx">oa</span><span class="p">.</span><span class="nx">COMPRESSED_RGB_S3TC_DXT1_EXT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBA_S3TC_DXT1_Format</span><span class="p">)</span><span class="k">return</span> <span class="nx">oa</span><span class="p">.</span><span class="nx">COMPRESSED_RGBA_S3TC_DXT1_EXT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBA_S3TC_DXT3_Format</span><span class="p">)</span><span class="k">return</span> <span class="nx">oa</span><span class="p">.</span><span class="nx">COMPRESSED_RGBA_S3TC_DXT3_EXT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBA_S3TC_DXT5_Format</span><span class="p">)</span><span class="k">return</span> <span class="nx">oa</span><span class="p">.</span><span class="nx">COMPRESSED_RGBA_S3TC_DXT5_EXT</span><span class="p">}</span><span class="k">return</span> <span class="mi">0</span><span class="p">}</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.WebGLRenderer&quot;</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">REVISION</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="p">{},</span><span class="nx">Z</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">canvas</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">canvas</span><span class="o">:</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L425" class="blob-num js-line-number" data-line-number="425"></td>
        <td id="LC425" class="blob-code js-file-line"><span class="nx">L</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">precision</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">precision</span><span class="o">:</span><span class="s2">&quot;highp&quot;</span><span class="p">,</span><span class="nx">pa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">alpha</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">alpha</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">Pa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">premultipliedAlpha</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">premultipliedAlpha</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">Ua</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">antialias</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">antialias</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">O</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">stencil</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">stencil</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">ka</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">preserveDrawingBuffer</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">preserveDrawingBuffer</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">Fa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">wa</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearColor</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: clearColor in WebGLRenderer constructor parameters is being removed. Use .setClearColor() instead.&quot;</span><span class="p">),</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">));</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearAlpha</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: clearAlpha in WebGLRenderer constructor parameters is being removed. Use .setClearColor() instead.&quot;</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L426" class="blob-num js-line-number" data-line-number="426"></td>
        <td id="LC426" class="blob-code js-file-line"><span class="nx">wa</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearAlpha</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">domElement</span><span class="o">=</span><span class="nx">Z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="o">:</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nb">window</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="o">?</span><span class="nb">window</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">autoUpdateObjects</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">sortObjects</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClearStencil</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClearDepth</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClearColor</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClear</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapEnabled</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">physicallyBasedShading</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">gammaOutput</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapAutoUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapType</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PCFShadowMap</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapCullFace</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CullFaceFront</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapCascade</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L427" class="blob-num js-line-number" data-line-number="427"></td>
        <td id="LC427" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapDebug</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMorphTargets</span><span class="o">=</span><span class="mi">8</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMorphNormals</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">autoScaleCubemaps</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPluginsPre</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPluginsPost</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">info</span><span class="o">=</span><span class="p">{</span><span class="nx">memory</span><span class="o">:</span><span class="p">{</span><span class="nx">programs</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">geometries</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">textures</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">render</span><span class="o">:</span><span class="p">{</span><span class="nx">calls</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">vertices</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">faces</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">points</span><span class="o">:</span><span class="mi">0</span><span class="p">}};</span><span class="kd">var</span> <span class="nx">D</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">V</span><span class="o">=</span><span class="p">[],</span><span class="nx">ea</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">qa</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">eb</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">pb</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">ub</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">ya</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">Ha</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">fa</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">da</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">T</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">aa</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">na</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">ha</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">X</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">xa</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">ab</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">la</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">ia</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">ra</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">ja</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">ua</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Ra</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Qa</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Xa</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Xb</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Jb</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Ab</span><span class="o">=</span><span class="p">{},</span><span class="nx">Sa</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">,</span><span class="nx">xb</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">lb</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">Ga</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L428" class="blob-num js-line-number" data-line-number="428"></td>
        <td id="LC428" class="blob-code js-file-line"><span class="nx">Ca</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">yb</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">Ib</span><span class="o">=</span><span class="p">{</span><span class="nx">ambient</span><span class="o">:</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="nx">directional</span><span class="o">:</span><span class="p">{</span><span class="nx">length</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">colors</span><span class="o">:</span><span class="p">[],</span><span class="nx">positions</span><span class="o">:</span><span class="p">[]},</span><span class="nx">point</span><span class="o">:</span><span class="p">{</span><span class="nx">length</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">colors</span><span class="o">:</span><span class="p">[],</span><span class="nx">positions</span><span class="o">:</span><span class="p">[],</span><span class="nx">distances</span><span class="o">:</span><span class="p">[]},</span><span class="nx">spot</span><span class="o">:</span><span class="p">{</span><span class="nx">length</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">colors</span><span class="o">:</span><span class="p">[],</span><span class="nx">positions</span><span class="o">:</span><span class="p">[],</span><span class="nx">distances</span><span class="o">:</span><span class="p">[],</span><span class="nx">directions</span><span class="o">:</span><span class="p">[],</span><span class="nx">anglesCos</span><span class="o">:</span><span class="p">[],</span><span class="nx">exponents</span><span class="o">:</span><span class="p">[]},</span><span class="nx">hemi</span><span class="o">:</span><span class="p">{</span><span class="nx">length</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">skyColors</span><span class="o">:</span><span class="p">[],</span><span class="nx">groundColors</span><span class="o">:</span><span class="p">[],</span><span class="nx">positions</span><span class="o">:</span><span class="p">[]}},</span><span class="nx">k</span><span class="p">,</span><span class="nx">Rb</span><span class="p">,</span><span class="nx">Yb</span><span class="p">,</span><span class="nx">fb</span><span class="p">,</span><span class="nx">oa</span><span class="p">;</span><span class="k">try</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">k</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;experimental-webgl&quot;</span><span class="p">,{</span><span class="nx">alpha</span><span class="o">:</span><span class="nx">pa</span><span class="p">,</span><span class="nx">premultipliedAlpha</span><span class="o">:</span><span class="nx">Pa</span><span class="p">,</span><span class="nx">antialias</span><span class="o">:</span><span class="nx">Ua</span><span class="p">,</span><span class="nx">stencil</span><span class="o">:</span><span class="nx">O</span><span class="p">,</span><span class="nx">preserveDrawingBuffer</span><span class="o">:</span><span class="nx">ka</span><span class="p">})))</span><span class="k">throw</span><span class="s2">&quot;Error creating WebGL context.&quot;</span><span class="p">;}</span><span class="k">catch</span><span class="p">(</span><span class="nx">va</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="nx">va</span><span class="p">)}</span><span class="nx">Rb</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L429" class="blob-num js-line-number" data-line-number="429"></td>
        <td id="LC429" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">getExtension</span><span class="p">(</span><span class="s2">&quot;OES_texture_float&quot;</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">getExtension</span><span class="p">(</span><span class="s2">&quot;OES_texture_float_linear&quot;</span><span class="p">);</span><span class="nx">Yb</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getExtension</span><span class="p">(</span><span class="s2">&quot;OES_standard_derivatives&quot;</span><span class="p">);</span><span class="nx">fb</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getExtension</span><span class="p">(</span><span class="s2">&quot;EXT_texture_filter_anisotropic&quot;</span><span class="p">)</span><span class="o">||</span><span class="nx">k</span><span class="p">.</span><span class="nx">getExtension</span><span class="p">(</span><span class="s2">&quot;MOZ_EXT_texture_filter_anisotropic&quot;</span><span class="p">)</span><span class="o">||</span><span class="nx">k</span><span class="p">.</span><span class="nx">getExtension</span><span class="p">(</span><span class="s2">&quot;WEBKIT_EXT_texture_filter_anisotropic&quot;</span><span class="p">);</span><span class="nx">oa</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getExtension</span><span class="p">(</span><span class="s2">&quot;WEBGL_compressed_texture_s3tc&quot;</span><span class="p">)</span><span class="o">||</span><span class="nx">k</span><span class="p">.</span><span class="nx">getExtension</span><span class="p">(</span><span class="s2">&quot;MOZ_WEBGL_compressed_texture_s3tc&quot;</span><span class="p">)</span><span class="o">||</span><span class="nx">k</span><span class="p">.</span><span class="nx">getExtension</span><span class="p">(</span><span class="s2">&quot;WEBKIT_WEBGL_compressed_texture_s3tc&quot;</span><span class="p">);</span><span class="nx">Rb</span><span class="o">||</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.WebGLRenderer: Float textures not supported.&quot;</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L430" class="blob-num js-line-number" data-line-number="430"></td>
        <td id="LC430" class="blob-code js-file-line"><span class="nx">Yb</span><span class="o">||</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.WebGLRenderer: Standard derivatives not supported.&quot;</span><span class="p">);</span><span class="nx">fb</span><span class="o">||</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.WebGLRenderer: Anisotropic texture filtering not supported.&quot;</span><span class="p">);</span><span class="nx">oa</span><span class="o">||</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.WebGLRenderer: S3TC compressed textures not supported.&quot;</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span><span class="p">{</span><span class="nx">rangeMin</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">rangeMax</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">precision</span><span class="o">:</span><span class="mi">1</span><span class="p">}});</span><span class="nx">k</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">clearDepth</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">clearStencil</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">depthFunc</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">LEQUAL</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">frontFace</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">CCW</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">BACK</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L431" class="blob-num js-line-number" data-line-number="431"></td>
        <td id="LC431" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendFunc</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">SRC_ALPHA</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">ONE_MINUS_SRC_ALPHA</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">wa</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">context</span><span class="o">=</span><span class="nx">k</span><span class="p">;</span><span class="kd">var</span> <span class="nx">ib</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">MAX_TEXTURE_IMAGE_UNITS</span><span class="p">),</span><span class="nx">Tb</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">MAX_VERTEX_TEXTURE_IMAGE_UNITS</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">MAX_TEXTURE_SIZE</span><span class="p">);</span><span class="kd">var</span> <span class="nx">Ub</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">MAX_CUBE_MAP_TEXTURE_SIZE</span><span class="p">),</span><span class="nx">Wa</span><span class="o">=</span><span class="nx">fb</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="nx">fb</span><span class="p">.</span><span class="nx">MAX_TEXTURE_MAX_ANISOTROPY_EXT</span><span class="p">)</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">Gb</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">Tb</span><span class="p">,</span><span class="nx">Bb</span><span class="o">=</span><span class="nx">Gb</span><span class="o">&amp;&amp;</span><span class="nx">Rb</span><span class="p">;</span><span class="nx">oa</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">COMPRESSED_TEXTURE_FORMATS</span><span class="p">);</span><span class="kd">var</span> <span class="nx">Kb</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L432" class="blob-num js-line-number" data-line-number="432"></td>
        <td id="LC432" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">HIGH_FLOAT</span><span class="p">),</span><span class="nx">Ka</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">MEDIUM_FLOAT</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">LOW_FLOAT</span><span class="p">);</span><span class="kd">var</span> <span class="nx">Sb</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">HIGH_FLOAT</span><span class="p">),</span><span class="nx">Lb</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">MEDIUM_FLOAT</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">LOW_FLOAT</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">HIGH_INT</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">MEDIUM_INT</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">LOW_INT</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L433" class="blob-num js-line-number" data-line-number="433"></td>
        <td id="LC433" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">HIGH_INT</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">MEDIUM_INT</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">getShaderPrecisionFormat</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">LOW_INT</span><span class="p">);</span><span class="kd">var</span> <span class="nx">Hb</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">Kb</span><span class="p">.</span><span class="nx">precision</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">Sb</span><span class="p">.</span><span class="nx">precision</span><span class="p">,</span><span class="nx">kc</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">Ka</span><span class="p">.</span><span class="nx">precision</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">Lb</span><span class="p">.</span><span class="nx">precision</span><span class="p">;</span><span class="s2">&quot;highp&quot;</span><span class="o">===</span><span class="nx">L</span><span class="o">&amp;&amp;!</span><span class="nx">Hb</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">kc</span><span class="o">?</span><span class="p">(</span><span class="nx">L</span><span class="o">=</span><span class="s2">&quot;mediump&quot;</span><span class="p">,</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;WebGLRenderer: highp not supported, using mediump&quot;</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">L</span><span class="o">=</span><span class="s2">&quot;lowp&quot;</span><span class="p">,</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;WebGLRenderer: highp and mediump not supported, using lowp&quot;</span><span class="p">)));</span><span class="s2">&quot;mediump&quot;</span><span class="o">===</span><span class="nx">L</span><span class="o">&amp;&amp;!</span><span class="nx">kc</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">L</span><span class="o">=</span><span class="s2">&quot;lowp&quot;</span><span class="p">,</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;WebGLRenderer: mediump not supported, using lowp&quot;</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">getContext</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">k</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L434" class="blob-num js-line-number" data-line-number="434"></td>
        <td id="LC434" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">supportsVertexTextures</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">Gb</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">supportsFloatTextures</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">Rb</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">supportsStandardDerivatives</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">Yb</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">supportsCompressedTextureS3TC</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">oa</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getMaxAnisotropy</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">Wa</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getPrecision</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">L</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">setSize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">Z</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="p">;</span><span class="nx">Z</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="p">;</span><span class="mi">1</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="o">&amp;&amp;!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">Z</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">,</span><span class="nx">Z</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot;px&quot;</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setViewport</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">Z</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">Z</span><span class="p">.</span><span class="nx">height</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L435" class="blob-num js-line-number" data-line-number="435"></td>
        <td id="LC435" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">setViewport</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">ua</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ra</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="nx">Qa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">Z</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span><span class="nx">Xa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">Z</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">viewport</span><span class="p">(</span><span class="nx">ua</span><span class="p">,</span><span class="nx">Ra</span><span class="p">,</span><span class="nx">Qa</span><span class="p">,</span><span class="nx">Xa</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">setScissor</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">k</span><span class="p">.</span><span class="nx">scissor</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">enableScissorTest</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">SCISSOR_TEST</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">SCISSOR_TEST</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">setClearColor</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">wa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">wa</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">setClearColorHex</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;DEPRECATED: .setClearColorHex() is being removed. Use .setClearColor() instead.&quot;</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L436" class="blob-num js-line-number" data-line-number="436"></td>
        <td id="LC436" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">setClearColor</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">getClearColor</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">Fa</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">getClearAlpha</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="nx">wa</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">clear</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="o">||</span><span class="nx">a</span><span class="p">)</span><span class="nx">d</span><span class="o">|=</span><span class="nx">k</span><span class="p">.</span><span class="nx">COLOR_BUFFER_BIT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">||</span><span class="nx">b</span><span class="p">)</span><span class="nx">d</span><span class="o">|=</span><span class="nx">k</span><span class="p">.</span><span class="nx">DEPTH_BUFFER_BIT</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="o">||</span><span class="nx">c</span><span class="p">)</span><span class="nx">d</span><span class="o">|=</span><span class="nx">k</span><span class="p">.</span><span class="nx">STENCIL_BUFFER_BIT</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">clear</span><span class="p">(</span><span class="nx">d</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">clearTarget</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">setRenderTarget</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">clear</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">addPostPlugin</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPluginsPost</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">addPrePlugin</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">init</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPluginsPre</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L437" class="blob-num js-line-number" data-line-number="437"></td>
        <td id="LC437" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">updateShadowMap</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">qa</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="nx">pb</span><span class="o">=</span><span class="nx">ub</span><span class="o">=</span><span class="nx">ab</span><span class="o">=</span><span class="nx">xa</span><span class="o">=</span><span class="nx">aa</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">yb</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">T</span><span class="o">=</span><span class="nx">da</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapPlugin</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="kd">var</span> <span class="nx">lc</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&quot;dispose&quot;</span><span class="p">,</span><span class="nx">lc</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTangentBuffer</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTangentBuffer</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglUVBuffer</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L438" class="blob-num js-line-number" data-line-number="438"></td>
        <td id="LC438" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglUVBuffer</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglUV2Buffer</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglUV2Buffer</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglSkinIndicesBuffer</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglSkinIndicesBuffer</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglSkinWeightsBuffer</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglSkinWeightsBuffer</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFaceBuffer</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFaceBuffer</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglLineBuffer</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglLineBuffer</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglLineDistanceBuffer</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglLineDistanceBuffer</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L439" class="blob-num js-line-number" data-line-number="439"></td>
        <td id="LC439" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">geometryGroups</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">numMorphTargets</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">numMorphTargets</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="p">[</span><span class="nx">e</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">numMorphNormals</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">numMorphNormals</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteBuffer</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">__webglMorphNormalsBuffers</span><span class="p">[</span><span class="nx">e</span><span class="p">])}</span><span class="nx">b</span><span class="p">(</span><span class="nx">d</span><span class="p">)}</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">geometries</span><span class="o">--</span><span class="p">},</span><span class="nx">gc</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&quot;dispose&quot;</span><span class="p">,</span><span class="nx">gc</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">image</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">__webglTextureCube</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteTexture</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">__webglTextureCube</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteTexture</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">));</span></td>
      </tr>
      <tr>
        <td id="L440" class="blob-num js-line-number" data-line-number="440"></td>
        <td id="LC440" class="blob-code js-file-line"><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">textures</span><span class="o">--</span><span class="p">},</span><span class="nx">mc</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&quot;dispose&quot;</span><span class="p">,</span><span class="nx">mc</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteTexture</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">),</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">6</span><span class="o">&gt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteFramebuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">[</span><span class="nx">b</span><span class="p">]),</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteRenderbuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="p">[</span><span class="nx">b</span><span class="p">]);</span><span class="k">else</span> <span class="nx">k</span><span class="p">.</span><span class="nx">deleteFramebuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteRenderbuffer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">textures</span><span class="o">--</span><span class="p">},</span><span class="nx">uc</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">target</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">removeEventListener</span><span class="p">(</span><span class="s2">&quot;dispose&quot;</span><span class="p">,</span><span class="nx">uc</span><span class="p">);</span><span class="nx">vc</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">vc</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L441" class="blob-num js-line-number" data-line-number="441"></td>
        <td id="LC441" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">program</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">program</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">d</span><span class="p">.</span><span class="nx">program</span><span class="o">===</span><span class="nx">b</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">usedTimes</span><span class="o">--</span><span class="p">;</span><span class="mi">0</span><span class="o">===</span><span class="nx">d</span><span class="p">.</span><span class="nx">usedTimes</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="k">break</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="p">[];</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">d</span><span class="p">.</span><span class="nx">program</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">V</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteProgram</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">programs</span><span class="o">--</span><span class="p">}}};</span><span class="k">this</span><span class="p">.</span><span class="nx">renderBufferImmediate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasPositions</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">());</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasNormals</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">());</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasUvs</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglUvBuffer</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L442" class="blob-num js-line-number" data-line-number="442"></td>
        <td id="LC442" class="blob-code js-file-line"><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglUvBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">());</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasColors</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">());</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasPositions</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionArray</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasNormals</span><span class="p">){</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">shading</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FlatShading</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">count</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">p</span><span class="o">&lt;</span></td>
      </tr>
      <tr>
        <td id="L443" class="blob-num js-line-number" data-line-number="443"></td>
        <td id="LC443" class="blob-code js-file-line"><span class="nx">q</span><span class="p">;</span><span class="nx">p</span><span class="o">+=</span><span class="mi">9</span><span class="p">)</span><span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">normalArray</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">2</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">3</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">4</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">5</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">6</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">7</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">8</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">g</span><span class="o">+</span><span class="nx">h</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="nx">j</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">l</span><span class="o">+</span><span class="nx">m</span><span class="p">)</span><span class="o">/</span><span class="mi">3</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">}</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">normalArray</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">normal</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)}</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasUvs</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">map</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglUvBuffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">uvArray</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L444" class="blob-num js-line-number" data-line-number="444"></td>
        <td id="LC444" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">uv</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasColors</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">!==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoColors</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">colorArray</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">color</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="nx">k</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">count</span><span class="o">=</span><span class="mi">0</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">renderBufferDirect</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">visible</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">F</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L445" class="blob-num js-line-number" data-line-number="445"></td>
        <td id="LC445" class="blob-code js-file-line"><span class="nx">h</span><span class="p">.</span><span class="nx">attributes</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">attributes</span><span class="p">;</span><span class="nx">c</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="mi">16777215</span><span class="o">*</span><span class="nx">e</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">h</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">);</span><span class="nx">h</span><span class="o">!==</span><span class="nx">ub</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">ub</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">offsets</span><span class="p">;</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">index</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="s2">&quot;index&quot;</span><span class="o">!==</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">itemSize</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">buffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="o">*</span><span class="nx">p</span><span class="o">*</span><span class="nx">m</span><span class="p">)));</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">buffer</span><span class="p">)}</span><span class="nx">k</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">count</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="mi">2</span><span class="o">*</span><span class="nx">e</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">start</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">++</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L446" class="blob-num js-line-number" data-line-number="446"></td>
        <td id="LC446" class="blob-code js-file-line"><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">+=</span><span class="nx">e</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">count</span><span class="p">;</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">+=</span><span class="nx">e</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">count</span><span class="o">/</span><span class="mi">3</span><span class="p">}}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="s2">&quot;index&quot;</span><span class="o">!==</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">itemSize</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">buffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)));</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">attributes</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">numItems</span><span class="o">/</span><span class="mi">3</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">++</span><span class="p">;</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">numItems</span><span class="o">/</span><span class="mi">3</span><span class="p">;</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">numItems</span><span class="o">/</span><span class="mi">3</span><span class="o">/</span><span class="mi">3</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">itemSize</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L447" class="blob-num js-line-number" data-line-number="447"></td>
        <td id="LC447" class="blob-code js-file-line"><span class="nx">h</span><span class="p">.</span><span class="nx">buffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">POINTS</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">numItems</span><span class="o">/</span><span class="mi">3</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">++</span><span class="p">;</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">points</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">numItems</span><span class="o">/</span><span class="mi">3</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">a</span><span class="p">)</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">itemSize</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">buffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineStrip</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">LINE_STRIP</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">LINES</span><span class="p">;</span><span class="nx">A</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">linewidth</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">numItems</span><span class="o">/</span><span class="mi">3</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">++</span><span class="p">;</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">points</span><span class="o">+=</span><span class="nx">a</span><span class="p">.</span><span class="nx">numItems</span><span class="p">}}};</span><span class="k">this</span><span class="p">.</span><span class="nx">renderBuffer</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L448" class="blob-num js-line-number" data-line-number="448"></td>
        <td id="LC448" class="blob-code js-file-line"><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">visible</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">F</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">attributes</span><span class="p">,</span><span class="nx">b</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">16777215</span><span class="o">*</span><span class="nx">e</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">id</span><span class="o">+</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">);</span><span class="nx">c</span><span class="o">!==</span><span class="nx">ub</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">ub</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">)</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetBase</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">program</span><span class="p">.</span><span class="nx">attributes</span><span class="p">;</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetBase</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">.</span><span class="nx">position</span><span class="o">?</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetBase</span><span class="p">]),</span><span class="nx">g</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">position</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L449" class="blob-num js-line-number" data-line-number="449"></td>
        <td id="LC449" class="blob-code js-file-line"><span class="mi">3</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span><span class="o">:</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">.</span><span class="nx">position</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">position</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetForcedOrder</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetForcedOrder</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">numSupportedMorphTargets</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">;)</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphTarget&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="nx">m</span><span class="p">]]),</span><span class="nx">g</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphTarget&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">]),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphTarget&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">],</span><span class="mi">3</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)),</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphNormal&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L450" class="blob-num js-line-number" data-line-number="450"></td>
        <td id="LC450" class="blob-code js-file-line"><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphNormalsBuffers</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="nx">m</span><span class="p">]]),</span><span class="nx">g</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphNormal&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">]),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphNormal&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">],</span><span class="mi">3</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)),</span><span class="nx">f</span><span class="p">.</span><span class="nx">__webglMorphTargetInfluences</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="nx">m</span><span class="p">]],</span><span class="nx">m</span><span class="o">++</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="nx">j</span><span class="o">=</span><span class="p">[];</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">;</span><span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">p</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">n</span><span class="p">],</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">m</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">]);</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">numSupportedMorphTargets</span><span class="o">?</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">numSupportedMorphTargets</span><span class="p">)</span><span class="o">:</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">numSupportedMorphNormals</span><span class="o">?</span><span class="nx">j</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">l</span><span class="p">)</span><span class="o">:</span><span class="mi">0</span><span class="o">===</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">j</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">]);</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">numSupportedMorphTargets</span><span class="p">;)</span><span class="nx">j</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">?</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">m</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="mi">0</span><span class="o">&lt;=</span></td>
      </tr>
      <tr>
        <td id="L451" class="blob-num js-line-number" data-line-number="451"></td>
        <td id="LC451" class="blob-code js-file-line"><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphTarget&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="p">[</span><span class="nx">n</span><span class="p">]),</span><span class="nx">g</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphTarget&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">]),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphTarget&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">],</span><span class="mi">3</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)),</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphNormal&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglMorphNormalsBuffers</span><span class="p">[</span><span class="nx">n</span><span class="p">]),</span><span class="nx">g</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphNormal&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">]),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="s2">&quot;morphNormal&quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">],</span><span class="mi">3</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)),</span><span class="nx">f</span><span class="p">.</span><span class="nx">__webglMorphTargetInfluences</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">n</span><span class="p">])</span><span class="o">:</span><span class="nx">f</span><span class="p">.</span><span class="nx">__webglMorphTargetInfluences</span><span class="p">[</span><span class="nx">m</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">++</span><span class="p">}</span><span class="kc">null</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">program</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">uniform1fv</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">program</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L452" class="blob-num js-line-number" data-line-number="452"></td>
        <td id="LC452" class="blob-code js-file-line"><span class="nx">f</span><span class="p">.</span><span class="nx">__webglMorphTargetInfluences</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">belongsToAttribute</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">buffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">belongsToAttribute</span><span class="p">]),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">buffer</span><span class="p">.</span><span class="nx">belongsToAttribute</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">size</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))}</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L453" class="blob-num js-line-number" data-line-number="453"></td>
        <td id="LC453" class="blob-code js-file-line"><span class="nx">e</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">tangent</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglTangentBuffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">tangent</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">tangent</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">uv</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglUVBuffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">uv</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">uv2</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglUV2Buffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">uv2</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">uv2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="nx">d</span><span class="p">.</span><span class="nx">skinning</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinIndex</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinWeight</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L454" class="blob-num js-line-number" data-line-number="454"></td>
        <td id="LC454" class="blob-code js-file-line"><span class="nx">e</span><span class="p">.</span><span class="nx">__webglSkinIndicesBuffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinIndex</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinIndex</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglSkinWeightsBuffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinWeight</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinWeight</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">.</span><span class="nx">lineDistance</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglLineDistanceBuffer</span><span class="p">),</span><span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">lineDistance</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">lineDistance</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">))}</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">wireframe</span><span class="o">?</span><span class="p">(</span><span class="nx">A</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">wireframeLinewidth</span><span class="p">),</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglLineBuffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">LINES</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L455" class="blob-num js-line-number" data-line-number="455"></td>
        <td id="LC455" class="blob-code js-file-line"><span class="nx">e</span><span class="p">.</span><span class="nx">__webglLineCount</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="mi">0</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglFaceBuffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglFaceCount</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="mi">0</span><span class="p">)),</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">++</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">+=</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglFaceCount</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">+=</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglFaceCount</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="o">?</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">type</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineStrip</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">LINE_STRIP</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">LINES</span><span class="p">,</span><span class="nx">A</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">linewidth</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglLineCount</span><span class="p">),</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">++</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="o">?</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">POINTS</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglParticleCount</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L456" class="blob-num js-line-number" data-line-number="456"></td>
        <td id="LC456" class="blob-code js-file-line"><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">++</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">points</span><span class="o">+=</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglParticleCount</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">drawArrays</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TRIANGLE_STRIP</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">__webglVertexCount</span><span class="p">),</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">++</span><span class="p">)}};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">)</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.&quot;</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="p">;</span><span class="nx">pb</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">yb</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">autoUpdate</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">parent</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L457" class="blob-num js-line-number" data-line-number="457"></td>
        <td id="LC457" class="blob-code js-file-line"><span class="nx">xb</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">);</span><span class="nx">Sa</span><span class="p">.</span><span class="nx">setFromMatrix</span><span class="p">(</span><span class="nx">xb</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">autoUpdateObjects</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">initWebGLObjects</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">m</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPluginsPre</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">calls</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">render</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">setRenderTarget</span><span class="p">(</span><span class="nx">c</span><span class="p">);(</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClear</span><span class="o">||</span><span class="nx">d</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">clear</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClearColor</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClearDepth</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClearStencil</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">render</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">h</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">||</span><span class="nx">h</span> <span class="k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L458" class="blob-num js-line-number" data-line-number="458"></td>
        <td id="LC458" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">)</span><span class="o">||!</span><span class="nx">h</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">||</span><span class="nx">Sa</span><span class="p">.</span><span class="nx">intersectsObject</span><span class="p">(</span><span class="nx">h</span><span class="p">))){</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">q</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">q</span><span class="p">.</span><span class="nx">_normalMatrix</span><span class="p">.</span><span class="nx">getNormalMatrix</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">);</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">buffer</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">s</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">material</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="p">)</span><span class="nx">s</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="nx">s</span><span class="p">],</span><span class="nx">s</span><span class="p">.</span><span class="nx">transparent</span><span class="o">?</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="nx">s</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">opaque</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">opaque</span><span class="o">=</span><span class="nx">s</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="kc">null</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">t</span><span class="p">)</span><span class="nx">s</span><span class="p">.</span><span class="nx">transparent</span><span class="o">?</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="nx">s</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">opaque</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">opaque</span><span class="o">=</span><span class="nx">s</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="kc">null</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L459" class="blob-num js-line-number" data-line-number="459"></td>
        <td id="LC459" class="blob-code js-file-line"><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">sortObjects</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="kc">null</span><span class="o">!==</span><span class="nx">h</span><span class="p">.</span><span class="nx">renderDepth</span><span class="o">?</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">renderDepth</span><span class="o">:</span><span class="p">(</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">applyProjection</span><span class="p">(</span><span class="nx">xb</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">z</span><span class="p">))}</span><span class="k">this</span><span class="p">.</span><span class="nx">sortObjects</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">h</span><span class="p">.</span><span class="nx">_normalMatrix</span><span class="p">.</span><span class="nx">getNormalMatrix</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">transparent</span><span class="o">?</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">opaque</span><span class="o">=</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">opaque</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">transparent</span><span class="o">=</span><span class="kc">null</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">overrideMaterial</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">overrideMaterial</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L460" class="blob-num js-line-number" data-line-number="460"></td>
        <td id="LC460" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">setBlending</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">blending</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">blendSrc</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">blendDst</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">depthTest</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">setDepthWrite</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">depthWrite</span><span class="p">),</span><span class="nx">K</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">polygonOffset</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">polygonOffsetFactor</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">polygonOffsetUnits</span><span class="p">),</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">,</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">setBlending</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoBlending</span><span class="p">),</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="s2">&quot;opaque&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">,</span><span class="s2">&quot;opaque&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">n</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="s2">&quot;transparent&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">p</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">,</span><span class="s2">&quot;transparent&quot;</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L461" class="blob-num js-line-number" data-line-number="461"></td>
        <td id="LC461" class="blob-code js-file-line"><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">));</span><span class="nx">m</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">renderPluginsPost</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">!==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestFilter</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">!==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="o">?</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">generateMipmap</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="kc">null</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">generateMipmap</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="kc">null</span><span class="p">)));</span><span class="k">this</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setDepthWrite</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)}};</span><span class="k">this</span><span class="p">.</span><span class="nx">renderImmediateObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L462" class="blob-num js-line-number" data-line-number="462"></td>
        <td id="LC462" class="blob-code js-file-line"><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">F</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">ub</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">D</span><span class="p">.</span><span class="nx">setMaterialFaces</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">immediateRenderCallback</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">immediateRenderCallback</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">k</span><span class="p">,</span><span class="nx">Sa</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">D</span><span class="p">.</span><span class="nx">renderBufferImmediate</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">d</span><span class="p">)})};</span><span class="k">this</span><span class="p">.</span><span class="nx">initWebGLObjects</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="o">=</span><span class="p">[],</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="o">=</span><span class="p">[],</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglSprites</span><span class="o">=</span><span class="p">[],</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFlares</span><span class="o">=</span><span class="p">[]);</span><span class="k">for</span><span class="p">(;</span><span class="nx">a</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="p">.</span><span class="nx">length</span><span class="p">;)</span><span class="nx">t</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">__objectsAdded</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">for</span><span class="p">(;</span><span class="nx">a</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="p">.</span><span class="nx">length</span><span class="p">;)</span><span class="nx">v</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">__objectsRemoved</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L463" class="blob-num js-line-number" data-line-number="463"></td>
        <td id="LC463" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">object</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">g</span><span class="p">.</span><span class="nx">__webglActive</span><span class="o">&amp;&amp;</span><span class="nx">v</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">t</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">a</span><span class="p">));</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="p">){</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">,</span><span class="nx">z</span><span class="o">=!</span><span class="nx">j</span><span class="p">.</span><span class="nx">dynamic</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">attributes</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">y</span> <span class="k">in</span> <span class="nx">w</span><span class="p">)</span><span class="nx">A</span><span class="o">=</span><span class="nx">w</span><span class="p">[</span><span class="nx">y</span><span class="p">],</span><span class="nx">A</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="s2">&quot;index&quot;</span><span class="o">===</span><span class="nx">y</span><span class="o">?</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">buffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">q</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">buffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L464" class="blob-num js-line-number" data-line-number="464"></td>
        <td id="LC464" class="blob-code js-file-line"><span class="nx">q</span><span class="p">)),</span><span class="nx">A</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">),</span><span class="nx">z</span><span class="o">&amp;&amp;!</span><span class="nx">A</span><span class="p">.</span><span class="nx">dynamic</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">array</span><span class="o">=</span><span class="kc">null</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">B</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">geometryGroupsList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">B</span><span class="o">&lt;</span><span class="nx">F</span><span class="p">;</span><span class="nx">B</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">geometryGroupsList</span><span class="p">[</span><span class="nx">B</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">m</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">buffersNeedUpdate</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">n</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">(</span><span class="nx">p</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">morphTargetsNeedUpdate</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">elementsNeedUpdate</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">uvsNeedUpdate</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">tangentsNeedUpdate</span><span class="o">||</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">C</span><span class="o">=</span><span class="nx">m</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">,</span><span class="nx">I</span><span class="o">=!</span><span class="nx">j</span><span class="p">.</span><span class="nx">dynamic</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">__inittedArrays</span><span class="p">){</span><span class="kd">var</span> <span class="nx">V</span><span class="o">=</span><span class="nx">f</span><span class="p">(</span><span class="nx">J</span><span class="p">),</span><span class="nx">K</span><span class="o">=</span><span class="nx">J</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">?</span><span class="nx">J</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">L</span><span class="o">=</span><span class="nx">h</span><span class="p">(</span><span class="nx">J</span><span class="p">),</span><span class="nx">M</span><span class="o">=</span><span class="nx">V</span><span class="o">===</span></td>
      </tr>
      <tr>
        <td id="L465" class="blob-num js-line-number" data-line-number="465"></td>
        <td id="LC465" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">SmoothShading</span><span class="p">,</span><span class="nx">E</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">D</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">N</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Q</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">O</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ea</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">T</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">X</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">qa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">fa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">aa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">R</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">S</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">P</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ba</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Z</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">da</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ya</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ja</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ha</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ha</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ia</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">eb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ka</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">na</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">la</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ua</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">oa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">pa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ra</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ca</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">va</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">wa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">xa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">pb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">za</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ub</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Fa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Pa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ra</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">bb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ab</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Za</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">$a</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ua</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Qa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ta</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Ya</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Wa</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Xa</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Ka</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">jb</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Da</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L466" class="blob-num js-line-number" data-line-number="466"></td>
        <td id="LC466" class="blob-code js-file-line"><span class="mi">0</span><span class="p">,</span><span class="nx">ob</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Va</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">ga</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Aa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">cb</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="p">,</span><span class="nx">fb</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">__uvArray</span><span class="p">,</span><span class="nx">ib</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">__uv2Array</span><span class="p">,</span><span class="nx">Sa</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">__normalArray</span><span class="p">,</span><span class="nx">La</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">__tangentArray</span><span class="p">,</span><span class="nx">db</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">__colorArray</span><span class="p">,</span><span class="nx">Ma</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">__skinIndexArray</span><span class="p">,</span><span class="nx">Na</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">__skinWeightArray</span><span class="p">,</span><span class="nx">yb</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">__morphTargetsArrays</span><span class="p">,</span><span class="nx">Ab</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">__morphNormalsArrays</span><span class="p">,</span><span class="nx">Bb</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">,</span><span class="nx">u</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Mb</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">__faceArray</span><span class="p">,</span><span class="nx">wb</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">__lineArray</span><span class="p">,</span><span class="nx">qb</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">Gb</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">elementsNeedUpdate</span><span class="p">,</span><span class="nx">Hb</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">uvsNeedUpdate</span><span class="p">,</span><span class="nx">Rb</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="p">,</span><span class="nx">Sb</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">tangentsNeedUpdate</span><span class="p">,</span><span class="nx">Xb</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="p">,</span><span class="nx">Yb</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">morphTargetsNeedUpdate</span><span class="p">,</span><span class="nx">cc</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">sa</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">faces3</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L467" class="blob-num js-line-number" data-line-number="467"></td>
        <td id="LC467" class="blob-code js-file-line"><span class="nx">ta</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">faces4</span><span class="p">,</span><span class="nx">kb</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">Jb</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">Lb</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">dc</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">skinIndices</span><span class="p">,</span><span class="nx">$b</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">skinWeights</span><span class="p">,</span><span class="nx">ac</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">,</span><span class="nx">Ib</span><span class="o">=</span><span class="nx">qb</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">qb</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">R</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ya</span><span class="o">+=</span><span class="mi">9</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">R</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">ba</span><span class="o">=</span><span class="nx">cc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L468" class="blob-num js-line-number" data-line-number="468"></td>
        <td id="LC468" class="blob-code js-file-line"><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">cb</span><span class="p">[</span><span class="nx">Ya</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ya</span><span class="o">+=</span><span class="mi">12</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">cb</span><span class="p">,</span><span class="nx">H</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">Yb</span><span class="p">){</span><span class="nx">bb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">ab</span><span class="o">=</span><span class="nx">ac</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">bb</span><span class="o">&lt;</span><span class="nx">ab</span><span class="p">;</span><span class="nx">bb</span><span class="o">++</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="nx">ga</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Ua</span><span class="o">=</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">],</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">Ua</span><span class="p">],</span><span class="nx">R</span><span class="o">=</span><span class="nx">ac</span><span class="p">[</span><span class="nx">bb</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span><span class="nx">ac</span><span class="p">[</span><span class="nx">bb</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">ac</span><span class="p">[</span><span class="nx">bb</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">Za</span><span class="o">=</span><span class="nx">yb</span><span class="p">[</span><span class="nx">bb</span><span class="p">],</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">J</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">M</span><span class="o">?</span><span class="p">(</span><span class="nx">Qa</span><span class="o">=</span><span class="nx">Ib</span><span class="p">[</span><span class="nx">bb</span><span class="p">].</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">Ua</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L469" class="blob-num js-line-number" data-line-number="469"></td>
        <td id="LC469" class="blob-code js-file-line"><span class="nx">ha</span><span class="o">=</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">Ha</span><span class="o">=</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">ia</span><span class="o">=</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="nx">ia</span><span class="o">=</span><span class="nx">Ha</span><span class="o">=</span><span class="nx">ha</span><span class="o">=</span><span class="nx">Ib</span><span class="p">[</span><span class="nx">bb</span><span class="p">].</span><span class="nx">faceNormals</span><span class="p">[</span><span class="nx">Ua</span><span class="p">],</span><span class="nx">$a</span><span class="o">=</span><span class="nx">Ab</span><span class="p">[</span><span class="nx">bb</span><span class="p">],</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="p">]</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">ia</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">ia</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">ia</span><span class="p">.</span><span class="nx">z</span><span class="p">),</span><span class="nx">ga</span><span class="o">+=</span><span class="mi">9</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Ua</span><span class="o">=</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">],</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">Ua</span><span class="p">],</span><span class="nx">R</span><span class="o">=</span><span class="nx">ac</span><span class="p">[</span><span class="nx">bb</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span><span class="nx">ac</span><span class="p">[</span><span class="nx">bb</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">ac</span><span class="p">[</span><span class="nx">bb</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">ba</span><span class="o">=</span><span class="nx">ac</span><span class="p">[</span><span class="nx">bb</span><span class="p">].</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="nx">Za</span><span class="o">=</span><span class="nx">yb</span><span class="p">[</span><span class="nx">bb</span><span class="p">],</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Za</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L470" class="blob-num js-line-number" data-line-number="470"></td>
        <td id="LC470" class="blob-code js-file-line"><span class="nx">ba</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">J</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">M</span><span class="o">?</span><span class="p">(</span><span class="nx">Qa</span><span class="o">=</span><span class="nx">Ib</span><span class="p">[</span><span class="nx">bb</span><span class="p">].</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">Ua</span><span class="p">],</span><span class="nx">ha</span><span class="o">=</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">a</span><span class="p">,</span><span class="nx">Ha</span><span class="o">=</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">ia</span><span class="o">=</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">eb</span><span class="o">=</span><span class="nx">Qa</span><span class="p">.</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="nx">eb</span><span class="o">=</span><span class="nx">ia</span><span class="o">=</span><span class="nx">Ha</span><span class="o">=</span><span class="nx">ha</span><span class="o">=</span><span class="nx">Ib</span><span class="p">[</span><span class="nx">bb</span><span class="p">].</span><span class="nx">faceNormals</span><span class="p">[</span><span class="nx">Ua</span><span class="p">],</span><span class="nx">$a</span><span class="o">=</span><span class="nx">Ab</span><span class="p">[</span><span class="nx">bb</span><span class="p">],</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="p">]</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">ha</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">Ha</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">ia</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">ia</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">ia</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">eb</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">eb</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">$a</span><span class="p">[</span><span class="nx">ga</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">eb</span><span class="p">.</span><span class="nx">z</span><span class="p">),</span><span class="nx">ga</span><span class="o">+=</span><span class="mi">12</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">__webglMorphTargetsBuffers</span><span class="p">[</span><span class="nx">bb</span><span class="p">]);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">yb</span><span class="p">[</span><span class="nx">bb</span><span class="p">],</span><span class="nx">H</span><span class="p">);</span><span class="nx">J</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">__webglMorphNormalsBuffers</span><span class="p">[</span><span class="nx">bb</span><span class="p">]),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L471" class="blob-num js-line-number" data-line-number="471"></td>
        <td id="LC471" class="blob-code js-file-line"><span class="nx">Ab</span><span class="p">[</span><span class="nx">bb</span><span class="p">],</span><span class="nx">H</span><span class="p">))}}</span><span class="k">if</span><span class="p">(</span><span class="nx">$b</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">oa</span><span class="o">=</span><span class="nx">$b</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">pa</span><span class="o">=</span><span class="nx">$b</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">ra</span><span class="o">=</span><span class="nx">$b</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="p">]</span><span class="o">=</span><span class="nx">oa</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">oa</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">oa</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">oa</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">ra</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ra</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ra</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ra</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">va</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">wa</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">xa</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="p">]</span><span class="o">=</span><span class="nx">va</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">va</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">va</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">va</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">xa</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">xa</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">xa</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">xa</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Y</span><span class="o">+=</span><span class="mi">12</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">oa</span><span class="o">=</span><span class="nx">$b</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L472" class="blob-num js-line-number" data-line-number="472"></td>
        <td id="LC472" class="blob-code js-file-line"><span class="nx">pa</span><span class="o">=</span><span class="nx">$b</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">ra</span><span class="o">=</span><span class="nx">$b</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">Ca</span><span class="o">=</span><span class="nx">$b</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="p">]</span><span class="o">=</span><span class="nx">oa</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">oa</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">oa</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">oa</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">pa</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">ra</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ra</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ra</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ra</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Na</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">Ca</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">va</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">wa</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">xa</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">pb</span><span class="o">=</span><span class="nx">dc</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="p">]</span><span class="o">=</span><span class="nx">va</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">va</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">va</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">va</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">wa</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">xa</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">xa</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">xa</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">xa</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">pb</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">pb</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">pb</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ma</span><span class="p">[</span><span class="nx">Y</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">pb</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L473" class="blob-num js-line-number" data-line-number="473"></td>
        <td id="LC473" class="blob-code js-file-line"><span class="nx">Y</span><span class="o">+=</span><span class="mi">16</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">Y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">__webglSkinIndicesBuffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Ma</span><span class="p">,</span><span class="nx">H</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">__webglSkinWeightsBuffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Na</span><span class="p">,</span><span class="nx">H</span><span class="p">))}</span><span class="k">if</span><span class="p">(</span><span class="nx">Xb</span><span class="o">&amp;&amp;</span><span class="nx">K</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">T</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">,</span><span class="nx">X</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="mi">3</span><span class="o">===</span><span class="nx">T</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">K</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="o">?</span><span class="p">(</span><span class="nx">ka</span><span class="o">=</span><span class="nx">T</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">na</span><span class="o">=</span><span class="nx">T</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">la</span><span class="o">=</span><span class="nx">T</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">:</span><span class="nx">la</span><span class="o">=</span><span class="nx">na</span><span class="o">=</span><span class="nx">ka</span><span class="o">=</span><span class="nx">X</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="p">]</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">na</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">na</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">na</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">Va</span><span class="o">+=</span><span class="mi">9</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L474" class="blob-num js-line-number" data-line-number="474"></td>
        <td id="LC474" class="blob-code js-file-line"><span class="nx">kb</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">T</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">,</span><span class="nx">X</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="mi">4</span><span class="o">===</span><span class="nx">T</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">K</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="o">?</span><span class="p">(</span><span class="nx">ka</span><span class="o">=</span><span class="nx">T</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">na</span><span class="o">=</span><span class="nx">T</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">la</span><span class="o">=</span><span class="nx">T</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">ua</span><span class="o">=</span><span class="nx">T</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span><span class="o">:</span><span class="nx">ua</span><span class="o">=</span><span class="nx">la</span><span class="o">=</span><span class="nx">na</span><span class="o">=</span><span class="nx">ka</span><span class="o">=</span><span class="nx">X</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="p">]</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">ka</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">na</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">na</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">na</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">la</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ua</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ua</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">db</span><span class="p">[</span><span class="nx">Va</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ua</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">Va</span><span class="o">+=</span><span class="mi">12</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">Va</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">db</span><span class="p">,</span><span class="nx">H</span><span class="p">))}</span><span class="k">if</span><span class="p">(</span><span class="nx">Sb</span><span class="o">&amp;&amp;</span><span class="nx">qb</span><span class="p">.</span><span class="nx">hasTangents</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">qa</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">,</span><span class="nx">Z</span><span class="o">=</span><span class="nx">qa</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">da</span><span class="o">=</span><span class="nx">qa</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">ya</span><span class="o">=</span><span class="nx">qa</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="p">]</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L475" class="blob-num js-line-number" data-line-number="475"></td>
        <td id="LC475" class="blob-code js-file-line"><span class="nx">Z</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">da</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">da</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">da</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">da</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">ya</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ya</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ya</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ya</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Da</span><span class="o">+=</span><span class="mi">12</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">qa</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">,</span><span class="nx">Z</span><span class="o">=</span><span class="nx">qa</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">da</span><span class="o">=</span><span class="nx">qa</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">ya</span><span class="o">=</span><span class="nx">qa</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">ja</span><span class="o">=</span><span class="nx">qa</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="p">]</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">Z</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">da</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">da</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">da</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">da</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">ya</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ya</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ya</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ya</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">ja</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">ja</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">ja</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">La</span><span class="p">[</span><span class="nx">Da</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">ja</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Da</span><span class="o">+=</span><span class="mi">16</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L476" class="blob-num js-line-number" data-line-number="476"></td>
        <td id="LC476" class="blob-code js-file-line"><span class="nx">C</span><span class="p">.</span><span class="nx">__webglTangentBuffer</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">La</span><span class="p">,</span><span class="nx">H</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">Rb</span><span class="o">&amp;&amp;</span><span class="nx">V</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">O</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">,</span><span class="nx">ea</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">normal</span><span class="p">,</span><span class="mi">3</span><span class="o">===</span><span class="nx">O</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">M</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">za</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">3</span><span class="o">&gt;</span><span class="nx">za</span><span class="p">;</span><span class="nx">za</span><span class="o">++</span><span class="p">)</span><span class="nx">Fa</span><span class="o">=</span><span class="nx">O</span><span class="p">[</span><span class="nx">za</span><span class="p">],</span><span class="nx">Sa</span><span class="p">[</span><span class="nx">jb</span><span class="p">]</span><span class="o">=</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Sa</span><span class="p">[</span><span class="nx">jb</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Sa</span><span class="p">[</span><span class="nx">jb</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">jb</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">za</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">3</span><span class="o">&gt;</span><span class="nx">za</span><span class="p">;</span><span class="nx">za</span><span class="o">++</span><span class="p">)</span><span class="nx">Sa</span><span class="p">[</span><span class="nx">jb</span><span class="p">]</span><span class="o">=</span><span class="nx">ea</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Sa</span><span class="p">[</span><span class="nx">jb</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">ea</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Sa</span><span class="p">[</span><span class="nx">jb</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">ea</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">jb</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">O</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">,</span><span class="nx">ea</span><span class="o">=</span><span class="nx">Q</span><span class="p">.</span><span class="nx">normal</span><span class="p">,</span><span class="mi">4</span><span class="o">===</span><span class="nx">O</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">M</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">za</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">4</span><span class="o">&gt;</span><span class="nx">za</span><span class="p">;</span><span class="nx">za</span><span class="o">++</span><span class="p">)</span><span class="nx">Fa</span><span class="o">=</span><span class="nx">O</span><span class="p">[</span><span class="nx">za</span><span class="p">],</span><span class="nx">Sa</span><span class="p">[</span><span class="nx">jb</span><span class="p">]</span><span class="o">=</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Sa</span><span class="p">[</span><span class="nx">jb</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Sa</span><span class="p">[</span><span class="nx">jb</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">jb</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">za</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">4</span><span class="o">&gt;</span><span class="nx">za</span><span class="p">;</span><span class="nx">za</span><span class="o">++</span><span class="p">)</span><span class="nx">Sa</span><span class="p">[</span><span class="nx">jb</span><span class="p">]</span><span class="o">=</span><span class="nx">ea</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Sa</span><span class="p">[</span><span class="nx">jb</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L477" class="blob-num js-line-number" data-line-number="477"></td>
        <td id="LC477" class="blob-code js-file-line"><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">ea</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Sa</span><span class="p">[</span><span class="nx">jb</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">ea</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">jb</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Sa</span><span class="p">,</span><span class="nx">H</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">Hb</span><span class="o">&amp;&amp;</span><span class="nx">Jb</span><span class="o">&amp;&amp;</span><span class="nx">L</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">N</span><span class="o">=</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">],</span><span class="nx">fa</span><span class="o">=</span><span class="nx">Jb</span><span class="p">[</span><span class="nx">N</span><span class="p">],</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">fa</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">za</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">3</span><span class="o">&gt;</span><span class="nx">za</span><span class="p">;</span><span class="nx">za</span><span class="o">++</span><span class="p">)</span><span class="nx">Pa</span><span class="o">=</span><span class="nx">fa</span><span class="p">[</span><span class="nx">za</span><span class="p">],</span><span class="nx">fb</span><span class="p">[</span><span class="nx">Wa</span><span class="p">]</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">fb</span><span class="p">[</span><span class="nx">Wa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Wa</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">N</span><span class="o">=</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">],</span><span class="nx">fa</span><span class="o">=</span><span class="nx">Jb</span><span class="p">[</span><span class="nx">N</span><span class="p">],</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">fa</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">za</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">4</span><span class="o">&gt;</span><span class="nx">za</span><span class="p">;</span><span class="nx">za</span><span class="o">++</span><span class="p">)</span><span class="nx">Pa</span><span class="o">=</span><span class="nx">fa</span><span class="p">[</span><span class="nx">za</span><span class="p">],</span><span class="nx">fb</span><span class="p">[</span><span class="nx">Wa</span><span class="p">]</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">fb</span><span class="p">[</span><span class="nx">Wa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Pa</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Wa</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">Wa</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">__webglUVBuffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">fb</span><span class="p">,</span><span class="nx">H</span><span class="p">))}</span><span class="k">if</span><span class="p">(</span><span class="nx">Hb</span><span class="o">&amp;&amp;</span><span class="nx">Lb</span><span class="o">&amp;&amp;</span><span class="nx">L</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">N</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L478" class="blob-num js-line-number" data-line-number="478"></td>
        <td id="LC478" class="blob-code js-file-line"><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">],</span><span class="nx">aa</span><span class="o">=</span><span class="nx">Lb</span><span class="p">[</span><span class="nx">N</span><span class="p">],</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">aa</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">za</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">3</span><span class="o">&gt;</span><span class="nx">za</span><span class="p">;</span><span class="nx">za</span><span class="o">++</span><span class="p">)</span><span class="nx">Ra</span><span class="o">=</span><span class="nx">aa</span><span class="p">[</span><span class="nx">za</span><span class="p">],</span><span class="nx">ib</span><span class="p">[</span><span class="nx">Xa</span><span class="p">]</span><span class="o">=</span><span class="nx">Ra</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">ib</span><span class="p">[</span><span class="nx">Xa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ra</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Xa</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">N</span><span class="o">=</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">],</span><span class="nx">aa</span><span class="o">=</span><span class="nx">Lb</span><span class="p">[</span><span class="nx">N</span><span class="p">],</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">aa</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">za</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">4</span><span class="o">&gt;</span><span class="nx">za</span><span class="p">;</span><span class="nx">za</span><span class="o">++</span><span class="p">)</span><span class="nx">Ra</span><span class="o">=</span><span class="nx">aa</span><span class="p">[</span><span class="nx">za</span><span class="p">],</span><span class="nx">ib</span><span class="p">[</span><span class="nx">Xa</span><span class="p">]</span><span class="o">=</span><span class="nx">Ra</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">ib</span><span class="p">[</span><span class="nx">Xa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ra</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Xa</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">Xa</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">__webglUV2Buffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ib</span><span class="p">,</span><span class="nx">H</span><span class="p">))}</span><span class="k">if</span><span class="p">(</span><span class="nx">Gb</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Mb</span><span class="p">[</span><span class="nx">Ka</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="p">,</span><span class="nx">Mb</span><span class="p">[</span><span class="nx">Ka</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">Mb</span><span class="p">[</span><span class="nx">Ka</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">Ka</span><span class="o">+=</span><span class="mi">3</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">ob</span><span class="o">+=</span><span class="mi">6</span><span class="p">,</span><span class="nx">Ta</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Mb</span><span class="p">[</span><span class="nx">Ka</span><span class="p">]</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L479" class="blob-num js-line-number" data-line-number="479"></td>
        <td id="LC479" class="blob-code js-file-line"><span class="nx">Ta</span><span class="p">,</span><span class="nx">Mb</span><span class="p">[</span><span class="nx">Ka</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">Mb</span><span class="p">[</span><span class="nx">Ka</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="nx">Mb</span><span class="p">[</span><span class="nx">Ka</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">Mb</span><span class="p">[</span><span class="nx">Ka</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">Mb</span><span class="p">[</span><span class="nx">Ka</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="nx">Ka</span><span class="o">+=</span><span class="mi">6</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">2</span><span class="p">,</span><span class="nx">wb</span><span class="p">[</span><span class="nx">ob</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">Ta</span><span class="o">+</span><span class="mi">3</span><span class="p">,</span><span class="nx">ob</span><span class="o">+=</span><span class="mi">8</span><span class="p">,</span><span class="nx">Ta</span><span class="o">+=</span><span class="mi">4</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">__webglFaceBuffer</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Mb</span><span class="p">,</span><span class="nx">H</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">C</span><span class="p">.</span><span class="nx">__webglLineBuffer</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">wb</span><span class="p">,</span><span class="nx">H</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">Bb</span><span class="p">){</span><span class="nx">za</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">ub</span><span class="o">=</span><span class="nx">Bb</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">za</span><span class="o">&lt;</span><span class="nx">ub</span><span class="p">;</span><span class="nx">za</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">u</span><span class="o">=</span><span class="nx">Bb</span><span class="p">[</span><span class="nx">za</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">__original</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="p">){</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span></td>
      </tr>
      <tr>
        <td id="L480" class="blob-num js-line-number" data-line-number="480"></td>
        <td id="LC480" class="blob-code js-file-line"><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">||</span><span class="s2">&quot;vertices&quot;</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">x</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="nx">x</span><span class="o">+=</span><span class="mi">4</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;faces&quot;</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">Aa</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Aa</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Aa</span><span class="p">,</span><span class="nx">x</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">Aa</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L481" class="blob-num js-line-number" data-line-number="481"></td>
        <td id="LC481" class="blob-code js-file-line"><span class="nx">Aa</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Aa</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">Aa</span><span class="p">,</span><span class="nx">x</span><span class="o">+=</span><span class="mi">4</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">2</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">||</span><span class="s2">&quot;vertices&quot;</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">R</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">+=</span><span class="mi">6</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">R</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">ba</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L482" class="blob-num js-line-number" data-line-number="482"></td>
        <td id="LC482" class="blob-code js-file-line"><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">+=</span><span class="mi">8</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;faces&quot;</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">P</span><span class="o">=</span><span class="nx">S</span><span class="o">=</span><span class="nx">R</span><span class="o">=</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">+=</span><span class="mi">6</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">ba</span><span class="o">=</span><span class="nx">P</span><span class="o">=</span><span class="nx">S</span><span class="o">=</span><span class="nx">R</span><span class="o">=</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">x</span><span class="o">+=</span><span class="mi">8</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">3</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">size</span><span class="p">){</span><span class="kd">var</span> <span class="nx">W</span><span class="p">;</span><span class="nx">W</span><span class="o">=</span><span class="s2">&quot;c&quot;</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="p">[</span><span class="s2">&quot;r&quot;</span><span class="p">,</span><span class="s2">&quot;g&quot;</span><span class="p">,</span><span class="s2">&quot;b&quot;</span><span class="p">]</span><span class="o">:</span><span class="p">[</span><span class="s2">&quot;x&quot;</span><span class="p">,</span><span class="s2">&quot;y&quot;</span><span class="p">,</span><span class="s2">&quot;z&quot;</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">||</span></td>
      </tr>
      <tr>
        <td id="L483" class="blob-num js-line-number" data-line-number="483"></td>
        <td id="LC483" class="blob-code js-file-line"><span class="s2">&quot;vertices&quot;</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">R</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">x</span><span class="o">+=</span><span class="mi">9</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">R</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">ba</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span></td>
      </tr>
      <tr>
        <td id="L484" class="blob-num js-line-number" data-line-number="484"></td>
        <td id="LC484" class="blob-code js-file-line"><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">x</span><span class="o">+=</span><span class="mi">12</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;faces&quot;</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">P</span><span class="o">=</span><span class="nx">S</span><span class="o">=</span><span class="nx">R</span><span class="o">=</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">x</span><span class="o">+=</span><span class="mi">9</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">ba</span><span class="o">=</span><span class="nx">P</span><span class="o">=</span><span class="nx">S</span><span class="o">=</span><span class="nx">R</span><span class="o">=</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span></td>
      </tr>
      <tr>
        <td id="L485" class="blob-num js-line-number" data-line-number="485"></td>
        <td id="LC485" class="blob-code js-file-line"><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">x</span><span class="o">+=</span><span class="mi">12</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;faceVertices&quot;</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">R</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L486" class="blob-num js-line-number" data-line-number="486"></td>
        <td id="LC486" class="blob-code js-file-line"><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">x</span><span class="o">+=</span><span class="mi">9</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">R</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">ba</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">0</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">[</span><span class="nx">W</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">x</span><span class="o">+=</span><span class="mi">12</span><span class="p">}}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">4</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">||</span><span class="s2">&quot;vertices&quot;</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">R</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L487" class="blob-num js-line-number" data-line-number="487"></td>
        <td id="LC487" class="blob-code js-file-line"><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">x</span><span class="o">+=</span><span class="mi">12</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Q</span><span class="o">=</span><span class="nx">kb</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">R</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">ba</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Q</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L488" class="blob-num js-line-number" data-line-number="488"></td>
        <td id="LC488" class="blob-code js-file-line"><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">x</span><span class="o">+=</span><span class="mi">16</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;faces&quot;</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">P</span><span class="o">=</span><span class="nx">S</span><span class="o">=</span><span class="nx">R</span><span class="o">=</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">x</span><span class="o">+=</span><span class="mi">12</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">ba</span><span class="o">=</span><span class="nx">P</span><span class="o">=</span><span class="nx">S</span><span class="o">=</span><span class="nx">R</span><span class="o">=</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L489" class="blob-num js-line-number" data-line-number="489"></td>
        <td id="LC489" class="blob-code js-file-line"><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">x</span><span class="o">+=</span><span class="mi">16</span><span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;faceVertices&quot;</span><span class="o">===</span><span class="nx">u</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">){</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">sa</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">sa</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">R</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L490" class="blob-num js-line-number" data-line-number="490"></td>
        <td id="LC490" class="blob-code js-file-line"><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">x</span><span class="o">+=</span><span class="mi">12</span><span class="p">;</span><span class="nx">E</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">D</span><span class="o">=</span><span class="nx">ta</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">E</span><span class="o">&lt;</span><span class="nx">D</span><span class="p">;</span><span class="nx">E</span><span class="o">++</span><span class="p">)</span><span class="nx">Aa</span><span class="o">=</span><span class="nx">u</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ta</span><span class="p">[</span><span class="nx">E</span><span class="p">]],</span><span class="nx">R</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">S</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">P</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">ba</span><span class="o">=</span><span class="nx">Aa</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">R</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">4</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">5</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">6</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">7</span><span class="p">]</span><span class="o">=</span><span class="nx">S</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">8</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">9</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">10</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">11</span><span class="p">]</span><span class="o">=</span><span class="nx">P</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">12</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">13</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">14</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">x</span><span class="o">+</span><span class="mi">15</span><span class="p">]</span><span class="o">=</span><span class="nx">ba</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">x</span><span class="o">+=</span><span class="mi">16</span><span class="p">}</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">buffer</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">u</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">H</span><span class="p">)}}</span><span class="nx">I</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L491" class="blob-num js-line-number" data-line-number="491"></td>
        <td id="LC491" class="blob-code js-file-line"><span class="p">(</span><span class="k">delete</span> <span class="nx">C</span><span class="p">.</span><span class="nx">__inittedArrays</span><span class="p">,</span><span class="k">delete</span> <span class="nx">C</span><span class="p">.</span><span class="nx">__colorArray</span><span class="p">,</span><span class="k">delete</span> <span class="nx">C</span><span class="p">.</span><span class="nx">__normalArray</span><span class="p">,</span><span class="k">delete</span> <span class="nx">C</span><span class="p">.</span><span class="nx">__tangentArray</span><span class="p">,</span><span class="k">delete</span> <span class="nx">C</span><span class="p">.</span><span class="nx">__uvArray</span><span class="p">,</span><span class="k">delete</span> <span class="nx">C</span><span class="p">.</span><span class="nx">__uv2Array</span><span class="p">,</span><span class="k">delete</span> <span class="nx">C</span><span class="p">.</span><span class="nx">__faceArray</span><span class="p">,</span><span class="k">delete</span> <span class="nx">C</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="p">,</span><span class="k">delete</span> <span class="nx">C</span><span class="p">.</span><span class="nx">__lineArray</span><span class="p">,</span><span class="k">delete</span> <span class="nx">C</span><span class="p">.</span><span class="nx">__skinIndexArray</span><span class="p">,</span><span class="k">delete</span> <span class="nx">C</span><span class="p">.</span><span class="nx">__skinWeightArray</span><span class="p">)}}</span><span class="nx">j</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">morphTargetsNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">elementsNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">uvsNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">tangentsNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">buffersNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="nx">p</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Ribbon</span><span class="p">){</span><span class="nx">p</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L492" class="blob-num js-line-number" data-line-number="492"></td>
        <td id="LC492" class="blob-code js-file-line"><span class="nx">j</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="o">||</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">Cb</span><span class="o">=</span><span class="nx">j</span><span class="p">,</span><span class="nx">Kb</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">,</span><span class="nx">nc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">oc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">pc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Tb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ba</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ub</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">xc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">yc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">gc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">gb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">hc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ia</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">rb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">kc</span><span class="o">=</span><span class="nx">Cb</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">lc</span><span class="o">=</span><span class="nx">Cb</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">mc</span><span class="o">=</span><span class="nx">Cb</span><span class="p">.</span><span class="nx">normals</span><span class="p">,</span><span class="nx">uc</span><span class="o">=</span><span class="nx">kc</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">vc</span><span class="o">=</span><span class="nx">lc</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">Yc</span><span class="o">=</span><span class="nx">mc</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">zc</span><span class="o">=</span><span class="nx">Cb</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="p">,</span><span class="nx">Ac</span><span class="o">=</span><span class="nx">Cb</span><span class="p">.</span><span class="nx">__colorArray</span><span class="p">,</span><span class="nx">Bc</span><span class="o">=</span><span class="nx">Cb</span><span class="p">.</span><span class="nx">__normalArray</span><span class="p">,</span><span class="nx">Zc</span><span class="o">=</span><span class="nx">Cb</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="p">,</span><span class="nx">$c</span><span class="o">=</span><span class="nx">Cb</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="p">,</span><span class="nx">Lc</span><span class="o">=</span><span class="nx">Cb</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Cb</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">nc</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L493" class="blob-num js-line-number" data-line-number="493"></td>
        <td id="LC493" class="blob-code js-file-line"><span class="mi">0</span><span class="p">;</span><span class="nx">nc</span><span class="o">&lt;</span><span class="nx">uc</span><span class="p">;</span><span class="nx">nc</span><span class="o">++</span><span class="p">)</span><span class="nx">Tb</span><span class="o">=</span><span class="nx">kc</span><span class="p">[</span><span class="nx">nc</span><span class="p">],</span><span class="nx">Ba</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">nc</span><span class="p">,</span><span class="nx">zc</span><span class="p">[</span><span class="nx">Ba</span><span class="p">]</span><span class="o">=</span><span class="nx">Tb</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">zc</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Tb</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">zc</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Tb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Cb</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">zc</span><span class="p">,</span><span class="nx">Kb</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">Zc</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">oc</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">oc</span><span class="o">&lt;</span><span class="nx">vc</span><span class="p">;</span><span class="nx">oc</span><span class="o">++</span><span class="p">)</span><span class="nx">Ub</span><span class="o">=</span><span class="nx">lc</span><span class="p">[</span><span class="nx">oc</span><span class="p">],</span><span class="nx">Ba</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">oc</span><span class="p">,</span><span class="nx">Ac</span><span class="p">[</span><span class="nx">Ba</span><span class="p">]</span><span class="o">=</span><span class="nx">Ub</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">Ac</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ub</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">Ac</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ub</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Cb</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Ac</span><span class="p">,</span><span class="nx">Kb</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">$c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">pc</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">pc</span><span class="o">&lt;</span><span class="nx">Yc</span><span class="p">;</span><span class="nx">pc</span><span class="o">++</span><span class="p">)</span><span class="nx">xc</span><span class="o">=</span><span class="nx">mc</span><span class="p">[</span><span class="nx">pc</span><span class="p">],</span><span class="nx">Ba</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">pc</span><span class="p">,</span><span class="nx">Bc</span><span class="p">[</span><span class="nx">Ba</span><span class="p">]</span><span class="o">=</span><span class="nx">xc</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Bc</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">xc</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Bc</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">xc</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Cb</span><span class="p">.</span><span class="nx">__webglNormalBuffer</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Bc</span><span class="p">,</span><span class="nx">Kb</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">Lc</span><span class="p">){</span><span class="nx">yc</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L494" class="blob-num js-line-number" data-line-number="494"></td>
        <td id="LC494" class="blob-code js-file-line"><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">gc</span><span class="o">=</span><span class="nx">Lc</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">yc</span><span class="o">&lt;</span><span class="nx">gc</span><span class="p">;</span><span class="nx">yc</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">Ia</span><span class="o">=</span><span class="nx">Lc</span><span class="p">[</span><span class="nx">yc</span><span class="p">],</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">||</span><span class="s2">&quot;vertices&quot;</span><span class="o">===</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">)){</span><span class="nx">Ba</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">hc</span><span class="o">=</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">===</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">gb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">gb</span><span class="o">&lt;</span><span class="nx">hc</span><span class="p">;</span><span class="nx">gb</span><span class="o">++</span><span class="p">)</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">gb</span><span class="p">]</span><span class="o">=</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">gb</span><span class="p">];</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">2</span><span class="o">===</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">gb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">gb</span><span class="o">&lt;</span><span class="nx">hc</span><span class="p">;</span><span class="nx">gb</span><span class="o">++</span><span class="p">)</span><span class="nx">rb</span><span class="o">=</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">gb</span><span class="p">],</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Ba</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ba</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">3</span><span class="o">===</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="o">===</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">gb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">gb</span><span class="o">&lt;</span><span class="nx">hc</span><span class="p">;</span><span class="nx">gb</span><span class="o">++</span><span class="p">)</span><span class="nx">rb</span><span class="o">=</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">gb</span><span class="p">],</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Ba</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">Ba</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">gb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">gb</span><span class="o">&lt;</span><span class="nx">hc</span><span class="p">;</span><span class="nx">gb</span><span class="o">++</span><span class="p">)</span><span class="nx">rb</span><span class="o">=</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">gb</span><span class="p">],</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Ba</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L495" class="blob-num js-line-number" data-line-number="495"></td>
        <td id="LC495" class="blob-code js-file-line"><span class="nx">rb</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ba</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">4</span><span class="o">===</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">gb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">gb</span><span class="o">&lt;</span><span class="nx">hc</span><span class="p">;</span><span class="nx">gb</span><span class="o">++</span><span class="p">)</span><span class="nx">rb</span><span class="o">=</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">gb</span><span class="p">],</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Ba</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Ba</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">rb</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Ba</span><span class="o">+=</span><span class="mi">4</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">buffer</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Ia</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">Kb</span><span class="p">)}}}</span><span class="nx">j</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">normalsNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="nx">p</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">){</span><span class="nx">p</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">lineDistancesNeedUpdate</span><span class="o">||</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">Db</span><span class="o">=</span><span class="nx">j</span><span class="p">,</span><span class="nx">Cc</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L496" class="blob-num js-line-number" data-line-number="496"></td>
        <td id="LC496" class="blob-code js-file-line"><span class="nx">qc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">rc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">sc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Dc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Oa</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ec</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Qc</span><span class="o">=</span><span class="nx">Db</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">Rc</span><span class="o">=</span><span class="nx">Db</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">Sc</span><span class="o">=</span><span class="nx">Db</span><span class="p">.</span><span class="nx">lineDistances</span><span class="p">,</span><span class="nx">ad</span><span class="o">=</span><span class="nx">Qc</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">bd</span><span class="o">=</span><span class="nx">Rc</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">cd</span><span class="o">=</span><span class="nx">Sc</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">Fc</span><span class="o">=</span><span class="nx">Db</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="p">,</span><span class="nx">Gc</span><span class="o">=</span><span class="nx">Db</span><span class="p">.</span><span class="nx">__colorArray</span><span class="p">,</span><span class="nx">Tc</span><span class="o">=</span><span class="nx">Db</span><span class="p">.</span><span class="nx">__lineDistanceArray</span><span class="p">,</span><span class="nx">dd</span><span class="o">=</span><span class="nx">Db</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="p">,</span><span class="nx">ed</span><span class="o">=</span><span class="nx">Db</span><span class="p">.</span><span class="nx">lineDistancesNeedUpdate</span><span class="p">,</span><span class="nx">Mc</span><span class="o">=</span><span class="nx">Db</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">,</span><span class="nx">Hc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Uc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">hb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ic</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">sb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ja</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Db</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">qc</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">qc</span><span class="o">&lt;</span><span class="nx">ad</span><span class="p">;</span><span class="nx">qc</span><span class="o">++</span><span class="p">)</span><span class="nx">Dc</span><span class="o">=</span><span class="nx">Qc</span><span class="p">[</span><span class="nx">qc</span><span class="p">],</span><span class="nx">Oa</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">qc</span><span class="p">,</span><span class="nx">Fc</span><span class="p">[</span><span class="nx">Oa</span><span class="p">]</span><span class="o">=</span><span class="nx">Dc</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Fc</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Dc</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Fc</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Dc</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Db</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L497" class="blob-num js-line-number" data-line-number="497"></td>
        <td id="LC497" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Fc</span><span class="p">,</span><span class="nx">Cc</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">dd</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">rc</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">rc</span><span class="o">&lt;</span><span class="nx">bd</span><span class="p">;</span><span class="nx">rc</span><span class="o">++</span><span class="p">)</span><span class="nx">Ec</span><span class="o">=</span><span class="nx">Rc</span><span class="p">[</span><span class="nx">rc</span><span class="p">],</span><span class="nx">Oa</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">rc</span><span class="p">,</span><span class="nx">Gc</span><span class="p">[</span><span class="nx">Oa</span><span class="p">]</span><span class="o">=</span><span class="nx">Ec</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">Gc</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ec</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">Gc</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ec</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Db</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Gc</span><span class="p">,</span><span class="nx">Cc</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">ed</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">sc</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">sc</span><span class="o">&lt;</span><span class="nx">cd</span><span class="p">;</span><span class="nx">sc</span><span class="o">++</span><span class="p">)</span><span class="nx">Tc</span><span class="p">[</span><span class="nx">sc</span><span class="p">]</span><span class="o">=</span><span class="nx">Sc</span><span class="p">[</span><span class="nx">sc</span><span class="p">];</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Db</span><span class="p">.</span><span class="nx">__webglLineDistanceBuffer</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Tc</span><span class="p">,</span><span class="nx">Cc</span><span class="p">)}</span><span class="k">if</span><span class="p">(</span><span class="nx">Mc</span><span class="p">){</span><span class="nx">Hc</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">Uc</span><span class="o">=</span><span class="nx">Mc</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">Hc</span><span class="o">&lt;</span><span class="nx">Uc</span><span class="p">;</span><span class="nx">Hc</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">Ja</span><span class="o">=</span><span class="nx">Mc</span><span class="p">[</span><span class="nx">Hc</span><span class="p">],</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">||</span><span class="s2">&quot;vertices&quot;</span><span class="o">===</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">)){</span><span class="nx">Oa</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ic</span><span class="o">=</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">===</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">hb</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L498" class="blob-num js-line-number" data-line-number="498"></td>
        <td id="LC498" class="blob-code js-file-line"><span class="mi">0</span><span class="p">;</span><span class="nx">hb</span><span class="o">&lt;</span><span class="nx">ic</span><span class="p">;</span><span class="nx">hb</span><span class="o">++</span><span class="p">)</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">hb</span><span class="p">]</span><span class="o">=</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">hb</span><span class="p">];</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">2</span><span class="o">===</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">hb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">hb</span><span class="o">&lt;</span><span class="nx">ic</span><span class="p">;</span><span class="nx">hb</span><span class="o">++</span><span class="p">)</span><span class="nx">sb</span><span class="o">=</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">hb</span><span class="p">],</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Oa</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Oa</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">3</span><span class="o">===</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="o">===</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">hb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">hb</span><span class="o">&lt;</span><span class="nx">ic</span><span class="p">;</span><span class="nx">hb</span><span class="o">++</span><span class="p">)</span><span class="nx">sb</span><span class="o">=</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">hb</span><span class="p">],</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Oa</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">Oa</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">hb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">hb</span><span class="o">&lt;</span><span class="nx">ic</span><span class="p">;</span><span class="nx">hb</span><span class="o">++</span><span class="p">)</span><span class="nx">sb</span><span class="o">=</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">hb</span><span class="p">],</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Oa</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Oa</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">4</span><span class="o">===</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">hb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">hb</span><span class="o">&lt;</span><span class="nx">ic</span><span class="p">;</span><span class="nx">hb</span><span class="o">++</span><span class="p">)</span><span class="nx">sb</span><span class="o">=</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">hb</span><span class="p">],</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Oa</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">Oa</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L499" class="blob-num js-line-number" data-line-number="499"></td>
        <td id="LC499" class="blob-code js-file-line"><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">sb</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">Oa</span><span class="o">+=</span><span class="mi">4</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">buffer</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Ja</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">Cc</span><span class="p">)}}}</span><span class="nx">j</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">lineDistancesNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="nx">p</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">i</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">){</span><span class="nx">p</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">||</span><span class="nx">j</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">||</span><span class="nx">i</span><span class="p">.</span><span class="nx">sortParticles</span><span class="o">||</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">Nb</span><span class="o">=</span><span class="nx">j</span><span class="p">,</span><span class="nx">Nc</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">DYNAMIC_DRAW</span><span class="p">,</span><span class="nx">tc</span><span class="o">=</span><span class="nx">i</span><span class="p">,</span><span class="nx">tb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ob</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Pb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ca</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Qb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">bc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ic</span><span class="o">=</span><span class="nx">Nb</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">Oc</span><span class="o">=</span><span class="nx">Ic</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">Pc</span><span class="o">=</span><span class="nx">Nb</span><span class="p">.</span><span class="nx">colors</span><span class="p">,</span><span class="nx">Vc</span><span class="o">=</span><span class="nx">Pc</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">ec</span><span class="o">=</span><span class="nx">Nb</span><span class="p">.</span><span class="nx">__vertexArray</span><span class="p">,</span><span class="nx">fc</span><span class="o">=</span><span class="nx">Nb</span><span class="p">.</span><span class="nx">__colorArray</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L500" class="blob-num js-line-number" data-line-number="500"></td>
        <td id="LC500" class="blob-code js-file-line"><span class="nx">Vb</span><span class="o">=</span><span class="nx">Nb</span><span class="p">.</span><span class="nx">__sortArray</span><span class="p">,</span><span class="nx">Wc</span><span class="o">=</span><span class="nx">Nb</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="p">,</span><span class="nx">Xc</span><span class="o">=</span><span class="nx">Nb</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="p">,</span><span class="nx">Wb</span><span class="o">=</span><span class="nx">Nb</span><span class="p">.</span><span class="nx">__webglCustomAttributesList</span><span class="p">,</span><span class="nx">Eb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">jc</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">ma</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Fb</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">Ea</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">$</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">tc</span><span class="p">.</span><span class="nx">sortParticles</span><span class="p">){</span><span class="nx">lb</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">xb</span><span class="p">);</span><span class="nx">lb</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">tc</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">tb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">tb</span><span class="o">&lt;</span><span class="nx">Oc</span><span class="p">;</span><span class="nx">tb</span><span class="o">++</span><span class="p">)</span><span class="nx">Pb</span><span class="o">=</span><span class="nx">Ic</span><span class="p">[</span><span class="nx">tb</span><span class="p">],</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">Pb</span><span class="p">),</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">applyProjection</span><span class="p">(</span><span class="nx">lb</span><span class="p">),</span><span class="nx">Vb</span><span class="p">[</span><span class="nx">tb</span><span class="p">]</span><span class="o">=</span><span class="p">[</span><span class="nx">Ga</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">tb</span><span class="p">];</span><span class="nx">Vb</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">tb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">tb</span><span class="o">&lt;</span><span class="nx">Oc</span><span class="p">;</span><span class="nx">tb</span><span class="o">++</span><span class="p">)</span><span class="nx">Pb</span><span class="o">=</span><span class="nx">Ic</span><span class="p">[</span><span class="nx">Vb</span><span class="p">[</span><span class="nx">tb</span><span class="p">][</span><span class="mi">1</span><span class="p">]],</span><span class="nx">ca</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">tb</span><span class="p">,</span><span class="nx">ec</span><span class="p">[</span><span class="nx">ca</span><span class="p">]</span><span class="o">=</span><span class="nx">Pb</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">ec</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Pb</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">ec</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Pb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">Ob</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ob</span><span class="o">&lt;</span><span class="nx">Vc</span><span class="p">;</span><span class="nx">Ob</span><span class="o">++</span><span class="p">)</span><span class="nx">ca</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">Ob</span><span class="p">,</span><span class="nx">bc</span><span class="o">=</span><span class="nx">Pc</span><span class="p">[</span><span class="nx">Vb</span><span class="p">[</span><span class="nx">Ob</span><span class="p">][</span><span class="mi">1</span><span class="p">]],</span><span class="nx">fc</span><span class="p">[</span><span class="nx">ca</span><span class="p">]</span><span class="o">=</span><span class="nx">bc</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">fc</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">bc</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">fc</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">bc</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Wb</span><span class="p">){</span><span class="nx">Eb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">jc</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L501" class="blob-num js-line-number" data-line-number="501"></td>
        <td id="LC501" class="blob-code js-file-line"><span class="nx">Wb</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">Eb</span><span class="o">&lt;</span><span class="nx">jc</span><span class="p">;</span><span class="nx">Eb</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">$</span><span class="o">=</span><span class="nx">Wb</span><span class="p">[</span><span class="nx">Eb</span><span class="p">],</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">||</span><span class="s2">&quot;vertices&quot;</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">ca</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">Fb</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="mi">1</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ma</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ma</span><span class="o">&lt;</span><span class="nx">Fb</span><span class="p">;</span><span class="nx">ma</span><span class="o">++</span><span class="p">)</span><span class="nx">Qb</span><span class="o">=</span><span class="nx">Vb</span><span class="p">[</span><span class="nx">ma</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ma</span><span class="p">]</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Qb</span><span class="p">];</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">2</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ma</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ma</span><span class="o">&lt;</span><span class="nx">Fb</span><span class="p">;</span><span class="nx">ma</span><span class="o">++</span><span class="p">)</span><span class="nx">Qb</span><span class="o">=</span><span class="nx">Vb</span><span class="p">[</span><span class="nx">ma</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="nx">Ea</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Qb</span><span class="p">],</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">ca</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">3</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ma</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ma</span><span class="o">&lt;</span><span class="nx">Fb</span><span class="p">;</span><span class="nx">ma</span><span class="o">++</span><span class="p">)</span><span class="nx">Qb</span><span class="o">=</span><span class="nx">Vb</span><span class="p">[</span><span class="nx">ma</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="nx">Ea</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Qb</span><span class="p">],</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">ca</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">ma</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ma</span><span class="o">&lt;</span><span class="nx">Fb</span><span class="p">;</span><span class="nx">ma</span><span class="o">++</span><span class="p">)</span><span class="nx">Qb</span><span class="o">=</span><span class="nx">Vb</span><span class="p">[</span><span class="nx">ma</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="nx">Ea</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Qb</span><span class="p">],</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L502" class="blob-num js-line-number" data-line-number="502"></td>
        <td id="LC502" class="blob-code js-file-line"><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">ca</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">4</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ma</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ma</span><span class="o">&lt;</span><span class="nx">Fb</span><span class="p">;</span><span class="nx">ma</span><span class="o">++</span><span class="p">)</span><span class="nx">Qb</span><span class="o">=</span><span class="nx">Vb</span><span class="p">[</span><span class="nx">ma</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="nx">Ea</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">Qb</span><span class="p">],</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">ca</span><span class="o">+=</span><span class="mi">4</span><span class="p">}}</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="nx">Wc</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">tb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">tb</span><span class="o">&lt;</span><span class="nx">Oc</span><span class="p">;</span><span class="nx">tb</span><span class="o">++</span><span class="p">)</span><span class="nx">Pb</span><span class="o">=</span><span class="nx">Ic</span><span class="p">[</span><span class="nx">tb</span><span class="p">],</span><span class="nx">ca</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">tb</span><span class="p">,</span><span class="nx">ec</span><span class="p">[</span><span class="nx">ca</span><span class="p">]</span><span class="o">=</span><span class="nx">Pb</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">ec</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Pb</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">ec</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Pb</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Xc</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">Ob</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">Ob</span><span class="o">&lt;</span><span class="nx">Vc</span><span class="p">;</span><span class="nx">Ob</span><span class="o">++</span><span class="p">)</span><span class="nx">bc</span><span class="o">=</span><span class="nx">Pc</span><span class="p">[</span><span class="nx">Ob</span><span class="p">],</span><span class="nx">ca</span><span class="o">=</span><span class="mi">3</span><span class="o">*</span><span class="nx">Ob</span><span class="p">,</span><span class="nx">fc</span><span class="p">[</span><span class="nx">ca</span><span class="p">]</span><span class="o">=</span><span class="nx">bc</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">fc</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">bc</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">fc</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">bc</span><span class="p">.</span><span class="nx">b</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">Wb</span><span class="p">){</span><span class="nx">Eb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">jc</span><span class="o">=</span><span class="nx">Wb</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">Eb</span><span class="o">&lt;</span><span class="nx">jc</span><span class="p">;</span><span class="nx">Eb</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">$</span><span class="o">=</span><span class="nx">Wb</span><span class="p">[</span><span class="nx">Eb</span><span class="p">],</span><span class="nx">$</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">boundTo</span><span class="o">||</span><span class="s2">&quot;vertices&quot;</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">boundTo</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">Fb</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">value</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">ca</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ma</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L503" class="blob-num js-line-number" data-line-number="503"></td>
        <td id="LC503" class="blob-code js-file-line"><span class="mi">0</span><span class="p">;</span><span class="nx">ma</span><span class="o">&lt;</span><span class="nx">Fb</span><span class="p">;</span><span class="nx">ma</span><span class="o">++</span><span class="p">)</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ma</span><span class="p">]</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ma</span><span class="p">];</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">2</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ma</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ma</span><span class="o">&lt;</span><span class="nx">Fb</span><span class="p">;</span><span class="nx">ma</span><span class="o">++</span><span class="p">)</span><span class="nx">Ea</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ma</span><span class="p">],</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">ca</span><span class="o">+=</span><span class="mi">2</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">3</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">type</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ma</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ma</span><span class="o">&lt;</span><span class="nx">Fb</span><span class="p">;</span><span class="nx">ma</span><span class="o">++</span><span class="p">)</span><span class="nx">Ea</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ma</span><span class="p">],</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">ca</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">ma</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ma</span><span class="o">&lt;</span><span class="nx">Fb</span><span class="p">;</span><span class="nx">ma</span><span class="o">++</span><span class="p">)</span><span class="nx">Ea</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ma</span><span class="p">],</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">ca</span><span class="o">+=</span><span class="mi">3</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">4</span><span class="o">===</span><span class="nx">$</span><span class="p">.</span><span class="nx">size</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">ma</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ma</span><span class="o">&lt;</span><span class="nx">Fb</span><span class="p">;</span><span class="nx">ma</span><span class="o">++</span><span class="p">)</span><span class="nx">Ea</span><span class="o">=</span><span class="nx">$</span><span class="p">.</span><span class="nx">value</span><span class="p">[</span><span class="nx">ma</span><span class="p">],</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">[</span><span class="nx">ca</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">Ea</span><span class="p">.</span><span class="nx">w</span><span class="p">,</span><span class="nx">ca</span><span class="o">+=</span><span class="mi">4</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="nx">Wc</span><span class="o">||</span></td>
      </tr>
      <tr>
        <td id="L504" class="blob-num js-line-number" data-line-number="504"></td>
        <td id="LC504" class="blob-code js-file-line"><span class="nx">tc</span><span class="p">.</span><span class="nx">sortParticles</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Nb</span><span class="p">.</span><span class="nx">__webglVertexBuffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">ec</span><span class="p">,</span><span class="nx">Nc</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">Xc</span><span class="o">||</span><span class="nx">tc</span><span class="p">.</span><span class="nx">sortParticles</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">Nb</span><span class="p">.</span><span class="nx">__webglColorBuffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">fc</span><span class="p">,</span><span class="nx">Nc</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">Wb</span><span class="p">){</span><span class="nx">Eb</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">jc</span><span class="o">=</span><span class="nx">Wb</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">Eb</span><span class="o">&lt;</span><span class="nx">jc</span><span class="p">;</span><span class="nx">Eb</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">$</span><span class="o">=</span><span class="nx">Wb</span><span class="p">[</span><span class="nx">Eb</span><span class="p">],</span><span class="nx">$</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">||</span><span class="nx">tc</span><span class="p">.</span><span class="nx">sortParticles</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">buffer</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">$</span><span class="p">.</span><span class="nx">array</span><span class="p">,</span><span class="nx">Nc</span><span class="p">)}}</span><span class="nx">j</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">attributes</span><span class="o">&amp;&amp;</span><span class="nx">s</span><span class="p">(</span><span class="nx">p</span><span class="p">)}}};</span><span class="k">this</span><span class="p">.</span><span class="nx">initMaterial</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;dispose&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L505" class="blob-num js-line-number" data-line-number="505"></td>
        <td id="LC505" class="blob-code js-file-line"><span class="nx">uc</span><span class="p">);</span><span class="kd">var</span> <span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">;</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshDepthMaterial</span><span class="o">?</span><span class="nx">n</span><span class="o">=</span><span class="s2">&quot;depth&quot;</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshNormalMaterial</span><span class="o">?</span><span class="nx">n</span><span class="o">=</span><span class="s2">&quot;normal&quot;</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="o">?</span><span class="nx">n</span><span class="o">=</span><span class="s2">&quot;basic&quot;</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshLambertMaterial</span><span class="o">?</span><span class="nx">n</span><span class="o">=</span><span class="s2">&quot;lambert&quot;</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshPhongMaterial</span><span class="o">?</span><span class="nx">n</span><span class="o">=</span><span class="s2">&quot;phong&quot;</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="o">?</span><span class="nx">n</span><span class="o">=</span><span class="s2">&quot;basic&quot;</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineDashedMaterial</span><span class="o">?</span><span class="nx">n</span><span class="o">=</span><span class="s2">&quot;dashed&quot;</span><span class="o">:</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleBasicMaterial</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="s2">&quot;particle_basic&quot;</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderLib</span><span class="p">[</span><span class="nx">n</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">uniforms</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexShader</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L506" class="blob-num js-line-number" data-line-number="506"></td>
        <td id="LC506" class="blob-code js-file-line"><span class="nx">p</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="o">=</span><span class="nx">p</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">}</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">h</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="o">||</span><span class="p">(</span><span class="nx">h</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="o">++</span><span class="p">,</span><span class="nx">h</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLight</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="o">++</span><span class="p">,</span><span class="nx">h</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="o">++</span><span class="p">,</span><span class="nx">h</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">HemisphereLight</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="o">++</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">r</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="o">&lt;</span><span class="nx">q</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">)</span><span class="nx">s</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">r</span><span class="p">],</span><span class="nx">s</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="o">++</span><span class="p">,</span><span class="nx">s</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="o">&amp;&amp;!</span><span class="nx">s</span><span class="p">.</span><span class="nx">shadowCascade</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="o">++</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nx">p</span><span class="p">;</span><span class="nx">Bb</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">useVertexTexture</span><span class="o">?</span><span class="nx">l</span><span class="o">=</span><span class="mi">1024</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">MAX_VERTEX_UNIFORM_VECTORS</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L507" class="blob-num js-line-number" data-line-number="507"></td>
        <td id="LC507" class="blob-code js-file-line"><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">b</span><span class="o">-</span><span class="mi">20</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;WebGLRenderer: too many bones - &quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="o">+</span><span class="s2">&quot;, this GPU supports just &quot;</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="s2">&quot; (try OpenGL instead of ANGLE)&quot;</span><span class="p">)),</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="o">:</span><span class="p">{</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">attributes</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">defines</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">{</span><span class="nx">map</span><span class="o">:!!</span><span class="nx">a</span><span class="p">.</span><span class="nx">map</span><span class="p">,</span><span class="nx">envMap</span><span class="o">:!!</span><span class="nx">a</span><span class="p">.</span><span class="nx">envMap</span><span class="p">,</span><span class="nx">lightMap</span><span class="o">:!!</span><span class="nx">a</span><span class="p">.</span><span class="nx">lightMap</span><span class="p">,</span><span class="nx">bumpMap</span><span class="o">:!!</span><span class="nx">a</span><span class="p">.</span><span class="nx">bumpMap</span><span class="p">,</span><span class="nx">normalMap</span><span class="o">:!!</span><span class="nx">a</span><span class="p">.</span><span class="nx">normalMap</span><span class="p">,</span><span class="nx">specularMap</span><span class="o">:!!</span><span class="nx">a</span><span class="p">.</span><span class="nx">specularMap</span><span class="p">,</span><span class="nx">vertexColors</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">,</span><span class="nx">fog</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">useFog</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">fog</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L508" class="blob-num js-line-number" data-line-number="508"></td>
        <td id="LC508" class="blob-code js-file-line"><span class="nx">fogExp</span><span class="o">:</span><span class="nx">c</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">FogExp2</span><span class="p">,</span><span class="nx">sizeAttenuation</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="p">,</span><span class="nx">skinning</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">skinning</span><span class="p">,</span><span class="nx">maxBones</span><span class="o">:</span><span class="nx">l</span><span class="p">,</span><span class="nx">useVertexTexture</span><span class="o">:</span><span class="nx">Bb</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">useVertexTexture</span><span class="p">,</span><span class="nx">boneTextureWidth</span><span class="o">:</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">boneTextureWidth</span><span class="p">,</span><span class="nx">boneTextureHeight</span><span class="o">:</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">boneTextureHeight</span><span class="p">,</span><span class="nx">morphTargets</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">,</span><span class="nx">morphNormals</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">,</span><span class="nx">maxMorphTargets</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMorphTargets</span><span class="p">,</span><span class="nx">maxMorphNormals</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMorphNormals</span><span class="p">,</span><span class="nx">maxDirLights</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">maxPointLights</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">maxSpotLights</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">maxHemiLights</span><span class="o">:</span><span class="nx">g</span><span class="p">,</span><span class="nx">maxShadows</span><span class="o">:</span><span class="nx">m</span><span class="p">,</span><span class="nx">shadowMapEnabled</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapEnabled</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">receiveShadow</span><span class="p">,</span><span class="nx">shadowMapType</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapType</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L509" class="blob-num js-line-number" data-line-number="509"></td>
        <td id="LC509" class="blob-code js-file-line"><span class="nx">shadowMapDebug</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapDebug</span><span class="p">,</span><span class="nx">shadowMapCascade</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapCascade</span><span class="p">,</span><span class="nx">alphaTest</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">alphaTest</span><span class="p">,</span><span class="nx">metal</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">metal</span><span class="p">,</span><span class="nx">perPixel</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">perPixel</span><span class="p">,</span><span class="nx">wrapAround</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapAround</span><span class="p">,</span><span class="nx">doubleSided</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">side</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DoubleSide</span><span class="p">,</span><span class="nx">flipSided</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">side</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BackSide</span><span class="p">},</span><span class="nx">t</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">w</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="nx">n</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">r</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">q</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="nx">v</span> <span class="k">in</span> <span class="nx">s</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">v</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">s</span><span class="p">[</span><span class="nx">v</span><span class="p">]);</span><span class="k">for</span><span class="p">(</span><span class="nx">t</span> <span class="k">in</span> <span class="nx">c</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">t</span><span class="p">]);</span><span class="nx">n</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">join</span><span class="p">();</span><span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">V</span><span class="p">[</span><span class="nx">t</span><span class="p">],</span><span class="nx">d</span><span class="p">.</span><span class="nx">code</span><span class="o">===</span><span class="nx">n</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">usedTimes</span><span class="o">++</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">program</span><span class="p">;</span><span class="k">break</span> <span class="nx">a</span><span class="p">}</span><span class="nx">t</span><span class="o">=</span><span class="s2">&quot;SHADOWMAP_TYPE_BASIC&quot;</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PCFShadowMap</span><span class="o">?</span><span class="nx">t</span><span class="o">=</span><span class="s2">&quot;SHADOWMAP_TYPE_PCF&quot;</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L510" class="blob-num js-line-number" data-line-number="510"></td>
        <td id="LC510" class="blob-code js-file-line"><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PCFSoftShadowMap</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="s2">&quot;SHADOWMAP_TYPE_PCF_SOFT&quot;</span><span class="p">);</span><span class="nx">v</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">w</span> <span class="k">in</span> <span class="nx">s</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">s</span><span class="p">[</span><span class="nx">w</span><span class="p">],</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="s2">&quot;#define &quot;</span><span class="o">+</span><span class="nx">w</span><span class="o">+</span><span class="s2">&quot; &quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">));</span><span class="nx">d</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span><span class="nx">w</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createProgram</span><span class="p">();</span><span class="nx">v</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;precision &quot;</span><span class="o">+</span><span class="nx">L</span><span class="o">+</span><span class="s2">&quot; float;&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">Gb</span><span class="o">?</span><span class="s2">&quot;#define VERTEX_TEXTURES&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">?</span><span class="s2">&quot;#define GAMMA_INPUT&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">gammaOutput</span><span class="o">?</span><span class="s2">&quot;#define GAMMA_OUTPUT&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">physicallyBasedShading</span><span class="o">?</span><span class="s2">&quot;#define PHYSICALLY_BASED_SHADING&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;#define MAX_DIR_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxDirLights</span><span class="p">,</span><span class="s2">&quot;#define MAX_POINT_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxPointLights</span><span class="p">,</span><span class="s2">&quot;#define MAX_SPOT_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxSpotLights</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L511" class="blob-num js-line-number" data-line-number="511"></td>
        <td id="LC511" class="blob-code js-file-line"><span class="s2">&quot;#define MAX_HEMI_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxHemiLights</span><span class="p">,</span><span class="s2">&quot;#define MAX_SHADOWS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxShadows</span><span class="p">,</span><span class="s2">&quot;#define MAX_BONES &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxBones</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">map</span><span class="o">?</span><span class="s2">&quot;#define USE_MAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">envMap</span><span class="o">?</span><span class="s2">&quot;#define USE_ENVMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">?</span><span class="s2">&quot;#define USE_LIGHTMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">bumpMap</span><span class="o">?</span><span class="s2">&quot;#define USE_BUMPMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">normalMap</span><span class="o">?</span><span class="s2">&quot;#define USE_NORMALMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">specularMap</span><span class="o">?</span><span class="s2">&quot;#define USE_SPECULARMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">?</span><span class="s2">&quot;#define USE_COLOR&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">skinning</span><span class="o">?</span><span class="s2">&quot;#define USE_SKINNING&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">useVertexTexture</span><span class="o">?</span><span class="s2">&quot;#define BONE_TEXTURE&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">boneTextureWidth</span><span class="o">?</span><span class="s2">&quot;#define N_BONE_PIXEL_X &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">boneTextureWidth</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L512" class="blob-num js-line-number" data-line-number="512"></td>
        <td id="LC512" class="blob-code js-file-line"><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">boneTextureHeight</span><span class="o">?</span><span class="s2">&quot;#define N_BONE_PIXEL_Y &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">boneTextureHeight</span><span class="p">.</span><span class="nx">toFixed</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">morphTargets</span><span class="o">?</span><span class="s2">&quot;#define USE_MORPHTARGETS&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">morphNormals</span><span class="o">?</span><span class="s2">&quot;#define USE_MORPHNORMALS&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">perPixel</span><span class="o">?</span><span class="s2">&quot;#define PHONG_PER_PIXEL&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">?</span><span class="s2">&quot;#define WRAP_AROUND&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">doubleSided</span><span class="o">?</span><span class="s2">&quot;#define DOUBLE_SIDED&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">flipSided</span><span class="o">?</span><span class="s2">&quot;#define FLIP_SIDED&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapEnabled</span><span class="o">?</span><span class="s2">&quot;#define USE_SHADOWMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapEnabled</span><span class="o">?</span><span class="s2">&quot;#define &quot;</span><span class="o">+</span><span class="nx">t</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapDebug</span><span class="o">?</span><span class="s2">&quot;#define SHADOWMAP_DEBUG&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapCascade</span><span class="o">?</span><span class="s2">&quot;#define SHADOWMAP_CASCADE&quot;</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L513" class="blob-num js-line-number" data-line-number="513"></td>
        <td id="LC513" class="blob-code js-file-line"><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="o">?</span><span class="s2">&quot;#define USE_SIZEATTENUATION&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\n#ifdef USE_MORPHNORMALS\nattribute vec3 morphNormal0;\nattribute vec3 morphNormal1;\nattribute vec3 morphNormal2;\nattribute vec3 morphNormal3;\n#else\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L514" class="blob-num js-line-number" data-line-number="514"></td>
        <td id="LC514" class="blob-code js-file-line"><span class="nx">t</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;precision &quot;</span><span class="o">+</span><span class="nx">L</span><span class="o">+</span><span class="s2">&quot; float;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">bumpMap</span><span class="o">||</span><span class="nx">c</span><span class="p">.</span><span class="nx">normalMap</span><span class="o">?</span><span class="s2">&quot;#extension GL_OES_standard_derivatives : enable&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="s2">&quot;#define MAX_DIR_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxDirLights</span><span class="p">,</span><span class="s2">&quot;#define MAX_POINT_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxPointLights</span><span class="p">,</span><span class="s2">&quot;#define MAX_SPOT_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxSpotLights</span><span class="p">,</span><span class="s2">&quot;#define MAX_HEMI_LIGHTS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxHemiLights</span><span class="p">,</span><span class="s2">&quot;#define MAX_SHADOWS &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxShadows</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">alphaTest</span><span class="o">?</span><span class="s2">&quot;#define ALPHATEST &quot;</span><span class="o">+</span><span class="nx">c</span><span class="p">.</span><span class="nx">alphaTest</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">gammaInput</span><span class="o">?</span><span class="s2">&quot;#define GAMMA_INPUT&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">gammaOutput</span><span class="o">?</span><span class="s2">&quot;#define GAMMA_OUTPUT&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">D</span><span class="p">.</span><span class="nx">physicallyBasedShading</span><span class="o">?</span><span class="s2">&quot;#define PHYSICALLY_BASED_SHADING&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L515" class="blob-num js-line-number" data-line-number="515"></td>
        <td id="LC515" class="blob-code js-file-line"><span class="nx">c</span><span class="p">.</span><span class="nx">useFog</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">fog</span><span class="o">?</span><span class="s2">&quot;#define USE_FOG&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">useFog</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">fogExp</span><span class="o">?</span><span class="s2">&quot;#define FOG_EXP2&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">map</span><span class="o">?</span><span class="s2">&quot;#define USE_MAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">envMap</span><span class="o">?</span><span class="s2">&quot;#define USE_ENVMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">lightMap</span><span class="o">?</span><span class="s2">&quot;#define USE_LIGHTMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">bumpMap</span><span class="o">?</span><span class="s2">&quot;#define USE_BUMPMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">normalMap</span><span class="o">?</span><span class="s2">&quot;#define USE_NORMALMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">specularMap</span><span class="o">?</span><span class="s2">&quot;#define USE_SPECULARMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">?</span><span class="s2">&quot;#define USE_COLOR&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">metal</span><span class="o">?</span><span class="s2">&quot;#define METAL&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">perPixel</span><span class="o">?</span><span class="s2">&quot;#define PHONG_PER_PIXEL&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">wrapAround</span><span class="o">?</span><span class="s2">&quot;#define WRAP_AROUND&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">doubleSided</span><span class="o">?</span><span class="s2">&quot;#define DOUBLE_SIDED&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">flipSided</span><span class="o">?</span><span class="s2">&quot;#define FLIP_SIDED&quot;</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L516" class="blob-num js-line-number" data-line-number="516"></td>
        <td id="LC516" class="blob-code js-file-line"><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapEnabled</span><span class="o">?</span><span class="s2">&quot;#define USE_SHADOWMAP&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapEnabled</span><span class="o">?</span><span class="s2">&quot;#define &quot;</span><span class="o">+</span><span class="nx">t</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapDebug</span><span class="o">?</span><span class="s2">&quot;#define SHADOWMAP_DEBUG&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">shadowMapCascade</span><span class="o">?</span><span class="s2">&quot;#define SHADOWMAP_CASCADE&quot;</span><span class="o">:</span><span class="s2">&quot;&quot;</span><span class="p">,</span><span class="s2">&quot;uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n&quot;</span><span class="p">].</span><span class="nx">join</span><span class="p">(</span><span class="s2">&quot;\n&quot;</span><span class="p">);</span><span class="nx">v</span><span class="o">=</span><span class="nx">J</span><span class="p">(</span><span class="s2">&quot;vertex&quot;</span><span class="p">,</span><span class="nx">v</span><span class="o">+</span><span class="nx">q</span><span class="p">);</span><span class="nx">t</span><span class="o">=</span><span class="nx">J</span><span class="p">(</span><span class="s2">&quot;fragment&quot;</span><span class="p">,</span><span class="nx">t</span><span class="o">+</span><span class="nx">r</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span><span class="nx">v</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">linkProgram</span><span class="p">(</span><span class="nx">w</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">getProgramParameter</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">LINK_STATUS</span><span class="p">)</span><span class="o">||</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Could not initialise shader\nVALIDATE_STATUS: &quot;</span><span class="o">+</span><span class="nx">k</span><span class="p">.</span><span class="nx">getProgramParameter</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">VALIDATE_STATUS</span><span class="p">)</span><span class="o">+</span><span class="s2">&quot;, gl error [&quot;</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L517" class="blob-num js-line-number" data-line-number="517"></td>
        <td id="LC517" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">getError</span><span class="p">()</span><span class="o">+</span><span class="s2">&quot;]&quot;</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteShader</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">deleteShader</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span><span class="nx">w</span><span class="p">.</span><span class="nx">uniforms</span><span class="o">=</span><span class="p">{};</span><span class="nx">w</span><span class="p">.</span><span class="nx">attributes</span><span class="o">=</span><span class="p">{};</span><span class="kd">var</span> <span class="nx">z</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="s2">&quot;viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">useVertexTexture</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;boneTexture&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;boneGlobalMatrices&quot;</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">z</span> <span class="k">in</span> <span class="nx">p</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">z</span><span class="p">);</span><span class="nx">z</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">t</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">;</span><span class="nx">t</span><span class="o">++</span><span class="p">)</span><span class="nx">p</span><span class="o">=</span><span class="nx">z</span><span class="p">[</span><span class="nx">t</span><span class="p">],</span><span class="nx">w</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span><span class="nx">p</span><span class="p">);</span><span class="nx">t</span><span class="o">=</span><span class="s2">&quot;position normal uv uv2 tangent color skinIndex skinWeight lineDistance&quot;</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxMorphTargets</span><span class="p">;</span><span class="nx">z</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;morphTarget&quot;</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L518" class="blob-num js-line-number" data-line-number="518"></td>
        <td id="LC518" class="blob-code js-file-line"><span class="nx">z</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxMorphNormals</span><span class="p">;</span><span class="nx">z</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="s2">&quot;morphNormal&quot;</span><span class="o">+</span><span class="nx">z</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">b</span><span class="p">)</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">j</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">z</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">z</span><span class="p">],</span><span class="nx">w</span><span class="p">.</span><span class="nx">attributes</span><span class="p">[</span><span class="nx">t</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">getAttribLocation</span><span class="p">(</span><span class="nx">w</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">w</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="nx">ea</span><span class="o">++</span><span class="p">;</span><span class="nx">V</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">program</span><span class="o">:</span><span class="nx">w</span><span class="p">,</span><span class="nx">code</span><span class="o">:</span><span class="nx">n</span><span class="p">,</span><span class="nx">usedTimes</span><span class="o">:</span><span class="mi">1</span><span class="p">});</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">programs</span><span class="o">=</span><span class="nx">V</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">w</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">program</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">program</span><span class="p">.</span><span class="nx">attributes</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">numSupportedMorphTargets</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="s2">&quot;morphTarget&quot;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMorphTargets</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">w</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="nx">j</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">z</span><span class="p">[</span><span class="nx">w</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">numSupportedMorphTargets</span><span class="o">++</span><span class="p">}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">morphNormals</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">numSupportedMorphNormals</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="s2">&quot;morphNormal&quot;</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">maxMorphNormals</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">w</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L519" class="blob-num js-line-number" data-line-number="519"></td>
        <td id="LC519" class="blob-code js-file-line"><span class="nx">b</span><span class="o">+</span><span class="nx">j</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">z</span><span class="p">[</span><span class="nx">w</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">numSupportedMorphNormals</span><span class="o">++</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">uniformsList</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">a</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">uniformsList</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">a</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">i</span><span class="p">])};</span><span class="k">this</span><span class="p">.</span><span class="nx">setFaceCulling</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CullFaceNone</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FrontFaceDirectionCW</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">frontFace</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">CW</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">frontFace</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">CCW</span><span class="p">),</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CullFaceBack</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">BACK</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CullFaceFront</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRONT</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRONT_AND_BACK</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">))};</span><span class="k">this</span><span class="p">.</span><span class="nx">setMaterialFaces</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">side</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DoubleSide</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">side</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BackSide</span><span class="p">;</span><span class="nx">da</span><span class="o">!==</span></td>
      </tr>
      <tr>
        <td id="L520" class="blob-num js-line-number" data-line-number="520"></td>
        <td id="LC520" class="blob-code js-file-line"><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">),</span><span class="nx">da</span><span class="o">=</span><span class="nx">b</span><span class="p">);</span><span class="nx">T</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">frontFace</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">CW</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">frontFace</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">CCW</span><span class="p">),</span><span class="nx">T</span><span class="o">=</span><span class="nx">a</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">xa</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">),</span><span class="nx">xa</span><span class="o">=</span><span class="nx">a</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">setDepthWrite</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">ab</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">depthMask</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">ab</span><span class="o">=</span><span class="nx">a</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">setBlending</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">a</span><span class="o">!==</span><span class="nx">aa</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NoBlending</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AdditiveBlending</span><span class="o">?</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendFunc</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">SRC_ALPHA</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">ONE</span><span class="p">))</span><span class="o">:</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SubtractiveBlending</span><span class="o">?</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L521" class="blob-num js-line-number" data-line-number="521"></td>
        <td id="LC521" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendFunc</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ZERO</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">ONE_MINUS_SRC_COLOR</span><span class="p">))</span><span class="o">:</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MultiplyBlending</span><span class="o">?</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendFunc</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">ZERO</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">SRC_COLOR</span><span class="p">))</span><span class="o">:</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CustomBlending</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendEquationSeparate</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">FUNC_ADD</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendFuncSeparate</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">SRC_ALPHA</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">ONE_MINUS_SRC_ALPHA</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">ONE</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">ONE_MINUS_SRC_ALPHA</span><span class="p">)),</span><span class="nx">aa</span><span class="o">=</span><span class="nx">a</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CustomBlending</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">!==</span><span class="nx">na</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">(</span><span class="nx">w</span><span class="p">(</span><span class="nx">b</span><span class="p">)),</span><span class="nx">na</span><span class="o">=</span><span class="nx">b</span><span class="p">),</span><span class="nx">c</span><span class="o">!==</span><span class="nx">ha</span><span class="o">||</span><span class="nx">d</span><span class="o">!==</span><span class="nx">X</span><span class="p">)</span><span class="nx">k</span><span class="p">.</span><span class="nx">blendFunc</span><span class="p">(</span><span class="nx">w</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">w</span><span class="p">(</span><span class="nx">d</span><span class="p">)),</span><span class="nx">ha</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">X</span><span class="o">=</span><span class="nx">d</span><span class="p">}</span><span class="k">else</span> <span class="nx">X</span><span class="o">=</span><span class="nx">ha</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L522" class="blob-num js-line-number" data-line-number="522"></td>
        <td id="LC522" class="blob-code js-file-line"><span class="nx">na</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">setTexture</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglInit</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;dispose&quot;</span><span class="p">,</span><span class="nx">gc</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createTexture</span><span class="p">(),</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">textures</span><span class="o">++</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="o">+</span><span class="nx">b</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">pixelStorei</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">UNPACK_FLIP_Y_WEBGL</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">flipY</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">pixelStorei</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">UNPACK_PREMULTIPLY_ALPHA_WEBGL</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">premultiplyAlpha</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">pixelStorei</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">UNPACK_ALIGNMENT</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">unpackAlignment</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">image</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="o">===</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">width</span><span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">height</span><span class="o">&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">height</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">w</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">format</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L523" class="blob-num js-line-number" data-line-number="523"></td>
        <td id="LC523" class="blob-code js-file-line"><span class="nx">f</span><span class="o">=</span><span class="nx">w</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span><span class="nx">N</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mipmaps</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">k</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=!</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span> <span class="nx">k</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CompressedTexture</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">k</span><span class="p">.</span><span class="nx">compressedTexImage2D</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">data</span><span class="p">)}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">k</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L524" class="blob-num js-line-number" data-line-number="524"></td>
        <td id="LC524" class="blob-code js-file-line"><span class="nx">g</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=!</span><span class="mi">1</span><span class="p">}</span><span class="k">else</span> <span class="nx">k</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">image</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">generateMipmap</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">onUpdate</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">onUpdate</span><span class="p">()}</span><span class="k">else</span> <span class="nx">k</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="o">+</span><span class="nx">b</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">setRenderTarget</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">addEventListener</span><span class="p">(</span><span class="s2">&quot;dispose&quot;</span><span class="p">,</span><span class="nx">mc</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L525" class="blob-num js-line-number" data-line-number="525"></td>
        <td id="LC525" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">createTexture</span><span class="p">();</span><span class="nx">D</span><span class="p">.</span><span class="nx">info</span><span class="p">.</span><span class="nx">memory</span><span class="p">.</span><span class="nx">textures</span><span class="o">++</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="o">===</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="o">&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">w</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">format</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">w</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="o">=</span><span class="p">[];</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="o">=</span><span class="p">[];</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">);</span><span class="nx">N</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">6</span><span class="o">&gt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createFramebuffer</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createRenderbuffer</span><span class="p">();</span><span class="nx">k</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="o">+</span><span class="nx">f</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="kc">null</span><span class="p">);</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP_POSITIVE_X</span><span class="o">+</span><span class="nx">f</span><span class="p">;</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindFramebuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L526" class="blob-num js-line-number" data-line-number="526"></td>
        <td id="LC526" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">[</span><span class="nx">f</span><span class="p">]);</span><span class="nx">k</span><span class="p">.</span><span class="nx">framebufferTexture2D</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">COLOR_ATTACHMENT0</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">y</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">a</span><span class="p">)}</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">generateMipmap</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">)}</span><span class="k">else</span> <span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">createFramebuffer</span><span class="p">(),</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">shareDepthFrom</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">shareDepthFrom</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">createRenderbuffer</span><span class="p">(),</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">),</span><span class="nx">N</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="kc">null</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindFramebuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L527" class="blob-num js-line-number" data-line-number="527"></td>
        <td id="LC527" class="blob-code js-file-line"><span class="nx">k</span><span class="p">.</span><span class="nx">framebufferTexture2D</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">COLOR_ATTACHMENT0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglTexture</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">shareDepthFrom</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">&amp;&amp;!</span><span class="nx">a</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">framebufferRenderbuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">DEPTH_ATTACHMENT</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">framebufferRenderbuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">DEPTH_STENCIL_ATTACHMENT</span><span class="p">,</span><span class="nx">k</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="p">)</span><span class="o">:</span><span class="nx">y</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglRenderbuffer</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">k</span><span class="p">.</span><span class="nx">generateMipmap</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">);</span><span class="nx">b</span><span class="o">?</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_CUBE_MAP</span><span class="p">,</span><span class="kc">null</span><span class="p">)</span><span class="o">:</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="kc">null</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindRenderbuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">RENDERBUFFER</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L528" class="blob-num js-line-number" data-line-number="528"></td>
        <td id="LC528" class="blob-code js-file-line"><span class="kc">null</span><span class="p">);</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindFramebuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="kc">null</span><span class="p">)}</span><span class="nx">a</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="p">]</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFramebuffer</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">Qa</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">Xa</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">ua</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">Ra</span><span class="p">);</span><span class="nx">b</span><span class="o">!==</span><span class="nx">eb</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">bindFramebuffer</span><span class="p">(</span><span class="nx">k</span><span class="p">.</span><span class="nx">FRAMEBUFFER</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">k</span><span class="p">.</span><span class="nx">viewport</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">),</span><span class="nx">eb</span><span class="o">=</span><span class="nx">b</span><span class="p">);</span><span class="nx">Xb</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">Jb</span><span class="o">=</span><span class="nx">a</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapPlugin</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShadowMapPlugin</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">addPrePlugin</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">shadowMapPlugin</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">addPostPlugin</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpritePlugin</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">addPostPlugin</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlarePlugin</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ClampToEdgeWrapping</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ClampToEdgeWrapping</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearMipMapLinearFilter</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">anisotropy</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">anisotropy</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">anisotropy</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">offset</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">repeat</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">format</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">format</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L529" class="blob-num js-line-number" data-line-number="529"></td>
        <td id="LC529" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBAFormat</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">type</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UnsignedByteType</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">:!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">?</span><span class="nx">c</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">:!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">shareDepthFrom</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L530" class="blob-num js-line-number" data-line-number="530"></td>
        <td id="LC530" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="p">{</span><span class="nx">constructor</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="p">,</span><span class="nx">clone</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapS</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapS</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">wrapT</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">wrapT</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">magFilter</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">magFilter</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">minFilter</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">minFilter</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">anisotropy</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">anisotropy</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">offset</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">offset</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">repeat</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">repeat</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">format</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">type</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">type</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">depthBuffer</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">stencilBuffer</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">shareDepthFrom</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">shareDepthFrom</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L531" class="blob-num js-line-number" data-line-number="531"></td>
        <td id="LC531" class="blob-code js-file-line"><span class="k">return</span> <span class="nx">a</span><span class="p">},</span><span class="nx">dispose</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">dispatchEvent</span><span class="p">({</span><span class="nx">type</span><span class="o">:</span><span class="s2">&quot;dispose&quot;</span><span class="p">})}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EventDispatcher</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span><span class="mi">0</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">positionWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">visible</span><span class="o">=!</span><span class="mi">0</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">copy</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionWorld</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace3</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">centroidModel</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normalModel</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normalModelView</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormalsLength</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormalsModel</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormalsModelView</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">uvs</span><span class="o">=</span><span class="p">[[]];</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L532" class="blob-num js-line-number" data-line-number="532"></td>
        <td id="LC532" class="blob-code js-file-line"><span class="mi">0</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableFace4</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v4</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">centroidModel</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normalModel</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normalModelView</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormalsLength</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormalsModel</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexNormalsModelView</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L533" class="blob-num js-line-number" data-line-number="533"></td>
        <td id="LC533" class="blob-code js-file-line"><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">uvs</span><span class="o">=</span><span class="p">[[]];</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableParticle</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="kc">null</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableLine</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">id</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">RenderableVertex</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertexColors</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="o">=</span><span class="p">{</span><span class="nx">merge</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">geometry</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">(),</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrix</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">).</span><span class="nx">getNormalMatrix</span><span class="p">(</span><span class="nx">d</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">i</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">n</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)}</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">;</span><span class="nx">n</span> <span class="k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L534" class="blob-num js-line-number" data-line-number="534"></td>
        <td id="LC534" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">a</span><span class="o">+</span><span class="nx">f</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">f</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">c</span><span class="o">+</span><span class="nx">f</span><span class="p">)</span><span class="o">:</span><span class="nx">n</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">a</span><span class="o">+</span><span class="nx">f</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">b</span><span class="o">+</span><span class="nx">f</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">c</span><span class="o">+</span><span class="nx">f</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">d</span><span class="o">+</span><span class="nx">f</span><span class="p">));</span><span class="nx">p</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">normal</span><span class="p">);</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">applyMatrix3</span><span class="p">(</span><span class="nx">e</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="nx">t</span><span class="p">.</span><span class="nx">applyMatrix3</span><span class="p">(</span><span class="nx">e</span><span class="p">).</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">p</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">p</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">clone</span><span class="p">());</span><span class="nx">p</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">+</span><span class="nx">c</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">centroid</span><span class="p">);</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">p</span><span class="p">)}</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L535" class="blob-num js-line-number" data-line-number="535"></td>
        <td id="LC535" class="blob-code js-file-line"><span class="nx">h</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">y</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">)}},</span><span class="nx">removeMaterials</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">{},</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">]]</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">f</span><span class="p">.</span><span class="nx">materialIndex</span> <span class="k">in</span> <span class="nx">c</span><span class="o">||</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span><span class="nx">h</span><span class="p">},</span><span class="nx">randomPointInTriangle</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random16</span><span class="p">(),</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random16</span><span class="p">();</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">f</span><span class="o">+</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">h</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">f</span><span class="o">-</span><span class="nx">h</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L536" class="blob-num js-line-number" data-line-number="536"></td>
        <td id="LC536" class="blob-code js-file-line"><span class="nx">e</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">e</span><span class="p">}}(),</span><span class="nx">randomPointInFace</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">randomPointInTriangle</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">a</span><span class="p">];</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">b</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">c</span><span class="p">];</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="nx">h</span><span class="p">;</span><span class="nx">c</span><span class="o">?</span><span class="nx">a</span><span class="p">.</span><span class="nx">_area1</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">_area2</span><span class="o">?</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_area1</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">_area2</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">_area1</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">_area2</span><span class="o">=</span><span class="nx">h</span><span class="p">)</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L537" class="blob-num js-line-number" data-line-number="537"></td>
        <td id="LC537" class="blob-code js-file-line"><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">));</span><span class="k">return</span> <span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random16</span><span class="p">()</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="nx">h</span><span class="p">)</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">randomPointInTriangle</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">randomPointInTriangle</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">)}},</span><span class="nx">randomPointsInGeometry</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">)</span><span class="k">return</span> <span class="nx">c</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">((</span><span class="nx">d</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="k">return</span> <span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">?</span><span class="nx">b</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">?</span><span class="nx">b</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="nx">e</span><span class="p">}</span><span class="k">return</span> <span class="nx">b</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="p">[],</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="o">?</span></td>
      </tr>
      <tr>
        <td id="L538" class="blob-num js-line-number" data-line-number="538"></td>
        <td id="LC538" class="blob-code js-file-line"><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">))</span><span class="o">:</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">],</span><span class="nx">n</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">d</span><span class="p">],</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area1</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">p</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area2</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">triangleArea</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">),</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area1</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area2</span><span class="p">),</span><span class="nx">i</span><span class="o">+=</span><span class="nx">d</span><span class="p">.</span><span class="nx">_area</span><span class="p">,</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">random16</span><span class="p">()</span><span class="o">*</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">h</span><span class="p">),</span><span class="nx">d</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GeometryUtils</span><span class="p">.</span><span class="nx">randomPointInFace</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">triangleArea</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L539" class="blob-num js-line-number" data-line-number="539"></td>
        <td id="LC539" class="blob-code js-file-line"><span class="nx">c</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">cross</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="mf">0.5</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">()}}(),</span><span class="nx">center</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeBoundingBox</span><span class="p">();</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">addVectors</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">min</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">max</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="o">-</span><span class="mf">0.5</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix</span><span class="p">((</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">).</span><span class="nx">makeTranslation</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeBoundingBox</span><span class="p">();</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">triangulateQuads</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L540" class="blob-num js-line-number" data-line-number="540"></td>
        <td id="LC540" class="blob-code js-file-line"><span class="nx">d</span><span class="p">.</span><span class="nx">a</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">c</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">d</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">materialIndex</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">a</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">n</span><span class="p">.</span><span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="mi">4</span><span class="o">===</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">m</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">n</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">n</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">n</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertexColors</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">clone</span><span class="p">());</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L541" class="blob-num js-line-number" data-line-number="541"></td>
        <td id="LC541" class="blob-code js-file-line"><span class="nx">n</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="nx">b</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">j</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="p">[</span><span class="nx">m</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">i</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">()],</span><span class="nx">i</span><span class="o">=</span><span class="p">[</span><span class="nx">i</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">j</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">()],</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">i</span><span class="p">));</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="nx">b</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">i</span><span class="p">))}</span><span class="k">else</span><span class="p">{</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="nx">b</span><span class="p">]);</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="nx">d</span><span class="p">][</span><span class="nx">b</span><span class="p">])}</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceUvs</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span></td>
      </tr>
      <tr>
        <td id="L542" class="blob-num js-line-number" data-line-number="542"></td>
        <td id="LC542" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeVertexNormals</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">hasTangents</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">computeTangents</span><span class="p">()},</span><span class="nx">setMaterialIndex</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">faces</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;=</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">materialIndex</span><span class="o">=</span><span class="nx">b</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="o">=</span><span class="p">{</span><span class="nx">crossOrigin</span><span class="o">:</span><span class="s2">&quot;anonymous&quot;</span><span class="p">,</span><span class="nx">loadTexture</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">Image</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageLoader</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">load</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">e</span><span class="p">.</span><span class="nx">image</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">(</span><span class="nx">e</span><span class="p">)});</span><span class="nx">e</span><span class="p">.</span><span class="nx">sourceFile</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="nx">e</span><span class="p">},</span><span class="nx">loadCompressedTexture</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CompressedTexture</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">mapping</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">parseDDS</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">response</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">format</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">mipmaps</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mipmaps</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L543" class="blob-num js-line-number" data-line-number="543"></td>
        <td id="LC543" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">(</span><span class="nx">e</span><span class="p">)};</span><span class="nx">f</span><span class="p">.</span><span class="nx">onerror</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">responseType</span><span class="o">=</span><span class="s2">&quot;arraybuffer&quot;</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span><span class="k">return</span> <span class="nx">e</span><span class="p">},</span><span class="nx">loadTextureCube</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">[];</span><span class="nx">e</span><span class="p">.</span><span class="nx">loadCount</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Texture</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">image</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">mapping</span><span class="o">=</span><span class="nx">b</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">flipY</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="o">++</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">Image</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">e</span><span class="p">.</span><span class="nx">loadCount</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="mi">6</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">loadCount</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">(</span><span class="nx">f</span><span class="p">))};</span><span class="nx">g</span><span class="p">.</span><span class="nx">onerror</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">crossOrigin</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">src</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">]}</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="nx">loadCompressedTextureCube</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L544" class="blob-num js-line-number" data-line-number="544"></td>
        <td id="LC544" class="blob-code js-file-line"><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">[];</span><span class="nx">e</span><span class="p">.</span><span class="nx">loadCount</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CompressedTexture</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">image</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">mapping</span><span class="o">=</span><span class="nx">b</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">flipY</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">parseDDS</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">response</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">format</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">mipmaps</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">mipmaps</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">loadCount</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="mi">6</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">loadCount</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">format</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">(</span><span class="nx">f</span><span class="p">))}};</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="o">++</span><span class="nx">h</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="p">{};</span><span class="nx">e</span><span class="p">[</span><span class="nx">h</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">;</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="nx">b</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">onerror</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">];</span><span class="nx">j</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L545" class="blob-num js-line-number" data-line-number="545"></td>
        <td id="LC545" class="blob-code js-file-line"><span class="nx">i</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">responseType</span><span class="o">=</span><span class="s2">&quot;arraybuffer&quot;</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">)}</span><span class="k">else</span> <span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">XMLHttpRequest</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">onload</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImageUtils</span><span class="p">.</span><span class="nx">parseDDS</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">response</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">isCubemap</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">mipmaps</span><span class="p">.</span><span class="nx">length</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">mipmapCount</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">mipmaps</span><span class="o">:</span><span class="p">[]};</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">mipmapCount</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">mipmaps</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">mipmaps</span><span class="p">[</span><span class="nx">d</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">mipmapCount</span><span class="o">+</span><span class="nx">h</span><span class="p">]),</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">format</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">format</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">width</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">height</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="p">}</span><span class="nx">f</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">format</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">(</span><span class="nx">f</span><span class="p">)}},</span><span class="nx">j</span><span class="p">.</span><span class="nx">onerror</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">open</span><span class="p">(</span><span class="s2">&quot;GET&quot;</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">),</span><span class="nx">j</span><span class="p">.</span><span class="nx">responseType</span><span class="o">=</span><span class="s2">&quot;arraybuffer&quot;</span><span class="p">,</span><span class="nx">j</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="nx">parseDDS</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L546" class="blob-num js-line-number" data-line-number="546"></td>
        <td id="LC546" class="blob-code js-file-line"><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">8</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">16</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">charCodeAt</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span><span class="o">&lt;&lt;</span><span class="mi">24</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="p">{</span><span class="nx">mipmaps</span><span class="o">:</span><span class="p">[],</span><span class="nx">width</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">height</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">format</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span><span class="nx">mipmapCount</span><span class="o">:</span><span class="mi">1</span><span class="p">},</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;DXT1&quot;</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;DXT3&quot;</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="s2">&quot;DXT5&quot;</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">Int32Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">31</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">542327876</span><span class="o">!==</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;ImageUtils.parseDDS(): Invalid magic number in DDS header&quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">g</span><span class="p">[</span><span class="mi">20</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">4</span><span class="p">)</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;ImageUtils.parseDDS(): Unsupported format, must contain a FourCC code&quot;</span><span class="p">),</span><span class="nx">d</span><span class="p">;</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="mi">21</span><span class="p">];</span><span class="k">switch</span><span class="p">(</span><span class="nx">i</span><span class="p">){</span><span class="k">case</span> <span class="nx">e</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="mi">8</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGB_S3TC_DXT1_Format</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L547" class="blob-num js-line-number" data-line-number="547"></td>
        <td id="LC547" class="blob-code js-file-line"><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">f</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="mi">16</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBA_S3TC_DXT3_Format</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">h</span><span class="o">:</span><span class="nx">e</span><span class="o">=</span><span class="mi">16</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">format</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBA_S3TC_DXT5_Format</span><span class="p">;</span><span class="k">break</span><span class="p">;</span><span class="k">default</span><span class="o">:</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;ImageUtils.parseDDS(): Unsupported FourCC code: &quot;</span><span class="p">,</span><span class="nb">String</span><span class="p">.</span><span class="nx">fromCharCode</span><span class="p">(</span><span class="nx">i</span><span class="o">&amp;</span><span class="mi">255</span><span class="p">,</span><span class="nx">i</span><span class="o">&gt;&gt;</span><span class="mi">8</span><span class="o">&amp;</span><span class="mi">255</span><span class="p">,</span><span class="nx">i</span><span class="o">&gt;&gt;</span><span class="mi">16</span><span class="o">&amp;</span><span class="mi">255</span><span class="p">,</span><span class="nx">i</span><span class="o">&gt;&gt;</span><span class="mi">24</span><span class="o">&amp;</span><span class="mi">255</span><span class="p">)),</span><span class="nx">d</span><span class="p">}</span><span class="nx">d</span><span class="p">.</span><span class="nx">mipmapCount</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">g</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">131072</span><span class="o">&amp;&amp;!</span><span class="mi">1</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">mipmapCount</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">7</span><span class="p">]));</span><span class="nx">d</span><span class="p">.</span><span class="nx">isCubemap</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="mi">28</span><span class="p">]</span><span class="o">&amp;</span><span class="mi">512</span><span class="o">?!</span><span class="mi">0</span><span class="o">:!</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">4</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">isCubemap</span><span class="o">?</span><span class="mi">6</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">mipmapCount</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="nx">f</span><span class="p">)</span><span class="o">/</span></td>
      </tr>
      <tr>
        <td id="L548" class="blob-num js-line-number" data-line-number="548"></td>
        <td id="LC548" class="blob-code js-file-line"><span class="mi">4</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="nx">h</span><span class="p">)</span><span class="o">/</span><span class="mi">4</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="p">{</span><span class="nx">data</span><span class="o">:</span><span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">m</span><span class="p">),</span><span class="nx">width</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">height</span><span class="o">:</span><span class="nx">h</span><span class="p">};</span><span class="nx">d</span><span class="p">.</span><span class="nx">mipmaps</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="nx">g</span><span class="o">+=</span><span class="nx">m</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">width</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">height</span><span class="p">}</span><span class="k">return</span> <span class="nx">d</span><span class="p">},</span><span class="nx">getNormalMap</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]);</span><span class="k">return</span><span class="p">[</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">/</span><span class="nx">b</span><span class="p">]},</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">|</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nb">document</span><span class="p">.</span><span class="nx">createElement</span><span class="p">(</span><span class="s2">&quot;canvas&quot;</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">getContext</span><span class="p">(</span><span class="s2">&quot;2d&quot;</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">drawImage</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">getImageData</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">).</span><span class="nx">data</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">createImageData</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">data</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L549" class="blob-num js-line-number" data-line-number="549"></td>
        <td id="LC549" class="blob-code js-file-line"><span class="mi">0</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">m</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">m</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">m</span><span class="o">+</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">m</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">l</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="nx">l</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="mi">1</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">l</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="p">[],</span><span class="nx">s</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">l</span><span class="p">)]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">];</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">t</span><span class="p">)]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="nx">n</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">t</span><span class="p">)]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="nx">n</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">l</span><span class="p">)]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="nx">n</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">q</span><span class="p">)]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">q</span><span class="p">)]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="nx">p</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">q</span><span class="p">)]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="nx">p</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">l</span><span class="p">)]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">r</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="nx">p</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">t</span><span class="p">)]</span><span class="o">/</span><span class="mi">255</span><span class="o">*</span><span class="nx">b</span><span class="p">]);</span><span class="nx">n</span><span class="o">=</span><span class="p">[];</span><span class="nx">t</span><span class="o">=</span><span class="nx">r</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">p</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">;</span><span class="nx">p</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">r</span><span class="p">[</span><span class="nx">p</span><span class="p">],</span><span class="nx">v</span><span class="o">=</span><span class="nx">r</span><span class="p">[(</span><span class="nx">p</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">t</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="p">[</span><span class="nx">q</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">q</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">s</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">q</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="nx">s</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">v</span><span class="o">=</span><span class="p">[</span><span class="nx">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">s</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">s</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">v</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="nx">s</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span></td>
      </tr>
      <tr>
        <td id="L550" class="blob-num js-line-number" data-line-number="550"></td>
        <td id="LC550" class="blob-code js-file-line"><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">([</span><span class="nx">q</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">v</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="nx">q</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">q</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">*</span><span class="nx">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">q</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">v</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">q</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">q</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*</span><span class="nx">v</span><span class="p">[</span><span class="mi">0</span><span class="p">]]))}</span><span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">p</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">p</span><span class="o">++</span><span class="p">)</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+=</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+=</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+=</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="p">][</span><span class="mi">2</span><span class="p">];</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">/=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">/=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">/=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="mi">4</span><span class="o">*</span><span class="p">(</span><span class="nx">m</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="nx">l</span><span class="p">);</span><span class="nx">j</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="p">((</span><span class="nx">r</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="p">[</span><span class="nx">s</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="p">((</span><span class="nx">r</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="p">[</span><span class="nx">s</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="o">*</span><span class="nx">r</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">|</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="p">[</span><span class="nx">s</span><span class="o">+</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="mi">255</span><span class="p">}</span><span class="nx">h</span><span class="p">.</span><span class="nx">putImageData</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="nx">f</span><span class="p">},</span><span class="nx">generateDataTexture</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint8Array</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">d</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mi">255</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">r</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mi">255</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">g</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="mi">255</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">b</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">g</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">e</span><span class="p">[</span><span class="mi">3</span><span class="o">*</span><span class="nx">g</span><span class="o">+</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DataTexture</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L551" class="blob-num js-line-number" data-line-number="551"></td>
        <td id="LC551" class="blob-code js-file-line"><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBFormat</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SceneUtils</span><span class="o">=</span><span class="p">{</span><span class="nx">createMultiMaterialObject</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">]));</span><span class="k">return</span> <span class="nx">c</span><span class="p">},</span><span class="nx">detach</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">attach</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">remove</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="o">=</span><span class="p">{</span><span class="nx">faces</span><span class="o">:</span><span class="p">{},</span><span class="nx">face</span><span class="o">:</span><span class="s2">&quot;helvetiker&quot;</span><span class="p">,</span><span class="nx">weight</span><span class="o">:</span><span class="s2">&quot;normal&quot;</span><span class="p">,</span><span class="nx">style</span><span class="o">:</span><span class="s2">&quot;normal&quot;</span><span class="p">,</span><span class="nx">size</span><span class="o">:</span><span class="mi">150</span><span class="p">,</span><span class="nx">divisions</span><span class="o">:</span><span class="mi">10</span><span class="p">,</span><span class="nx">getFace</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">face</span><span class="p">][</span><span class="k">this</span><span class="p">.</span><span class="nx">weight</span><span class="p">][</span><span class="k">this</span><span class="p">.</span><span class="nx">style</span><span class="p">]},</span><span class="nx">loadFace</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">familyName</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">a</span><span class="p">.</span><span class="nx">cssFontWeight</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">a</span><span class="p">.</span><span class="nx">cssFontWeight</span><span class="p">]</span><span class="o">||</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">a</span><span class="p">.</span><span class="nx">cssFontWeight</span><span class="p">][</span><span class="nx">a</span><span class="p">.</span><span class="nx">cssFontStyle</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">a</span><span class="p">.</span><span class="nx">cssFontWeight</span><span class="p">][</span><span class="nx">a</span><span class="p">.</span><span class="nx">cssFontStyle</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">},</span><span class="nx">drawText</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getFace</span><span class="p">(),</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">/</span><span class="nx">b</span><span class="p">.</span><span class="nx">resolution</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L552" class="blob-num js-line-number" data-line-number="552"></td>
        <td id="LC552" class="blob-code js-file-line"><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nb">String</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot;&quot;</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="p">[],</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">extractGlyphPoints</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">offset</span><span class="p">;</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">path</span><span class="p">)}</span><span class="k">return</span><span class="p">{</span><span class="nx">paths</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">offset</span><span class="o">:</span><span class="nx">d</span><span class="o">/</span><span class="mi">2</span><span class="p">}},</span><span class="nx">extractGlyphPoints</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">glyphs</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">||</span><span class="nx">b</span><span class="p">.</span><span class="nx">glyphs</span><span class="p">[</span><span class="s2">&quot;?&quot;</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">o</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">_cachedOutline</span><span class="o">||</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">_cachedOutline</span><span class="o">=</span><span class="nx">s</span><span class="p">.</span><span class="nx">o</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">));</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;)</span><span class="k">switch</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">],</span><span class="nx">i</span><span class="p">){</span><span class="k">case</span> <span class="s2">&quot;m&quot;</span><span class="o">:</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;l&quot;</span><span class="o">:</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;q&quot;</span><span class="o">:</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L553" class="blob-num js-line-number" data-line-number="553"></td>
        <td id="LC553" class="blob-code js-file-line"><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">quadraticCurveTo</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]){</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">divisions</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;=</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">v</span><span class="o">=</span><span class="nx">h</span><span class="o">/</span><span class="nx">g</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">l</span><span class="p">)}}</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="s2">&quot;b&quot;</span><span class="o">:</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*-</span><span class="nx">c</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">*-</span><span class="nx">c</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">bezierCurveTo</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]){</span><span class="nx">m</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">n</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">divisions</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;=</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">v</span><span class="o">=</span><span class="nx">h</span><span class="o">/</span><span class="nx">g</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">v</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">l</span><span class="p">)}}}</span><span class="k">return</span><span class="p">{</span><span class="nx">offset</span><span class="o">:</span><span class="nx">s</span><span class="p">.</span><span class="nx">ha</span><span class="o">*</span><span class="nx">c</span><span class="p">,</span><span class="nx">path</span><span class="o">:</span><span class="nx">e</span><span class="p">}}}};</span></td>
      </tr>
      <tr>
        <td id="L554" class="blob-num js-line-number" data-line-number="554"></td>
        <td id="LC554" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">generateShapes</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="p">{},</span><span class="nx">c</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">curveSegments</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">curveSegments</span><span class="o">:</span><span class="mi">4</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">font</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">font</span><span class="o">:</span><span class="s2">&quot;helvetiker&quot;</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">weight</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">weight</span><span class="o">:</span><span class="s2">&quot;normal&quot;</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">style</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">style</span><span class="o">:</span><span class="s2">&quot;normal&quot;</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">size</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">size</span><span class="o">:</span><span class="mi">100</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">divisions</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">face</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">weight</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">style</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">drawText</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">paths</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">toShapes</span><span class="p">());</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L555" class="blob-num js-line-number" data-line-number="555"></td>
        <td id="LC555" class="blob-code js-file-line"><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="o">+=</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="mf">0.5</span><span class="o">*</span><span class="nx">e</span><span class="p">};</span><span class="nx">a</span><span class="p">.</span><span class="nx">Triangulate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">3</span><span class="o">&gt;</span><span class="nx">e</span><span class="p">)</span><span class="k">return</span> <span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="o">=</span><span class="p">[],</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="k">else</span> <span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="nx">j</span><span class="p">;</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="mi">2</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;){</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&gt;=</span><span class="nx">m</span><span class="o">--</span><span class="p">){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Warning, unable to triangulate polygon!&quot;</span><span class="p">);</span><span class="k">break</span><span class="p">}</span><span class="nx">i</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">j</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="kd">var</span> <span class="nx">n</span><span class="p">;</span><span class="nx">a</span><span class="o">:</span><span class="p">{</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">n</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L556" class="blob-num js-line-number" data-line-number="556"></td>
        <td id="LC556" class="blob-code js-file-line"><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="nx">i</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="nx">i</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="nx">l</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="nx">l</span><span class="p">]].</span><span class="nx">y</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="nx">E</span><span class="o">-</span><span class="mi">10</span><span class="o">&gt;</span><span class="p">(</span><span class="nx">q</span><span class="o">-</span><span class="nx">p</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">v</span><span class="o">-</span><span class="nx">t</span><span class="p">)</span><span class="o">-</span><span class="p">(</span><span class="nx">r</span><span class="o">-</span><span class="nx">t</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">s</span><span class="o">-</span><span class="nx">p</span><span class="p">))</span><span class="nx">n</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="kd">var</span> <span class="nx">F</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">I</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">N</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">N</span><span class="o">=</span><span class="nx">J</span><span class="o">=</span><span class="nx">B</span><span class="o">=</span><span class="nx">C</span><span class="o">=</span><span class="nx">z</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="nx">s</span><span class="o">-</span><span class="nx">q</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="nx">v</span><span class="o">-</span><span class="nx">r</span><span class="p">,</span><span class="nx">I</span><span class="o">=</span><span class="nx">p</span><span class="o">-</span><span class="nx">s</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="nx">t</span><span class="o">-</span><span class="nx">v</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="nx">q</span><span class="o">-</span><span class="nx">p</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="nx">r</span><span class="o">-</span><span class="nx">t</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">n</span><span class="o">===</span><span class="nx">i</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">j</span><span class="o">||</span><span class="nx">n</span><span class="o">===</span><span class="nx">l</span><span class="p">))</span><span class="k">if</span><span class="p">(</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="nx">n</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="nx">n</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="nx">z</span><span class="o">-</span><span class="nx">p</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="nx">C</span><span class="o">-</span><span class="nx">t</span><span class="p">,</span><span class="nx">N</span><span class="o">=</span><span class="nx">z</span><span class="o">-</span><span class="nx">q</span><span class="p">,</span><span class="nx">y</span><span class="o">=</span><span class="nx">C</span><span class="o">-</span><span class="nx">r</span><span class="p">,</span><span class="nx">z</span><span class="o">-=</span><span class="nx">s</span><span class="p">,</span><span class="nx">C</span><span class="o">-=</span><span class="nx">v</span><span class="p">,</span><span class="nx">N</span><span class="o">=</span><span class="nx">F</span><span class="o">*</span><span class="nx">y</span><span class="o">-</span><span class="nx">H</span><span class="o">*</span><span class="nx">N</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="nx">A</span><span class="o">*</span><span class="nx">J</span><span class="o">-</span><span class="nx">K</span><span class="o">*</span><span class="nx">B</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="nx">I</span><span class="o">*</span><span class="nx">C</span><span class="o">-</span><span class="nx">G</span><span class="o">*</span><span class="nx">z</span><span class="p">,</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">N</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">J</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">B</span><span class="p">){</span><span class="nx">n</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">break</span> <span class="nx">a</span><span class="p">}</span><span class="nx">n</span><span class="o">=!</span><span class="mi">0</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="p">){</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="nx">i</span><span class="p">]],</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="p">]],</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">[</span><span class="nx">l</span><span class="p">]]]);</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">h</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="nx">l</span><span class="p">]]);</span></td>
      </tr>
      <tr>
        <td id="L557" class="blob-num js-line-number" data-line-number="557"></td>
        <td id="LC557" class="blob-code js-file-line"><span class="nx">i</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">,</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">l</span><span class="p">];</span><span class="nx">e</span><span class="o">--</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">e</span><span class="p">}}</span><span class="k">return</span> <span class="nx">d</span><span class="o">?</span><span class="nx">g</span><span class="o">:</span><span class="nx">f</span><span class="p">};</span><span class="nx">a</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">.</span><span class="nx">area</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">})(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">);</span><span class="nx">self</span><span class="p">.</span><span class="nx">_typeface_js</span><span class="o">=</span><span class="p">{</span><span class="nx">faces</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">loadFace</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">loadFace</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">typeface_js</span><span class="o">=</span><span class="nx">self</span><span class="p">.</span><span class="nx">_typeface_js</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Warning, getPoint() not implemented!&quot;</span><span class="p">);</span><span class="k">return</span> <span class="kc">null</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPointAt</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getUtoTmapping</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">5</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="nx">a</span><span class="p">));</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getSpacedPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">5</span><span class="p">);</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getPointAt</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="nx">a</span><span class="p">));</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L558" class="blob-num js-line-number" data-line-number="558"></td>
        <td id="LC558" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getLengths</span><span class="p">();</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLengths</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">__arcLengthDivisions</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">__arcLengthDivisions</span><span class="o">:</span><span class="mi">200</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cacheArcLengths</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">cacheArcLengths</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">cacheArcLengths</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">e</span><span class="o">/</span><span class="nx">a</span><span class="p">),</span><span class="nx">f</span><span class="o">+=</span><span class="nx">c</span><span class="p">.</span><span class="nx">distanceTo</span><span class="p">(</span><span class="nx">d</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">cacheArcLengths</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L559" class="blob-num js-line-number" data-line-number="559"></td>
        <td id="LC559" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateArcLengths</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">needsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">getLengths</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getUtoTmapping</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getLengths</span><span class="p">(),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">i</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;=</span><span class="nx">g</span><span class="p">;)</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">h</span><span class="o">+</span><span class="p">(</span><span class="nx">g</span><span class="o">-</span><span class="nx">h</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">-</span><span class="nx">f</span><span class="p">,</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">i</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">break</span><span class="p">}</span><span class="nx">d</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">==</span><span class="nx">f</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="o">/</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="k">return</span> <span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="o">-</span><span class="nx">h</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">h</span><span class="p">))</span><span class="o">/</span><span class="p">(</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTangent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="p">;</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">clone</span><span class="p">().</span><span class="nx">sub</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">normalize</span><span class="p">()};</span></td>
      </tr>
      <tr>
        <td id="L560" class="blob-num js-line-number" data-line-number="560"></td>
        <td id="LC560" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTangentAt</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getUtoTmapping</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getTangent</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L561" class="blob-num js-line-number" data-line-number="561"></td>
        <td id="LC561" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="o">=</span><span class="p">{</span><span class="nx">tangentQuadraticBezier</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">c</span><span class="p">)},</span><span class="nx">tangentCubicBezier</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span><span class="o">-</span><span class="mi">3</span><span class="o">*</span><span class="nx">b</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="mi">3</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">-</span><span class="mi">6</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="mi">6</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">-</span><span class="mi">3</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="mi">3</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="p">},</span><span class="nx">tangentSpline</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="mi">6</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="mi">6</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="mi">4</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="o">-</span><span class="mi">6</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">+</span><span class="mi">6</span><span class="o">*</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="p">(</span><span class="mi">3</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="p">)},</span><span class="nx">interpolate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">b</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="k">return</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">b</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">e</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="o">*</span><span class="nx">b</span><span class="o">+</span><span class="mi">3</span><span class="o">*</span><span class="nx">c</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">}};</span></td>
      </tr>
      <tr>
        <td id="L562" class="blob-num js-line-number" data-line-number="562"></td>
        <td id="LC562" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">create</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">bends</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">autoClose</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">add</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">checkConnection</span><span class="o">=</span><span class="kd">function</span><span class="p">(){};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">closePath</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getPoint</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">getPoint</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">))};</span></td>
      </tr>
      <tr>
        <td id="L563" class="blob-num js-line-number" data-line-number="563"></td>
        <td id="LC563" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">getLength</span><span class="p">(),</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getCurveLengths</span><span class="p">(),</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">&gt;=</span><span class="nx">b</span><span class="p">)</span><span class="k">return</span> <span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">-</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">b</span><span class="o">/</span><span class="nx">a</span><span class="p">.</span><span class="nx">getLength</span><span class="p">(),</span><span class="nx">a</span><span class="p">.</span><span class="nx">getPointAt</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">a</span><span class="o">++</span><span class="p">}</span><span class="k">return</span> <span class="kc">null</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getLength</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getCurveLengths</span><span class="p">();</span><span class="k">return</span> <span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]};</span></td>
      </tr>
      <tr>
        <td id="L564" class="blob-num js-line-number" data-line-number="564"></td>
        <td id="LC564" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getCurveLengths</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cacheLengths</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">cacheLengths</span><span class="p">.</span><span class="nx">length</span><span class="o">==</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">cacheLengths</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="o">+=</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">getLength</span><span class="p">(),</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">cacheLengths</span><span class="o">=</span><span class="nx">a</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L565" class="blob-num js-line-number" data-line-number="565"></td>
        <td id="LC565" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getBoundingBox</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoints</span><span class="p">(),</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="o">=</span><span class="nb">Number</span><span class="p">.</span><span class="nx">NEGATIVE_INFINITY</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">f</span><span class="o">=</span><span class="nb">Number</span><span class="p">.</span><span class="nx">POSITIVE_INFINITY</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">m</span><span class="o">?</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">m</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">?</span><span class="nx">d</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="p">)),</span><span class="nx">l</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="p">{</span><span class="nx">minX</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">minY</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">maxX</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">maxY</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">centroid</span><span class="o">:</span><span class="nx">l</span><span class="p">.</span><span class="nx">divideScalar</span><span class="p">(</span><span class="nx">j</span><span class="p">)};</span><span class="nx">m</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">maxZ</span><span class="o">=</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">minZ</span><span class="o">=</span><span class="nx">h</span><span class="p">);</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L566" class="blob-num js-line-number" data-line-number="566"></td>
        <td id="LC566" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createPointsGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">createGeometry</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createSpacedPointsGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getSpacedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">createGeometry</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">z</span><span class="o">||</span><span class="mi">0</span><span class="p">));</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addWrapPath</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">bends</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L567" class="blob-num js-line-number" data-line-number="567"></td>
        <td id="LC567" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTransformedPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bends</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getWrapPoints</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTransformedSpacedPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getSpacedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="o">||</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">bends</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getWrapPoints</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">[</span><span class="nx">d</span><span class="p">]);</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L568" class="blob-num js-line-number" data-line-number="568"></td>
        <td id="LC568" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getWrapPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getBoundingBox</span><span class="p">(),</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">maxX</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUtoTmapping</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getNormalVector</span><span class="p">(</span><span class="nx">i</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">g</span><span class="p">),</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span> <span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L569" class="blob-num js-line-number" data-line-number="569"></td>
        <td id="LC569" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">||</span><span class="nx">a</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">decompose</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">translationWorld</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternionWorld</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scaleWorld</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">decompose</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">translationObject</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternionObject</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scaleObject</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">compose</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">translationWorld</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternionObject</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">scaleWorld</span><span class="p">))</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L570" class="blob-num js-line-number" data-line-number="570"></td>
        <td id="LC570" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">translationWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">translationObject</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">quaternionWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">quaternionObject</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">scaleWorld</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">scaleObject</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="o">=</span><span class="p">[];</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">fromPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CurvePath</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="o">=</span><span class="p">{</span><span class="nx">MOVE_TO</span><span class="o">:</span><span class="s2">&quot;moveTo&quot;</span><span class="p">,</span><span class="nx">LINE_TO</span><span class="o">:</span><span class="s2">&quot;lineTo&quot;</span><span class="p">,</span><span class="nx">QUADRATIC_CURVE_TO</span><span class="o">:</span><span class="s2">&quot;quadraticCurveTo&quot;</span><span class="p">,</span><span class="nx">BEZIER_CURVE_TO</span><span class="o">:</span><span class="s2">&quot;bezierCurveTo&quot;</span><span class="p">,</span><span class="nx">CSPLINE_THRU</span><span class="o">:</span><span class="s2">&quot;splineThru&quot;</span><span class="p">,</span><span class="nx">ARC</span><span class="o">:</span><span class="s2">&quot;arc&quot;</span><span class="p">,</span><span class="nx">ELLIPSE</span><span class="o">:</span><span class="s2">&quot;ellipse&quot;</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">fromPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">moveTo</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">y</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">lineTo</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">y</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L571" class="blob-num js-line-number" data-line-number="571"></td>
        <td id="LC571" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">moveTo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">MOVE_TO</span><span class="p">,</span><span class="nx">args</span><span class="o">:</span><span class="nx">c</span><span class="p">})};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">lineTo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">LINE_TO</span><span class="p">,</span><span class="nx">args</span><span class="o">:</span><span class="nx">c</span><span class="p">})};</span></td>
      </tr>
      <tr>
        <td id="L572" class="blob-num js-line-number" data-line-number="572"></td>
        <td id="LC572" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">quadraticCurveTo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">QUADRATIC_CURVE_TO</span><span class="p">,</span><span class="nx">args</span><span class="o">:</span><span class="nx">e</span><span class="p">})};</span></td>
      </tr>
      <tr>
        <td id="L573" class="blob-num js-line-number" data-line-number="573"></td>
        <td id="LC573" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">bezierCurveTo</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">BEZIER_CURVE_TO</span><span class="p">,</span><span class="nx">args</span><span class="o">:</span><span class="nx">h</span><span class="p">})};</span></td>
      </tr>
      <tr>
        <td id="L574" class="blob-num js-line-number" data-line-number="574"></td>
        <td id="LC574" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">splineThru</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">])];</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">CSPLINE_THRU</span><span class="p">,</span><span class="nx">args</span><span class="o">:</span><span class="nx">b</span><span class="p">})};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">arc</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">absarc</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">h</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">b</span><span class="o">+</span><span class="nx">h</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L575" class="blob-num js-line-number" data-line-number="575"></td>
        <td id="LC575" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">absarc</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">absellipse</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">ellipse</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">absellipse</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="nx">g</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">b</span><span class="o">+</span><span class="nx">g</span><span class="p">[</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">absellipse</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">slice</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="nx">arguments</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">EllipseCurve</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">curves</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">h</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">action</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">ELLIPSE</span><span class="p">,</span><span class="nx">args</span><span class="o">:</span><span class="nx">g</span><span class="p">})};</span></td>
      </tr>
      <tr>
        <td id="L576" class="blob-num js-line-number" data-line-number="576"></td>
        <td id="LC576" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getSpacedPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">a</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">40</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[],</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">c</span><span class="o">/</span><span class="nx">a</span><span class="p">));</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L577" class="blob-num js-line-number" data-line-number="577"></td>
        <td id="LC577" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">useSpacedPoints</span><span class="p">)</span><span class="k">return</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;tata&quot;</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">getSpacedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">12</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">switch</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">action</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">args</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">MOVE_TO</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">LINE_TO</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]));</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">QUADRATIC_CURVE_TO</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L578" class="blob-num js-line-number" data-line-number="578"></td>
        <td id="LC578" class="blob-code js-file-line"><span class="nx">t</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">t</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">q</span><span class="o">=</span><span class="nx">f</span><span class="o">/</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">q</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">q</span><span class="p">));</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">BEZIER_CURVE_TO</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">m</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">?</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">t</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]);</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">q</span><span class="o">=</span><span class="nx">f</span><span class="o">/</span><span class="nx">a</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">q</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">q</span><span class="p">));</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">CSPLINE_THRU</span><span class="o">:</span><span class="nx">h</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L579" class="blob-num js-line-number" data-line-number="579"></td>
        <td id="LC579" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">args</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="nx">h</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">])];</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="nx">q</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve</span><span class="p">(</span><span class="nx">q</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;=</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">getPointAt</span><span class="p">(</span><span class="nx">f</span><span class="o">/</span><span class="nx">h</span><span class="p">));</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">ARC</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">m</span><span class="o">=!!</span><span class="nx">f</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="o">-</span><span class="nx">j</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;=</span><span class="nx">t</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">q</span><span class="o">=</span><span class="nx">f</span><span class="o">/</span><span class="nx">t</span><span class="p">,</span><span class="nx">m</span><span class="o">||</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">q</span><span class="p">),</span><span class="nx">q</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">p</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">q</span><span class="p">),</span><span class="nx">q</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">q</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">q</span><span class="p">));</span><span class="k">break</span><span class="p">;</span><span class="k">case</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">ELLIPSE</span><span class="o">:</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">n</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">3</span><span class="p">];</span><span class="nx">j</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">4</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">5</span><span class="p">];</span><span class="nx">m</span><span class="o">=!!</span><span class="nx">f</span><span class="p">[</span><span class="mi">6</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="nx">h</span><span class="o">-</span><span class="nx">j</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;=</span><span class="nx">t</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">q</span><span class="o">=</span><span class="nx">f</span><span class="o">/</span><span class="nx">t</span><span class="p">,</span><span class="nx">m</span><span class="o">||</span></td>
      </tr>
      <tr>
        <td id="L580" class="blob-num js-line-number" data-line-number="580"></td>
        <td id="LC580" class="blob-code js-file-line"><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">q</span><span class="p">),</span><span class="nx">q</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="nx">q</span><span class="o">*</span><span class="nx">p</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="o">+</span><span class="nx">n</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">q</span><span class="p">),</span><span class="nx">q</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="nx">l</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">q</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">q</span><span class="p">))}</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span><span class="mi">1</span><span class="nx">E</span><span class="o">-</span><span class="mi">10</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">x</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="nx">E</span><span class="o">-</span><span class="mi">10</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">y</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L581" class="blob-num js-line-number" data-line-number="581"></td>
        <td id="LC581" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toShapes</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">actions</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">args</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">action</span><span class="p">,</span><span class="nx">d</span><span class="o">==</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PathActions</span><span class="p">.</span><span class="nx">MOVE_TO</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">!=</span><span class="nx">h</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">),</span><span class="nx">h</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">apply</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="mi">0</span><span class="o">!=</span><span class="nx">h</span><span class="p">.</span><span class="nx">actions</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">==</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">g</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="mi">1</span><span class="o">==</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="k">return</span> <span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">actions</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">actions</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">curves</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">curves</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">),</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="o">=!</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">isClockWise</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">getPoints</span><span class="p">());</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">?!</span><span class="nx">b</span><span class="o">:</span><span class="nx">b</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L582" class="blob-num js-line-number" data-line-number="582"></td>
        <td id="LC582" class="blob-code js-file-line"><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">isClockWise</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">getPoints</span><span class="p">()),(</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="o">?!</span><span class="nx">h</span><span class="o">:</span><span class="nx">h</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">actions</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">actions</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">curves</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">curves</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">)</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">holes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="nx">g</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">b</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">isClockWise</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">getPoints</span><span class="p">()),(</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="o">?!</span><span class="nx">h</span><span class="o">:</span><span class="nx">h</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">actions</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">actions</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">curves</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">curves</span><span class="p">)</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">holes</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">)}</span><span class="k">return</span> <span class="nx">e</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">arguments</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">holes</span><span class="o">=</span><span class="p">[]};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Path</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">extrude</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">makeGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShapeGeometry</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPointsHoles</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">holes</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">holes</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">getTransformedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">bends</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L583" class="blob-num js-line-number" data-line-number="583"></td>
        <td id="LC583" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getSpacedPointsHoles</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">holes</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">holes</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">getTransformedSpacedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">bends</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">extractAllPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">{</span><span class="nx">shape</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">getTransformedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">holes</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">getPointsHoles</span><span class="p">(</span><span class="nx">a</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">extractPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">useSpacedPoints</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">extractAllSpacedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">extractAllPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L584" class="blob-num js-line-number" data-line-number="584"></td>
        <td id="LC584" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">extractAllSpacedPoints</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span><span class="p">{</span><span class="nx">shape</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">getTransformedSpacedPoints</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">holes</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">getSpacedPointsHoles</span><span class="p">(</span><span class="nx">a</span><span class="p">)}};</span></td>
      </tr>
      <tr>
        <td id="L585" class="blob-num js-line-number" data-line-number="585"></td>
        <td id="LC585" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="o">=</span><span class="p">{</span><span class="nx">removeHoles</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">concat</span><span class="p">(),</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">concat</span><span class="p">(),</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="nb">Array</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">push</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nb">Number</span><span class="p">.</span><span class="nx">POSITIVE_INFINITY</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="nx">p</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">)</span><span class="nx">l</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">m</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">distanceToSquared</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">p</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">m</span><span class="p">)}</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">]];</span><span class="nx">m</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">.</span><span class="nx">area</span><span class="p">(</span><span class="nx">q</span><span class="p">);</span><span class="kd">var</span> <span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">]];</span><span class="nx">n</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">.</span><span class="nx">area</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="nx">p</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">g</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="nx">h</span><span class="o">+=-</span><span class="mi">1</span><span class="p">;</span><span class="mi">0</span><span class="o">&gt;</span></td>
      </tr>
      <tr>
        <td id="L586" class="blob-num js-line-number" data-line-number="586"></td>
        <td id="LC586" class="blob-code js-file-line"><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">+=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">g</span><span class="o">%=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">+=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span><span class="nx">h</span><span class="o">%=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">]];</span><span class="nx">q</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">.</span><span class="nx">area</span><span class="p">(</span><span class="nx">q</span><span class="p">);</span><span class="nx">r</span><span class="o">=</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">]];</span><span class="nx">r</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">.</span><span class="nx">area</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="nx">m</span><span class="o">+</span><span class="nx">n</span><span class="o">&gt;</span><span class="nx">q</span><span class="o">+</span><span class="nx">r</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">p</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="o">+=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">),</span><span class="nx">g</span><span class="o">%=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">+=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">),</span><span class="nx">h</span><span class="o">%=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">g</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">h</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">n</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">p</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">j</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">]];</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">j</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">]]);</span><span class="nx">t</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">p</span><span class="p">).</span><span class="nx">concat</span><span class="p">(</span><span class="nx">l</span><span class="p">).</span><span class="nx">concat</span><span class="p">(</span><span class="nx">n</span><span class="p">)}</span><span class="k">return</span><span class="p">{</span><span class="nx">shape</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L587" class="blob-num js-line-number" data-line-number="587"></td>
        <td id="LC587" class="blob-code js-file-line"><span class="nx">isolatedPts</span><span class="o">:</span><span class="nx">t</span><span class="p">,</span><span class="nx">allpoints</span><span class="o">:</span><span class="nx">d</span><span class="p">}},</span><span class="nx">triangulateShape</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">removeHoles</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">allpoints</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">isolatedPts</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">shape</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">),</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="p">{};</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">d</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Duplicate point&quot;</span><span class="p">,</span><span class="nx">i</span><span class="p">),</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">3</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">)}</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">f</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">3</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">i</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="s2">&quot;:&quot;</span><span class="o">+</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="nx">d</span><span class="p">]</span><span class="o">=</span><span class="nx">i</span><span class="p">)}</span><span class="k">return</span> <span class="nx">c</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">e</span><span class="p">)},</span></td>
      </tr>
      <tr>
        <td id="L588" class="blob-num js-line-number" data-line-number="588"></td>
        <td id="LC588" class="blob-code js-file-line"><span class="nx">isClockWise</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="mi">0</span><span class="o">&gt;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">Triangulate</span><span class="p">.</span><span class="nx">area</span><span class="p">(</span><span class="nx">a</span><span class="p">)},</span><span class="nx">b2p0</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b2p1</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b2p2</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b2</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">b2p0</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">b2p1</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">b2p2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">)},</span><span class="nx">b3p0</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b3p1</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">;</span><span class="k">return</span> <span class="mi">3</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="nx">c</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b3p2</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="mi">3</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b3p3</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">},</span><span class="nx">b3</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">b3p0</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">b3p1</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">b3p2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">)</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L589" class="blob-num js-line-number" data-line-number="589"></td>
        <td id="LC589" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">b3p3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">sub</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPointAt</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">getPoint</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTangent</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">sub</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">).</span><span class="nx">normalize</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="nx">c</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L590" class="blob-num js-line-number" data-line-number="590"></td>
        <td id="LC590" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTangent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">tangentQuadraticBezier</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">tangentQuadraticBezier</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="o">=</span><span class="nx">d</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L591" class="blob-num js-line-number" data-line-number="591"></td>
        <td id="LC591" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getTangent</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">tangentCubicBezier</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">tangentCubicBezier</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="p">[]</span><span class="o">:</span><span class="nx">a</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">e</span><span class="o">-=</span><span class="nx">a</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">3</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">a</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EllipseCurve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">aX</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">aY</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">xRadius</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">yRadius</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">aStartAngle</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">aEndAngle</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">aClockwise</span><span class="o">=</span><span class="nx">h</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EllipseCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EllipseCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPoint</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">aEndAngle</span><span class="o">-</span><span class="k">this</span><span class="p">.</span><span class="nx">aStartAngle</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">aClockwise</span><span class="o">||</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">aStartAngle</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">aX</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">xRadius</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">aY</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">yRadius</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArcCurve</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EllipseCurve</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArcCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">EllipseCurve</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LineCurve3</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="nx">b</span><span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">});</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">QuadraticBezierCurve3</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="nx">c</span><span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">)});</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubicBezierCurve3</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="o">=</span><span class="nx">d</span><span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">b3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v0</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v1</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v2</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">v3</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="p">)});</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SplineCurve3</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="p">[]</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">a</span><span class="o">-=</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="o">==</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="nx">e</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">3</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">e</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]],</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]],</span><span class="nx">c</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]];</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">});</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ClosedSplineCurve3</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">==</span><span class="nx">a</span><span class="o">?</span><span class="p">[]</span><span class="o">:</span><span class="nx">a</span><span class="p">},</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">0</span><span class="p">)</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">e</span><span class="o">-=</span><span class="nx">a</span><span class="p">;</span><span class="nx">a</span><span class="o">+=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="o">%</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">2</span><span class="p">)</span><span class="o">%</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]].</span><span class="nx">x</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]].</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Curve</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]].</span><span class="nx">z</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L592" class="blob-num js-line-number" data-line-number="592"></td>
        <td id="LC592" class="blob-code js-file-line"><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]].</span><span class="nx">z</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]].</span><span class="nx">z</span><span class="p">,</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]].</span><span class="nx">z</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">});</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">b</span><span class="o">=</span><span class="p">{},</span><span class="nx">c</span><span class="o">=</span><span class="p">{</span><span class="nx">update</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">update</span><span class="p">(</span><span class="nx">b</span><span class="p">)},</span><span class="nx">addToUpdate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="o">-</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)},</span><span class="nx">removeFromUpdate</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="o">-</span><span class="mi">1</span><span class="o">!==</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="p">)},</span><span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.AnimationHandler.add: Warning! &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="o">+</span><span class="s2">&quot; already exists in library. Overwriting.&quot;</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">name</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">initialized</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">time</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L593" class="blob-num js-line-number" data-line-number="593"></td>
        <td id="LC593" class="blob-code js-file-line"><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">time</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">rot</span><span class="o">&amp;&amp;!</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">rot</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">)){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">rot</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">rot</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">3</span><span class="p">])}</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">morphTargets</span><span class="p">){</span><span class="nx">g</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="nx">g</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">usedMorphTargets</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L594" class="blob-num js-line-number" data-line-number="594"></td>
        <td id="LC594" class="blob-code js-file-line"><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="p">{};</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span> <span class="k">in</span> <span class="nx">g</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">===</span><span class="nx">j</span><span class="p">){</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargetsInfluences</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="k">break</span><span class="p">}</span><span class="nx">i</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">l</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">)}</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">morphTargetsInfluences</span><span class="o">=</span><span class="nx">l</span><span class="p">}}</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">time</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">time</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">d</span><span class="o">--</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">index</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L595" class="blob-num js-line-number" data-line-number="595"></td>
        <td id="LC595" class="blob-code js-file-line"><span class="nx">d</span><span class="p">}</span><span class="nx">d</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">fps</span><span class="p">,</span><span class="mi">10</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">JIT</span><span class="o">=</span><span class="p">{};</span><span class="nx">a</span><span class="p">.</span><span class="nx">JIT</span><span class="p">.</span><span class="nx">hierarchy</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="p">.</span><span class="nx">JIT</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nb">Array</span><span class="p">(</span><span class="nx">d</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">initialized</span><span class="o">=!</span><span class="mi">0</span><span class="p">}},</span><span class="nx">get</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;string&quot;</span><span class="o">===</span><span class="k">typeof</span> <span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.AnimationHandler.get: Couldn&#39;t find animation &quot;</span><span class="o">+</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="kc">null</span><span class="p">}},</span><span class="nx">parse</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[];</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">bones</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">bones</span><span class="p">[</span><span class="nx">c</span><span class="p">]);</span><span class="k">else</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">}},</span><span class="nx">d</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">children</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L596" class="blob-num js-line-number" data-line-number="596"></td>
        <td id="LC596" class="blob-code js-file-line"><span class="nx">b</span><span class="p">)};</span><span class="nx">c</span><span class="p">.</span><span class="nx">LINEAR</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">CATMULLROM</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">CATMULLROM_FORWARD</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="k">return</span> <span class="nx">c</span><span class="p">}();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">timeScale</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">LINEAR</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L597" class="blob-num js-line-number" data-line-number="597"></td>
        <td id="LC597" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">play</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">e</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">){</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="o">=</span><span class="p">{},</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">prevKey</span><span class="o">=</span><span class="p">{</span><span class="nx">pos</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">rot</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">scl</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">nextKey</span><span class="o">=</span><span class="p">{</span><span class="nx">pos</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">rot</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">scl</span><span class="o">:</span><span class="mi">0</span><span class="p">},</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrix</span><span class="p">);</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">prevKey</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">nextKey</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L598" class="blob-num js-line-number" data-line-number="598"></td>
        <td id="LC598" class="blob-code js-file-line"><span class="nx">f</span><span class="p">.</span><span class="nx">pos</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">f</span><span class="p">.</span><span class="nx">rot</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">f</span><span class="p">.</span><span class="nx">scl</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="nx">e</span><span class="p">.</span><span class="nx">pos</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="s2">&quot;pos&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">rot</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="s2">&quot;rot&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">scl</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="s2">&quot;scl&quot;</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="mi">0</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">addToUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pause</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">addToUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">removeFromUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=!</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L599" class="blob-num js-line-number" data-line-number="599"></td>
        <td id="LC599" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">stop</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">removeFromUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L600" class="blob-num js-line-number" data-line-number="600"></td>
        <td id="LC600" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">!==</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;pos&quot;</span><span class="p">,</span><span class="s2">&quot;rot&quot;</span><span class="p">,</span><span class="s2">&quot;scl&quot;</span><span class="p">],</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">+=</span><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">timeScale</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">%=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nb">parseInt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">j</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">fps</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">fps</span><span class="p">),</span><span class="mi">10</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">m</span><span class="o">&lt;</span><span class="nx">n</span><span class="p">;</span><span class="nx">m</span><span class="o">++</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">m</span><span class="p">];</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">3</span><span class="o">&gt;</span><span class="nx">p</span><span class="p">;</span><span class="nx">p</span><span class="o">++</span><span class="p">){</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">prevKey</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">g</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">nextKey</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;=</span><span class="nx">l</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">m</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span></td>
      </tr>
      <tr>
        <td id="L601" class="blob-num js-line-number" data-line-number="601"></td>
        <td id="LC601" class="blob-code js-file-line"><span class="nx">j</span><span class="p">;)</span><span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="k">this</span><span class="p">.</span><span class="nx">stop</span><span class="p">();</span><span class="k">return</span><span class="p">}</span><span class="k">else</span><span class="p">{</span><span class="k">do</span> <span class="nx">h</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">);</span><span class="k">while</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">)}</span><span class="nx">i</span><span class="p">.</span><span class="nx">prevKey</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">nextKey</span><span class="p">[</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="nx">g</span><span class="p">}</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="p">(</span><span class="nx">j</span><span class="o">-</span><span class="nx">h</span><span class="p">.</span><span class="nx">time</span><span class="p">)</span><span class="o">/</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">time</span><span class="o">-</span><span class="nx">h</span><span class="p">.</span><span class="nx">time</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">||</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">)</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;THREE.Animation.update: Warning! Scale out of bounds:&quot;</span><span class="o">+</span><span class="nx">d</span><span class="o">+</span><span class="s2">&quot; on bone &quot;</span><span class="o">+</span><span class="nx">m</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;pos&quot;</span><span class="o">===</span><span class="nx">c</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">LINEAR</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span></td>
      </tr>
      <tr>
        <td id="L602" class="blob-num js-line-number" data-line-number="602"></td>
        <td id="LC602" class="blob-code js-file-line"><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="k">else</span><span class="p">{</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM_FORWARD</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPrevKeyWith</span><span class="p">(</span><span class="s2">&quot;pos&quot;</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">index</span><span class="o">-</span><span class="mi">1</span><span class="p">).</span><span class="nx">pos</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="s2">&quot;pos&quot;</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span><span class="nx">pos</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mf">0.33</span><span class="o">*</span><span class="nx">d</span><span class="o">+</span><span class="mf">0.33</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolateCatmullRom</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM_FORWARD</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolateCatmullRom</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">points</span><span class="p">,</span><span class="mf">1.01</span><span class="o">*</span><span class="nx">d</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L603" class="blob-num js-line-number" data-line-number="603"></td>
        <td id="LC603" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">]),</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">z</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="mi">0</span><span class="p">))}</span><span class="k">else</span><span class="s2">&quot;rot&quot;</span><span class="o">===</span><span class="nx">c</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Quaternion</span><span class="p">.</span><span class="nx">slerp</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">,</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="s2">&quot;scl&quot;</span><span class="o">===</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">scale</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">-</span><span class="nx">e</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span><span class="o">*</span><span class="nx">d</span><span class="p">)}}}};</span></td>
      </tr>
      <tr>
        <td id="L604" class="blob-num js-line-number" data-line-number="604"></td>
        <td id="LC604" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">interpolateCatmullRom</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">[],</span><span class="nx">d</span><span class="o">=</span><span class="p">[],</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">e</span><span class="o">-=</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="o">===</span><span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">f</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">2</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">3</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">f</span><span class="o">+</span><span class="mi">2</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">0</span><span class="p">]];</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">1</span><span class="p">]];</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">2</span><span class="p">]];</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">[</span><span class="mi">3</span><span class="p">]];</span><span class="nx">c</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">i</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">j</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">i</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">j</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">i</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">j</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L605" class="blob-num js-line-number" data-line-number="605"></td>
        <td id="LC605" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">interpolate</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">h</span><span class="o">+</span><span class="p">(</span><span class="o">-</span><span class="mi">3</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">c</span><span class="p">)</span><span class="o">-</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="o">-</span><span class="nx">d</span><span class="p">)</span><span class="o">*</span><span class="nx">f</span><span class="o">+</span><span class="nx">a</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">keys</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM_FORWARD</span><span class="o">?</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="o">:</span><span class="nx">c</span><span class="o">%</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">][</span><span class="nx">a</span><span class="p">])</span><span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="mi">0</span><span class="p">]};</span></td>
      </tr>
      <tr>
        <td id="L606" class="blob-num js-line-number" data-line-number="606"></td>
        <td id="LC606" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Animation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPrevKeyWith</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">keys</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM</span><span class="o">||</span><span class="k">this</span><span class="p">.</span><span class="nx">interpolationType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">CATMULLROM_FORWARD</span><span class="o">?</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">0</span><span class="o">:</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">--</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">][</span><span class="nx">a</span><span class="p">])</span><span class="k">return</span> <span class="nx">d</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">keys</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">root</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">timeScale</span><span class="o">=</span><span class="mf">0.001</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">JITCompile</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:!</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">sids</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">keys</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="nx">h</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">f</span><span class="p">)}</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">node</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span></td>
      </tr>
      <tr>
        <td id="L607" class="blob-num js-line-number" data-line-number="607"></td>
        <td id="LC607" class="blob-code js-file-line"><span class="nx">d</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">}}};</span></td>
      </tr>
      <tr>
        <td id="L608" class="blob-num js-line-number" data-line-number="608"></td>
        <td id="LC608" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">play</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">startTimeMs</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="o">=</span><span class="mi">1</span><span class="nx">E7</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">endTime</span><span class="o">=-</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="o">=</span><span class="p">{},</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">prevKey</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">nextKey</span><span class="o">=</span><span class="kc">null</span><span class="p">,</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="o">=</span><span class="nx">e</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="nx">e</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">:</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrix</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">keys</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L609" class="blob-num js-line-number" data-line-number="609"></td>
        <td id="LC609" class="blob-code js-file-line"><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">prevKey</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">nextKey</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">time</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">endTime</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">time</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">endTime</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="mi">0</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">addToUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">pause</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">addToUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">)</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">removeFromUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=!</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L610" class="blob-num js-line-number" data-line-number="610"></td>
        <td id="LC610" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">stop</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">isPaused</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AnimationHandler</span><span class="p">.</span><span class="nx">removeFromUpdate</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="p">;</span><span class="nx">b</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">=</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrix</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">matrix</span><span class="o">=</span><span class="nx">d</span><span class="p">);</span><span class="k">delete</span> <span class="nx">c</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">}}};</span></td>
      </tr>
      <tr>
        <td id="L611" class="blob-num js-line-number" data-line-number="611"></td>
        <td id="LC611" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">isPlaying</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">JIT</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">+=</span><span class="nx">a</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">timeScale</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">%=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">startTimeMs</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">currentTime</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">startTimeMs</span><span class="o">+</span><span class="nx">h</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nb">parseInt</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">h</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">fps</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">fps</span><span class="p">),</span><span class="mi">10</span><span class="p">);</span><span class="k">if</span><span class="p">((</span><span class="nx">i</span><span class="o">=</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">)</span><span class="o">&amp;&amp;!</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">keys</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">sids</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">l</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L612" class="blob-num js-line-number" data-line-number="612"></td>
        <td id="LC612" class="blob-code js-file-line"><span class="mi">0</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">l</span><span class="p">],(</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">getPrevKeyWith</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">))</span><span class="o">&amp;&amp;</span><span class="nx">g</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">node</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">}}</span><span class="k">this</span><span class="p">.</span><span class="nx">stop</span><span class="p">()}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">h</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">startTime</span><span class="p">)){</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">keys</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">animationCache</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">JITCompile</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">e</span><span class="p">])</span><span class="nx">d</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">e</span><span class="p">],</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrix</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">e</span><span class="p">],</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">JITCompile</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span> <span class="k">instanceof</span></td>
      </tr>
      <tr>
        <td id="L613" class="blob-num js-line-number" data-line-number="613"></td>
        <td id="LC613" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="nx">d</span><span class="p">.</span><span class="nx">skinMatrix</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrix</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">originalMatrix</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">prevKey</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">nextKey</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;=</span><span class="nx">g</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">i</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">loop</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">c</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;)</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">]}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">i</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">time</span><span class="o">&lt;</span><span class="nx">h</span><span class="o">&amp;&amp;</span><span class="nx">c</span><span class="p">.</span><span class="nx">index</span><span class="o">!==</span><span class="nx">n</span><span class="p">;)</span><span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="o">+</span><span class="mi">1</span><span class="p">];</span><span class="nx">m</span><span class="p">.</span><span class="nx">prevKey</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">m</span><span class="p">.</span><span class="nx">nextKey</span><span class="o">=</span><span class="nx">c</span><span class="p">}</span><span class="nx">c</span><span class="p">.</span><span class="nx">time</span><span class="o">&gt;=</span><span class="nx">h</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">h</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">interpolate</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">time</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">node</span><span class="p">.</span><span class="nx">updateMatrix</span><span class="p">();</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrixWorldNeedsUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">}}</span><span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">JITCompile</span><span class="o">&amp;&amp;</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">e</span><span class="p">]){</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L614" class="blob-num js-line-number" data-line-number="614"></td>
        <td id="LC614" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Bone</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">skinMatrix</span><span class="p">.</span><span class="nx">clone</span><span class="p">()</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">clone</span><span class="p">()}}}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getNextKeyWith</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">keys</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">%=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">hasTarget</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">KeyFrameAnimation</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getPrevKeyWith</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">hierarchy</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">keys</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="nx">c</span><span class="o">+</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">;</span><span class="nx">c</span><span class="o">--</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">hasTarget</span><span class="p">(</span><span class="nx">a</span><span class="p">))</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="nx">c</span><span class="p">];</span><span class="k">return</span> <span class="nx">b</span><span class="p">[</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">]};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeCamera</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L615" class="blob-num js-line-number" data-line-number="615"></td>
        <td id="LC615" class="blob-code js-file-line"><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="mi">90</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">up</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">renderTarget</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTargetCube</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">,{</span><span class="nx">format</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBFormat</span><span class="p">,</span><span class="nx">magFilter</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">,</span><span class="nx">minFilter</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">});</span><span class="k">this</span><span class="p">.</span><span class="nx">updateCubeMap</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">renderTarget</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L616" class="blob-num js-line-number" data-line-number="616"></td>
        <td id="LC616" class="blob-code js-file-line"><span class="mi">2</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">generateMipmaps</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">activeCubeFace</span><span class="o">=</span><span class="mi">5</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">render</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">c</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">left</span><span class="o">=-</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">bottom</span><span class="o">=-</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="p">(</span><span class="nx">a</span><span class="o">/-</span><span class="mi">2</span><span class="p">,</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="o">/-</span><span class="mi">2</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">a</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">zoom</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">toPerspective</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L617" class="blob-num js-line-number" data-line-number="617"></td>
        <td id="LC617" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toPerspective</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">near</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">far</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">fov</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">zoom</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">inPerspectiveMode</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">inOrthographicMode</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L618" class="blob-num js-line-number" data-line-number="618"></td>
        <td id="LC618" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toOrthographic</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">aspect</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">near</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">far</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">tan</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span><span class="o">*</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">b</span><span class="o">*</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">zoom</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">zoom</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">left</span><span class="o">=-</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">bottom</span><span class="o">=-</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">near</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">near</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">far</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">far</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraO</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">inPerspectiveMode</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">inOrthographicMode</span><span class="o">=!</span><span class="mi">0</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L619" class="blob-num js-line-number" data-line-number="619"></td>
        <td id="LC619" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setSize</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">cameraP</span><span class="p">.</span><span class="nx">aspect</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">left</span><span class="o">=-</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">bottom</span><span class="o">=-</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setFov</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">fov</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">inPerspectiveMode</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">toPerspective</span><span class="p">()</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">toOrthographic</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">inPerspectiveMode</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">toPerspective</span><span class="p">()</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">toPerspective</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">toOrthographic</span><span class="p">())};</span></td>
      </tr>
      <tr>
        <td id="L620" class="blob-num js-line-number" data-line-number="620"></td>
        <td id="LC620" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setLens</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">24</span><span class="p">);</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">radToDeg</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">a</span><span class="p">)));</span><span class="k">this</span><span class="p">.</span><span class="nx">setFov</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">return</span> <span class="nx">c</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setZoom</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">zoom</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">inPerspectiveMode</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">toPerspective</span><span class="p">()</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">toOrthographic</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toFrontView</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L621" class="blob-num js-line-number" data-line-number="621"></td>
        <td id="LC621" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toBackView</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toLeftView</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span><span class="o">=-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toRightView</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L622" class="blob-num js-line-number" data-line-number="622"></td>
        <td id="LC622" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toTopView</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CombinedCamera</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">toBottomView</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotation</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">rotationAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CircleGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">50</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span><span class="o">:</span><span class="mi">8</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">[];</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">e</span><span class="o">/</span><span class="nx">b</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="o">/</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,(</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="o">/</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">))}</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">b</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,[</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">])),</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">f</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L623" class="blob-num js-line-number" data-line-number="623"></td>
        <td id="LC623" class="blob-code js-file-line"><span class="nx">f</span><span class="p">[</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">h</span><span class="p">]);</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sphere</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CircleGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">q</span><span class="p">){</span><span class="kd">var</span> <span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">widthSegments</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">heightSegments</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="nx">e</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="nx">f</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;y&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">||</span><span class="s2">&quot;y&quot;</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;x&quot;</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="nx">r</span><span class="o">=</span><span class="s2">&quot;z&quot;</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;z&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">||</span><span class="s2">&quot;z&quot;</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;x&quot;</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="nx">r</span><span class="o">=</span><span class="s2">&quot;y&quot;</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">depthSegments</span><span class="p">;</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="s2">&quot;z&quot;</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;y&quot;</span><span class="o">===</span><span class="nx">b</span><span class="o">||</span><span class="s2">&quot;y&quot;</span><span class="o">===</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="s2">&quot;z&quot;</span><span class="o">===</span><span class="nx">b</span><span class="p">)</span><span class="nx">r</span><span class="o">=</span><span class="s2">&quot;x&quot;</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">depthSegments</span><span class="p">;</span><span class="kd">var</span> <span class="nx">H</span><span class="o">=</span><span class="nx">s</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">I</span><span class="o">=</span><span class="nx">v</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="nx">e</span><span class="o">/</span><span class="nx">s</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="nx">f</span><span class="o">/</span><span class="nx">v</span><span class="p">,</span><span class="nx">K</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">K</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">h</span><span class="o">?</span><span class="mi">1</span><span class="o">:-</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">I</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">H</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">B</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">B</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">f</span><span class="o">*</span><span class="nx">G</span><span class="o">-</span><span class="nx">z</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="nx">B</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="nx">e</span><span class="o">*</span><span class="nx">A</span><span class="o">-</span><span class="nx">C</span><span class="p">)</span><span class="o">*</span><span class="nx">d</span><span class="p">;</span><span class="nx">B</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">B</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L624" class="blob-num js-line-number" data-line-number="624"></td>
        <td id="LC624" class="blob-code js-file-line"><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">s</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">H</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">F</span><span class="p">,</span><span class="nx">f</span><span class="o">+</span><span class="nx">H</span><span class="o">*</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nx">F</span><span class="p">,</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="nx">H</span><span class="o">*</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nx">F</span><span class="p">,</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="nx">H</span><span class="o">*</span><span class="nx">e</span><span class="o">+</span><span class="nx">F</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">K</span><span class="p">),</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">K</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">K</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">K</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">K</span><span class="p">.</span><span class="nx">clone</span><span class="p">()),</span><span class="nx">a</span><span class="p">.</span><span class="nx">materialIndex</span><span class="o">=</span><span class="nx">q</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">g</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">f</span><span class="o">/</span><span class="nx">s</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="o">/</span><span class="nx">v</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">f</span><span class="o">/</span><span class="nx">s</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">v</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">s</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="nx">e</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">v</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">s</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="o">/</span><span class="nx">v</span><span class="p">)])}</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">depth</span><span class="o">=</span><span class="nx">c</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">widthSegments</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">heightSegments</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">depthSegments</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L625" class="blob-num js-line-number" data-line-number="625"></td>
        <td id="LC625" class="blob-code js-file-line"><span class="nx">f</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">depth</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">h</span><span class="p">(</span><span class="s2">&quot;z&quot;</span><span class="p">,</span><span class="s2">&quot;y&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">depth</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">h</span><span class="p">(</span><span class="s2">&quot;z&quot;</span><span class="p">,</span><span class="s2">&quot;y&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">depth</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">h</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">,</span><span class="s2">&quot;z&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">depth</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="nx">h</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">,</span><span class="s2">&quot;z&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">depth</span><span class="p">,</span><span class="o">-</span><span class="nx">b</span><span class="p">,</span><span class="mi">3</span><span class="p">);</span><span class="nx">h</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">,</span><span class="s2">&quot;y&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">4</span><span class="p">);</span><span class="nx">h</span><span class="p">(</span><span class="s2">&quot;x&quot;</span><span class="p">,</span><span class="s2">&quot;y&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="p">,</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="mi">5</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">mergeVertices</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CylinderGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">radiusTop</span><span class="o">=</span><span class="nx">a</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="mi">20</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">radiusBottom</span><span class="o">=</span><span class="nx">b</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="o">?</span><span class="nx">b</span><span class="o">:</span><span class="mi">20</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">c</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nx">c</span><span class="o">:</span><span class="mi">100</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="o">=</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">8</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">heightSegments</span><span class="o">=</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">openEnded</span><span class="o">=</span><span class="nx">f</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="o">:!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="p">[],</span><span class="nx">l</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;=</span><span class="nx">e</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="p">[],</span><span class="nx">n</span><span class="o">=</span><span class="p">[],</span><span class="nx">p</span><span class="o">=</span><span class="nx">i</span><span class="o">/</span><span class="nx">e</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">p</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;=</span><span class="nx">d</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">g</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">t</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">y</span><span class="o">=-</span><span class="nx">p</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">h</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">t</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="mi">2</span><span class="o">*</span><span class="nx">q</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">q</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L626" class="blob-num js-line-number" data-line-number="626"></td>
        <td id="LC626" class="blob-code js-file-line"><span class="mi">1</span><span class="o">-</span><span class="nx">p</span><span class="p">))}</span><span class="nx">j</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)}</span><span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">?</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">g</span><span class="p">]].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">]].</span><span class="nx">clone</span><span class="p">())</span><span class="o">:</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="nx">g</span><span class="p">]].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="mi">1</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">]].</span><span class="nx">clone</span><span class="p">());</span><span class="nx">m</span><span class="p">.</span><span class="nx">setY</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">m</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">m</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">m</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">n</span><span class="p">.</span><span class="nx">setY</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">n</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">n</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">n</span><span class="p">.</span><span class="nx">z</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">g</span><span class="p">],</span><span class="nx">t</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">g</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">r</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">s</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">v</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">z</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">C</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">F</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">g</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">H</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">g</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">I</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">G</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L627" class="blob-num js-line-number" data-line-number="627"></td>
        <td id="LC627" class="blob-code js-file-line"><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="p">,[</span><span class="nx">s</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">C</span><span class="p">]));</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">F</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">I</span><span class="p">,</span><span class="nx">G</span><span class="p">])}}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">p</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">g</span><span class="p">],</span><span class="nx">t</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">z</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">F</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">g</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">H</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">I</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">H</span><span class="p">.</span><span class="nx">u</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">,[</span><span class="nx">s</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">z</span><span class="p">])),</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">F</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">I</span><span class="p">])}</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="nx">h</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="nx">p</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L628" class="blob-num js-line-number" data-line-number="628"></td>
        <td id="LC628" class="blob-code js-file-line"><span class="nx">t</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">g</span><span class="p">],</span><span class="nx">q</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">z</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">F</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">H</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">g</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">I</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">H</span><span class="p">.</span><span class="nx">u</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">,[</span><span class="nx">s</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">z</span><span class="p">])),</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">F</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">I</span><span class="p">])}</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CylinderGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="s2">&quot;undefined&quot;</span><span class="o">!==</span><span class="k">typeof</span> <span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">?</span><span class="nx">a</span><span class="o">:</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">shapebb</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">getBoundingBox</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">addShapeList</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">(),</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">())};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addShapeList</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">addShape</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">d</span><span class="p">],</span><span class="nx">b</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L629" class="blob-num js-line-number" data-line-number="629"></td>
        <td id="LC629" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addShape</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="o">||</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;die&quot;</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v1</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v2</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v3</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v4</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v5</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v6</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">e</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">f</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="o">-</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">equals</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span><span class="k">return</span> <span class="nx">g</span><span class="p">.</span><span class="nx">clone</span><span class="p">();</span></td>
      </tr>
      <tr>
        <td id="L630" class="blob-num js-line-number" data-line-number="630"></td>
        <td id="LC630" class="blob-code js-file-line"><span class="nx">h</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">i</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">dot</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">g</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">sub</span><span class="p">(</span><span class="nx">h</span><span class="p">).</span><span class="nx">dot</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="mi">0</span><span class="o">===</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Either infinite or no solutions!&quot;</span><span class="p">),</span><span class="mi">0</span><span class="o">===</span><span class="nx">g</span><span class="o">?</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Its finite solutions.&quot;</span><span class="p">)</span><span class="o">:</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Too bad, no solutions.&quot;</span><span class="p">));</span><span class="nx">g</span><span class="o">/=</span><span class="nx">f</span><span class="p">;</span><span class="k">return</span> <span class="mi">0</span><span class="o">&gt;</span><span class="nx">g</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">b</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">+=</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">),</span><span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">a</span><span class="o">=-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="nx">c</span><span class="o">=-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">))</span><span class="o">:</span><span class="nx">d</span><span class="p">.</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">g</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">h</span><span class="p">).</span><span class="nx">sub</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">clone</span><span class="p">()}</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">O</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;=--</span><span class="nx">O</span><span class="p">;){</span><span class="nx">e</span><span class="o">=</span><span class="nx">O</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">O</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">p</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">l</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L631" class="blob-num js-line-number" data-line-number="631"></td>
        <td id="LC631" class="blob-code js-file-line"><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">pa</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">pa</span><span class="o">*</span><span class="p">(</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="nx">m</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">f</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">f</span><span class="o">+</span><span class="nx">j</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="nx">e</span><span class="o">+</span><span class="nx">j</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="nx">c</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">g</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">h</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">,</span><span class="nx">w</span><span class="o">=</span><span class="nx">f</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">m</span><span class="o">+</span><span class="nx">J</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="nx">J</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="o">+</span><span class="nx">J</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="nx">J</span><span class="p">;</span><span class="nx">B</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">v</span><span class="p">));</span><span class="nx">m</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">generateSideWallUV</span><span class="p">(</span><span class="nx">B</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">w</span><span class="p">);</span><span class="nx">B</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">)}}}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">B</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">))}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">c</span><span class="o">+=</span><span class="nx">J</span><span class="p">;</span><span class="nx">d</span><span class="o">+=</span><span class="nx">J</span><span class="p">;</span><span class="nx">e</span><span class="o">+=</span><span class="nx">J</span><span class="p">;</span><span class="nx">B</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">s</span><span class="p">));</span><span class="nx">c</span><span class="o">=</span><span class="nx">f</span><span class="o">?</span><span class="nx">z</span><span class="p">.</span><span class="nx">generateBottomUV</span><span class="p">(</span><span class="nx">B</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span><span class="o">:</span><span class="nx">z</span><span class="p">.</span><span class="nx">generateTopUV</span><span class="p">(</span><span class="nx">B</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">B</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">amount</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">amount</span><span class="o">:</span></td>
      </tr>
      <tr>
        <td id="L632" class="blob-num js-line-number" data-line-number="632"></td>
        <td id="LC632" class="blob-code js-file-line"><span class="mi">100</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelThickness</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelThickness</span><span class="o">:</span><span class="mi">6</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelSize</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelSize</span><span class="o">:</span><span class="nx">i</span><span class="o">-</span><span class="mi">2</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelSegments</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelSegments</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelEnabled</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelEnabled</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">curveSegments</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">curveSegments</span><span class="o">:</span><span class="mi">12</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">steps</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">steps</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">extrudePath</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">s</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">extrudeMaterial</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">UVGenerator</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">UVGenerator</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">WorldUVGenerator</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">F</span><span class="p">,</span><span class="nx">H</span><span class="p">,</span><span class="nx">I</span><span class="p">;</span><span class="nx">t</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">getSpacedPoints</span><span class="p">(</span><span class="nx">p</span><span class="p">),</span><span class="nx">r</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">frames</span><span class="o">:</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">TubeGeometry</span><span class="p">.</span><span class="nx">FrenetFrames</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L633" class="blob-num js-line-number" data-line-number="633"></td>
        <td id="LC633" class="blob-code js-file-line"><span class="o">!</span><span class="mi">1</span><span class="p">),</span><span class="nx">F</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">I</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">);</span><span class="nx">m</span><span class="o">||</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="o">=</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="kd">var</span> <span class="nx">G</span><span class="p">,</span><span class="nx">A</span><span class="p">,</span><span class="nx">K</span><span class="p">,</span><span class="nx">B</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">J</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">extractPoints</span><span class="p">(</span><span class="nx">n</span><span class="p">),</span><span class="nx">N</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">shape</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">holes</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">t</span><span class="o">=!</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">isClockWise</span><span class="p">(</span><span class="nx">N</span><span class="p">)){</span><span class="nx">N</span><span class="o">=</span><span class="nx">N</span><span class="p">.</span><span class="nx">reverse</span><span class="p">();</span><span class="nx">A</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">K</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">A</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">;</span><span class="nx">A</span><span class="o">++</span><span class="p">)</span><span class="nx">G</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">A</span><span class="p">],</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">isClockWise</span><span class="p">(</span><span class="nx">G</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">A</span><span class="p">]</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">reverse</span><span class="p">());</span><span class="nx">t</span><span class="o">=!</span><span class="mi">1</span><span class="p">}</span><span class="kd">var</span> <span class="nx">y</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">triangulateShape</span><span class="p">(</span><span class="nx">N</span><span class="p">,</span><span class="nx">n</span><span class="p">),</span><span class="nx">t</span><span class="o">=</span><span class="nx">N</span><span class="p">;</span><span class="nx">A</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">K</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">A</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">;</span><span class="nx">A</span><span class="o">++</span><span class="p">)</span><span class="nx">G</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">A</span><span class="p">],</span><span class="nx">N</span><span class="o">=</span><span class="nx">N</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">G</span><span class="p">);</span><span class="kd">var</span> <span class="nx">M</span><span class="p">,</span><span class="nx">w</span><span class="p">,</span><span class="nx">Z</span><span class="p">,</span><span class="nx">L</span><span class="p">,</span><span class="nx">pa</span><span class="o">=</span><span class="nx">N</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">Pa</span><span class="o">=</span><span class="nx">y</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">Ua</span><span class="o">=</span><span class="p">[],</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">ka</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">M</span><span class="o">=</span><span class="nx">ka</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">w</span><span class="o">=</span><span class="nx">O</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">O</span><span class="o">&lt;</span><span class="nx">ka</span><span class="p">;</span><span class="nx">O</span><span class="o">++</span><span class="p">,</span><span class="nx">M</span><span class="o">++</span><span class="p">,</span><span class="nx">w</span><span class="o">++</span><span class="p">)</span><span class="nx">M</span><span class="o">===</span><span class="nx">ka</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L634" class="blob-num js-line-number" data-line-number="634"></td>
        <td id="LC634" class="blob-code js-file-line"><span class="p">(</span><span class="nx">M</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span><span class="nx">w</span><span class="o">===</span><span class="nx">ka</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">w</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span><span class="nx">Ua</span><span class="p">[</span><span class="nx">O</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="nx">M</span><span class="p">],</span><span class="nx">t</span><span class="p">[</span><span class="nx">w</span><span class="p">]);</span><span class="kd">var</span> <span class="nx">Fa</span><span class="o">=</span><span class="p">[],</span><span class="nx">wa</span><span class="p">,</span><span class="nx">D</span><span class="o">=</span><span class="nx">Ua</span><span class="p">.</span><span class="nx">concat</span><span class="p">();</span><span class="nx">A</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">K</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">A</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">;</span><span class="nx">A</span><span class="o">++</span><span class="p">){</span><span class="nx">G</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">A</span><span class="p">];</span><span class="nx">wa</span><span class="o">=</span><span class="p">[];</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">ka</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">M</span><span class="o">=</span><span class="nx">ka</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">w</span><span class="o">=</span><span class="nx">O</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="nx">O</span><span class="o">&lt;</span><span class="nx">ka</span><span class="p">;</span><span class="nx">O</span><span class="o">++</span><span class="p">,</span><span class="nx">M</span><span class="o">++</span><span class="p">,</span><span class="nx">w</span><span class="o">++</span><span class="p">)</span><span class="nx">M</span><span class="o">===</span><span class="nx">ka</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">M</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span><span class="nx">w</span><span class="o">===</span><span class="nx">ka</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">w</span><span class="o">=</span><span class="mi">0</span><span class="p">),</span><span class="nx">wa</span><span class="p">[</span><span class="nx">O</span><span class="p">]</span><span class="o">=</span><span class="nx">d</span><span class="p">(</span><span class="nx">G</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">G</span><span class="p">[</span><span class="nx">M</span><span class="p">],</span><span class="nx">G</span><span class="p">[</span><span class="nx">w</span><span class="p">]);</span><span class="nx">Fa</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">wa</span><span class="p">);</span><span class="nx">D</span><span class="o">=</span><span class="nx">D</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">wa</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="nx">M</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">M</span><span class="o">&lt;</span><span class="nx">l</span><span class="p">;</span><span class="nx">M</span><span class="o">++</span><span class="p">){</span><span class="nx">G</span><span class="o">=</span><span class="nx">M</span><span class="o">/</span><span class="nx">l</span><span class="p">;</span><span class="nx">Z</span><span class="o">=</span><span class="nx">i</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">G</span><span class="p">);</span><span class="nx">w</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">G</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">ka</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">O</span><span class="o">&lt;</span><span class="nx">ka</span><span class="p">;</span><span class="nx">O</span><span class="o">++</span><span class="p">)</span><span class="nx">L</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">Ua</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">w</span><span class="p">),</span><span class="nx">f</span><span class="p">(</span><span class="nx">L</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">L</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="o">-</span><span class="nx">Z</span><span class="p">);</span><span class="nx">A</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">K</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">A</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">;</span><span class="nx">A</span><span class="o">++</span><span class="p">){</span><span class="nx">G</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">A</span><span class="p">];</span><span class="nx">wa</span><span class="o">=</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">A</span><span class="p">];</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">ka</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">O</span><span class="o">&lt;</span><span class="nx">ka</span><span class="p">;</span><span class="nx">O</span><span class="o">++</span><span class="p">)</span><span class="nx">L</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">G</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">wa</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">w</span><span class="p">),</span><span class="nx">f</span><span class="p">(</span><span class="nx">L</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">L</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="o">-</span><span class="nx">Z</span><span class="p">)}}</span><span class="nx">w</span><span class="o">=</span><span class="nx">j</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">O</span><span class="o">&lt;</span><span class="nx">pa</span><span class="p">;</span><span class="nx">O</span><span class="o">++</span><span class="p">)</span><span class="nx">L</span><span class="o">=</span><span class="nx">m</span><span class="o">?</span><span class="nx">c</span><span class="p">(</span><span class="nx">N</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">D</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L635" class="blob-num js-line-number" data-line-number="635"></td>
        <td id="LC635" class="blob-code js-file-line"><span class="nx">w</span><span class="p">)</span><span class="o">:</span><span class="nx">N</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">r</span><span class="o">?</span><span class="p">(</span><span class="nx">H</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">normals</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">L</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">F</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">binormals</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">L</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">I</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="mi">0</span><span class="p">]).</span><span class="nx">add</span><span class="p">(</span><span class="nx">H</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">F</span><span class="p">),</span><span class="nx">f</span><span class="p">(</span><span class="nx">I</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">I</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">I</span><span class="p">.</span><span class="nx">z</span><span class="p">))</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">L</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">L</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">G</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">G</span><span class="o">&lt;=</span><span class="nx">p</span><span class="p">;</span><span class="nx">G</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">O</span><span class="o">&lt;</span><span class="nx">pa</span><span class="p">;</span><span class="nx">O</span><span class="o">++</span><span class="p">)</span><span class="nx">L</span><span class="o">=</span><span class="nx">m</span><span class="o">?</span><span class="nx">c</span><span class="p">(</span><span class="nx">N</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">D</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">w</span><span class="p">)</span><span class="o">:</span><span class="nx">N</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">r</span><span class="o">?</span><span class="p">(</span><span class="nx">H</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">normals</span><span class="p">[</span><span class="nx">G</span><span class="p">]).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">L</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">F</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">C</span><span class="p">.</span><span class="nx">binormals</span><span class="p">[</span><span class="nx">G</span><span class="p">]).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">L</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">I</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">q</span><span class="p">[</span><span class="nx">G</span><span class="p">]).</span><span class="nx">add</span><span class="p">(</span><span class="nx">H</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">F</span><span class="p">),</span><span class="nx">f</span><span class="p">(</span><span class="nx">I</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">I</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">I</span><span class="p">.</span><span class="nx">z</span><span class="p">))</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">L</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">L</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">g</span><span class="o">/</span><span class="nx">p</span><span class="o">*</span><span class="nx">G</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">M</span><span class="o">=</span><span class="nx">l</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;=</span><span class="nx">M</span><span class="p">;</span><span class="nx">M</span><span class="o">--</span><span class="p">){</span><span class="nx">G</span><span class="o">=</span><span class="nx">M</span><span class="o">/</span><span class="nx">l</span><span class="p">;</span><span class="nx">Z</span><span class="o">=</span><span class="nx">i</span><span class="o">*</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">G</span><span class="p">);</span><span class="nx">w</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">G</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">);</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">ka</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">O</span><span class="o">&lt;</span><span class="nx">ka</span><span class="p">;</span><span class="nx">O</span><span class="o">++</span><span class="p">)</span><span class="nx">L</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">t</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">Ua</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">w</span><span class="p">),</span><span class="nx">f</span><span class="p">(</span><span class="nx">L</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">L</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">g</span><span class="o">+</span><span class="nx">Z</span><span class="p">);</span><span class="nx">A</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">K</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">A</span><span class="o">&lt;</span></td>
      </tr>
      <tr>
        <td id="L636" class="blob-num js-line-number" data-line-number="636"></td>
        <td id="LC636" class="blob-code js-file-line"><span class="nx">K</span><span class="p">;</span><span class="nx">A</span><span class="o">++</span><span class="p">){</span><span class="nx">G</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">A</span><span class="p">];</span><span class="nx">wa</span><span class="o">=</span><span class="nx">Fa</span><span class="p">[</span><span class="nx">A</span><span class="p">];</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">ka</span><span class="o">=</span><span class="nx">G</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">O</span><span class="o">&lt;</span><span class="nx">ka</span><span class="p">;</span><span class="nx">O</span><span class="o">++</span><span class="p">)</span><span class="nx">L</span><span class="o">=</span><span class="nx">c</span><span class="p">(</span><span class="nx">G</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">wa</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">w</span><span class="p">),</span><span class="nx">r</span><span class="o">?</span><span class="nx">f</span><span class="p">(</span><span class="nx">L</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">L</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">q</span><span class="p">[</span><span class="nx">p</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">q</span><span class="p">[</span><span class="nx">p</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">x</span><span class="o">+</span><span class="nx">Z</span><span class="p">)</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">L</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">L</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">g</span><span class="o">+</span><span class="nx">Z</span><span class="p">)}}</span><span class="k">if</span><span class="p">(</span><span class="nx">m</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="o">*</span><span class="nx">pa</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">O</span><span class="o">&lt;</span><span class="nx">Pa</span><span class="p">;</span><span class="nx">O</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">y</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">h</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">i</span><span class="o">=</span><span class="nx">pa</span><span class="o">*</span><span class="p">(</span><span class="nx">p</span><span class="o">+</span><span class="mi">2</span><span class="o">*</span><span class="nx">l</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">O</span><span class="o">&lt;</span><span class="nx">Pa</span><span class="p">;</span><span class="nx">O</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">y</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">h</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)}</span><span class="k">else</span><span class="p">{</span><span class="k">for</span><span class="p">(</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">O</span><span class="o">&lt;</span><span class="nx">Pa</span><span class="p">;</span><span class="nx">O</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">y</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">h</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">O</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">O</span><span class="o">&lt;</span><span class="nx">Pa</span><span class="p">;</span><span class="nx">O</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">y</span><span class="p">[</span><span class="nx">O</span><span class="p">],</span><span class="nx">h</span><span class="p">(</span><span class="nx">g</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">pa</span><span class="o">*</span><span class="nx">p</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">pa</span><span class="o">*</span><span class="nx">p</span><span class="p">,</span><span class="nx">g</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">pa</span><span class="o">*</span><span class="nx">p</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">)}</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">g</span><span class="o">+=</span><span class="nx">t</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">A</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">K</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">A</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">;</span><span class="nx">A</span><span class="o">++</span><span class="p">)</span><span class="nx">G</span><span class="o">=</span><span class="nx">n</span><span class="p">[</span><span class="nx">A</span><span class="p">],</span><span class="nx">e</span><span class="p">(</span><span class="nx">G</span><span class="p">,</span><span class="nx">g</span><span class="p">),</span><span class="nx">g</span><span class="o">+=</span><span class="nx">G</span><span class="p">.</span><span class="nx">length</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L637" class="blob-num js-line-number" data-line-number="637"></td>
        <td id="LC637" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">WorldUVGenerator</span><span class="o">=</span><span class="p">{</span><span class="nx">generateTopUV</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">x</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">y</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">x</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">y</span><span class="p">;</span><span class="k">return</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">y</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">f</span><span class="p">)]},</span><span class="nx">generateBottomUV</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">generateTopUV</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">)},</span><span class="nx">generateSideWallUV</span><span class="o">:</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">z</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">z</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L638" class="blob-num js-line-number" data-line-number="638"></td>
        <td id="LC638" class="blob-code js-file-line"><span class="nx">l</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">z</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">y</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">z</span><span class="p">;</span><span class="k">return</span> <span class="mf">0.01</span><span class="o">&gt;</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">i</span><span class="p">)</span><span class="o">?</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">f</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">h</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)]</span><span class="o">:</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">f</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">l</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">h</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">)]}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v1</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v2</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v3</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v4</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L639" class="blob-num js-line-number" data-line-number="639"></td>
        <td id="LC639" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v5</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">__v6</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShapeGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="o">!</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span> <span class="k">instanceof</span> <span class="nb">Array</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="p">[</span><span class="nx">a</span><span class="p">]);</span><span class="k">this</span><span class="p">.</span><span class="nx">shapebb</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">getBoundingBox</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">addShapeList</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShapeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShapeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addShapeList</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">addShape</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">c</span><span class="p">],</span><span class="nx">b</span><span class="p">);</span><span class="k">return</span> <span class="k">this</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L640" class="blob-num js-line-number" data-line-number="640"></td>
        <td id="LC640" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShapeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addShape</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="p">{});</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">UVGenerator</span><span class="o">?</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">WorldUVGenerator</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">UVGenerator</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">extractPoints</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">curveSegments</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">curveSegments</span><span class="o">:</span><span class="mi">12</span><span class="p">);</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">shape</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">holes</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">isClockWise</span><span class="p">(</span><span class="nx">i</span><span class="p">)){</span><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">reverse</span><span class="p">();</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">isClockWise</span><span class="p">(</span><span class="nx">h</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">.</span><span class="nx">reverse</span><span class="p">())}</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Shape</span><span class="p">.</span><span class="nx">Utils</span><span class="p">.</span><span class="nx">triangulateShape</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L641" class="blob-num js-line-number" data-line-number="641"></td>
        <td id="LC641" class="blob-code js-file-line"><span class="nx">i</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">l</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">h</span><span class="o">=</span><span class="nx">i</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="nx">j</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">i</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">+</span><span class="nx">g</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">+</span><span class="nx">g</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="nx">g</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="p">)),</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">generateBottomUV</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">j</span><span class="p">))};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LatheGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">12</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;=</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">c</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">f</span><span class="o">*</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="nx">l</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">j</span><span class="o">*</span><span class="nx">n</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="nx">l</span><span class="o">*</span><span class="nx">n</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">l</span><span class="o">*</span><span class="nx">n</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">j</span><span class="o">*</span><span class="nx">n</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">p</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">p</span><span class="p">)}</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">){</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="o">=</span><span class="nx">i</span><span class="o">+</span><span class="nx">c</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="nx">c</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)),</span><span class="nx">j</span><span class="o">=</span><span class="nx">h</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">i</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">j</span><span class="o">+</span><span class="nx">f</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="nx">e</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L642" class="blob-num js-line-number" data-line-number="642"></td>
        <td id="LC642" class="blob-code js-file-line"><span class="nx">b</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">l</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">)])}</span><span class="k">this</span><span class="p">.</span><span class="nx">mergeVertices</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeVertexNormals</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LatheGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PlaneGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">widthSegments</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">heightSegments</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">widthSegments</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">heightSegments</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">f</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">width</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">height</span><span class="o">/</span><span class="nx">f</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">b</span><span class="o">*</span><span class="nx">i</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="o">-</span><span class="p">(</span><span class="nx">a</span><span class="o">*</span><span class="nx">j</span><span class="o">-</span><span class="nx">e</span><span class="p">),</span><span class="mi">0</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">a</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span></td>
      </tr>
      <tr>
        <td id="L643" class="blob-num js-line-number" data-line-number="643"></td>
        <td id="LC643" class="blob-code js-file-line"><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">()),</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">c</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="o">/</span><span class="nx">f</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">f</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">f</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="o">/</span><span class="nx">f</span><span class="p">)]);</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PlaneGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RingGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">50</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">c</span><span class="o">?</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="nx">c</span><span class="p">)</span><span class="o">:</span><span class="mi">8</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="o">?</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="nx">d</span><span class="p">)</span><span class="o">:</span><span class="mi">8</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">a</span><span class="p">)</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;=</span><span class="nx">d</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="o">+</span><span class="nx">b</span><span class="o">/</span><span class="nx">c</span><span class="o">*</span><span class="nx">f</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="o">/</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="o">/</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">+</span><span class="mi">1</span><span class="p">))}</span><span class="nx">g</span><span class="o">+=</span><span class="nx">i</span><span class="p">}</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">){</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nx">c</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="nx">f</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="nx">a</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L644" class="blob-num js-line-number" data-line-number="644"></td>
        <td id="LC644" class="blob-code js-file-line"><span class="nx">j</span><span class="p">,</span><span class="nx">m</span><span class="p">,[</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">]));</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">h</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="nx">m</span><span class="p">]]);</span><span class="nx">i</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">l</span><span class="o">+</span><span class="mi">1</span><span class="o">+</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">m</span><span class="p">,[</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">e</span><span class="p">]));</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">h</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">h</span><span class="p">[</span><span class="nx">m</span><span class="p">]])}}</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sphere</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">g</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RingGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">50</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">widthSegments</span><span class="o">=</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">||</span><span class="mi">8</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">heightSegments</span><span class="o">=</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">c</span><span class="p">)</span><span class="o">||</span><span class="mi">6</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">phiStart</span><span class="o">=</span><span class="nx">d</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">phiLength</span><span class="o">=</span><span class="nx">e</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">e</span><span class="o">?</span><span class="nx">e</span><span class="o">:</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">thetaStart</span><span class="o">=</span><span class="nx">f</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">f</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">thetaLength</span><span class="o">=</span><span class="nx">h</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">h</span><span class="o">?</span><span class="nx">h</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="p">[],</span><span class="nx">l</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="p">[],</span><span class="nx">n</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;=</span><span class="nx">b</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">g</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">t</span><span class="o">=</span><span class="nx">i</span><span class="o">/</span><span class="nx">c</span><span class="p">,</span><span class="nx">q</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">q</span><span class="p">.</span><span class="nx">x</span><span class="o">=-</span><span class="nx">a</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">p</span><span class="o">*</span><span class="nx">e</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">h</span><span class="p">);</span><span class="nx">q</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">h</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L645" class="blob-num js-line-number" data-line-number="645"></td>
        <td id="LC645" class="blob-code js-file-line"><span class="nx">q</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">a</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">d</span><span class="o">+</span><span class="nx">p</span><span class="o">*</span><span class="nx">e</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">f</span><span class="o">+</span><span class="nx">t</span><span class="o">*</span><span class="nx">h</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">q</span><span class="p">);</span><span class="nx">m</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">t</span><span class="p">))}</span><span class="nx">j</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">n</span><span class="p">)}</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">heightSegments</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">widthSegments</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">g</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">g</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="nx">j</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">clone</span><span class="p">().</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">c</span><span class="p">].</span><span class="nx">clone</span><span class="p">().</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">m</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">clone</span><span class="p">().</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">n</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">clone</span><span class="p">().</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">p</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">t</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">g</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">q</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">g</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">r</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">();</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">b</span><span class="p">].</span><span class="nx">y</span><span class="p">)</span><span class="o">===</span></td>
      </tr>
      <tr>
        <td id="L646" class="blob-num js-line-number" data-line-number="646"></td>
        <td id="LC646" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,[</span><span class="nx">f</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">])),</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="p">]))</span><span class="o">:</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">y</span><span class="p">)</span><span class="o">===</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">?</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,[</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">m</span><span class="p">])),</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">]))</span><span class="o">:</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,[</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">])),</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="p">]))}</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sphere</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="p">{},</span><span class="nx">c</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FontUtils</span><span class="p">.</span><span class="nx">generateShapes</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">amount</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">height</span><span class="o">:</span><span class="mi">50</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelThickness</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelThickness</span><span class="o">=</span><span class="mi">10</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelSize</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelSize</span><span class="o">=</span><span class="mi">8</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelEnabled</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">bevelEnabled</span><span class="o">=!</span><span class="mi">1</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TextGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ExtrudeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">100</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">40</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">8</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">6</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">arc</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="mi">2</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="p">[];</span><span class="nx">b</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">arc</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">c</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">g</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">h</span><span class="p">))</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">+</span><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L647" class="blob-num js-line-number" data-line-number="647"></td>
        <td id="LC647" class="blob-code js-file-line"><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">h</span><span class="p">))</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">h</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">d</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">,</span><span class="nx">c</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">));</span><span class="nx">b</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">sub</span><span class="p">(</span><span class="nx">e</span><span class="p">).</span><span class="nx">normalize</span><span class="p">())}</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">d</span><span class="o">&lt;=</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">)</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">c</span><span class="o">+</span><span class="nx">d</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,[</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="nx">h</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="p">]]);</span><span class="nx">i</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">e</span><span class="p">]);</span><span class="nx">i</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">f</span><span class="p">]);</span><span class="nx">i</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">h</span><span class="p">]);</span><span class="nx">i</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="p">]);</span></td>
      </tr>
      <tr>
        <td id="L648" class="blob-num js-line-number" data-line-number="648"></td>
        <td id="LC648" class="blob-code js-file-line"><span class="nx">i</span><span class="p">.</span><span class="nx">normal</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">a</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">a</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">a</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">clone</span><span class="p">()])}</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusKnotGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">){</span><span class="kd">function</span> <span class="nx">g</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">a</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="nx">c</span><span class="o">*</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">a</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="p">(</span><span class="nx">d</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="nx">b</span><span class="p">))</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="p">(</span><span class="mi">2</span><span class="o">+</span><span class="nx">b</span><span class="p">)</span><span class="o">*</span><span class="nx">g</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">e</span><span class="o">*</span><span class="nx">d</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">d</span><span class="p">)}</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">100</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">40</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">64</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">8</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="o">=</span><span class="nx">e</span><span class="o">||</span><span class="mi">2</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">q</span><span class="o">=</span><span class="nx">f</span><span class="o">||</span><span class="mi">3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">heightScale</span><span class="o">=</span><span class="nx">h</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="o">=</span><span class="nb">Array</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">;</span><span class="o">++</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L649" class="blob-num js-line-number" data-line-number="649"></td>
        <td id="LC649" class="blob-code js-file-line"><span class="nb">Array</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">a</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">)</span><span class="o">*</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">;</span><span class="nx">f</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">q</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">heightScale</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="mf">0.01</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">q</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">p</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">heightScale</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">subVectors</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">addVectors</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">c</span><span class="p">);</span><span class="nx">e</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">d</span><span class="p">.</span><span class="nx">normalize</span><span class="p">();</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">;</span><span class="o">++</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">)</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="nx">h</span><span class="o">=-</span><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">tube</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">i</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">j</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">h</span><span class="o">*</span><span class="nx">d</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">i</span><span class="o">*</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L650" class="blob-num js-line-number" data-line-number="650"></td>
        <td id="LC650" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">}}</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">;</span><span class="o">++</span><span class="nx">a</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">;</span><span class="o">++</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">(</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">b</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">e</span><span class="p">][</span><span class="nx">b</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">e</span><span class="p">][</span><span class="nx">f</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">a</span><span class="p">][</span><span class="nx">f</span><span class="p">],</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">,</span><span class="nx">b</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">,</span><span class="nx">b</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">),</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">a</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">,(</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">),</span><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">,(</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">tubularSegments</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L651" class="blob-num js-line-number" data-line-number="651"></td>
        <td id="LC651" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">])}</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeVertexNormals</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TorusKnotGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TubeGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">64</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">8</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">closed</span><span class="o">=</span><span class="nx">e</span><span class="o">||!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="o">=</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">TubeGeometry</span><span class="p">.</span><span class="nx">FrenetFrames</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">closed</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">normals</span><span class="p">;</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">binormals</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tangents</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">tangents</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normals</span><span class="o">=</span><span class="nx">l</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">binormals</span><span class="o">=</span><span class="nx">m</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">b</span><span class="p">]</span><span class="o">=</span><span class="p">[];</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">/</span><span class="p">(</span><span class="nx">d</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getPointAt</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="nx">h</span><span class="o">=</span><span class="nx">m</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">)</span><span class="o">*</span></td>
      </tr>
      <tr>
        <td id="L652" class="blob-num js-line-number" data-line-number="652"></td>
        <td id="LC652" class="blob-code js-file-line"><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="nx">i</span><span class="o">=-</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">cos</span><span class="p">(</span><span class="nx">g</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sin</span><span class="p">(</span><span class="nx">g</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">j</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="o">+=</span><span class="nx">i</span><span class="o">*</span><span class="nx">f</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="o">+=</span><span class="nx">i</span><span class="o">*</span><span class="nx">f</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="o">+=</span><span class="nx">i</span><span class="o">*</span><span class="nx">f</span><span class="p">.</span><span class="nx">z</span><span class="o">+</span><span class="nx">g</span><span class="o">*</span><span class="nx">h</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">c</span><span class="p">]</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">z</span><span class="p">))</span><span class="o">-</span><span class="mi">1</span><span class="p">}</span><span class="k">for</span><span class="p">(</span><span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">closed</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="o">:</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">c</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">e</span><span class="p">][</span><span class="nx">c</span><span class="p">],</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">e</span><span class="p">][</span><span class="nx">l</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">grid</span><span class="p">[</span><span class="nx">b</span><span class="p">][</span><span class="nx">l</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="p">,</span><span class="nx">c</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="p">,</span><span class="nx">c</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L653" class="blob-num js-line-number" data-line-number="653"></td>
        <td id="LC653" class="blob-code js-file-line"><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="p">,(</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">),</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">b</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">segments</span><span class="p">,(</span><span class="nx">c</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="k">this</span><span class="p">.</span><span class="nx">radialSegments</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">l</span><span class="p">)),</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">m</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">i</span><span class="p">]);</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeVertexNormals</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TubeGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L654" class="blob-num js-line-number" data-line-number="654"></td>
        <td id="LC654" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">TubeGeometry</span><span class="p">.</span><span class="nx">FrenetFrames</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="p">[],</span><span class="nx">f</span><span class="o">=</span><span class="p">[],</span><span class="nx">h</span><span class="o">=</span><span class="p">[],</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">tangents</span><span class="o">=</span><span class="nx">e</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normals</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">binormals</span><span class="o">=</span><span class="nx">h</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">l</span><span class="o">=</span><span class="nx">j</span><span class="o">/</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getTangentAt</span><span class="p">(</span><span class="nx">l</span><span class="p">),</span><span class="nx">e</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="nb">Number</span><span class="p">.</span><span class="nx">MAX_VALUE</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">x</span><span class="p">);</span><span class="nx">l</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">y</span><span class="p">);</span><span class="nx">m</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">abs</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">z</span><span class="p">);</span><span class="nx">j</span><span class="o">&lt;=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">j</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="nx">l</span><span class="o">&lt;=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="nx">m</span><span class="o">&lt;=</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="nx">d</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L655" class="blob-num js-line-number" data-line-number="655"></td>
        <td id="LC655" class="blob-code js-file-line"><span class="nx">d</span><span class="p">).</span><span class="nx">normalize</span><span class="p">();</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">g</span><span class="p">);</span><span class="nx">h</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">f</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="nx">f</span><span class="p">[</span><span class="nx">j</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="p">]</span><span class="o">=</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">g</span><span class="p">.</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">j</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span><span class="nx">e</span><span class="p">[</span><span class="nx">j</span><span class="p">]),</span><span class="mi">1</span><span class="nx">E</span><span class="o">-</span><span class="mi">4</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">()</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">acos</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">clamp</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">j</span><span class="o">-</span><span class="mi">1</span><span class="p">].</span><span class="nx">dot</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">j</span><span class="p">]),</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">)),</span><span class="nx">f</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">makeRotationAxis</span><span class="p">(</span><span class="nx">g</span><span class="p">,</span><span class="nx">d</span><span class="p">))),</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="nx">j</span><span class="p">]);</span><span class="k">if</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">acos</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">clamp</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">dot</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">]),</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">));</span><span class="nx">d</span><span class="o">/=</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">dot</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">f</span><span class="p">[</span><span class="nx">b</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=-</span><span class="nx">d</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">j</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">j</span><span class="o">++</span><span class="p">)</span><span class="nx">f</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">makeRotationAxis</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span><span class="nx">d</span><span class="o">*</span><span class="nx">j</span><span class="p">)),</span><span class="nx">h</span><span class="p">[</span><span class="nx">j</span><span class="p">].</span><span class="nx">crossVectors</span><span class="p">(</span><span class="nx">e</span><span class="p">[</span><span class="nx">j</span><span class="p">],</span></td>
      </tr>
      <tr>
        <td id="L656" class="blob-num js-line-number" data-line-number="656"></td>
        <td id="LC656" class="blob-code js-file-line"><span class="nx">f</span><span class="p">[</span><span class="nx">j</span><span class="p">])}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PolyhedronGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="kd">function</span> <span class="nx">e</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">normalize</span><span class="p">().</span><span class="nx">clone</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">+</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">*</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="p">))</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">+</span><span class="mf">0.5</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">uv</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="mi">1</span><span class="o">-</span><span class="nx">a</span><span class="p">);</span><span class="k">return</span> <span class="nx">b</span><span class="p">}</span><span class="kd">function</span> <span class="nx">f</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">index</span><span class="p">,[</span><span class="nx">a</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">b</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">c</span><span class="p">.</span><span class="nx">clone</span><span class="p">()]);</span><span class="nx">d</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">b</span><span class="p">).</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">).</span><span class="nx">divideScalar</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">atan2</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="o">-</span><span class="nx">d</span><span class="p">.</span><span class="nx">centroid</span><span class="p">.</span><span class="nx">x</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">push</span><span class="p">([</span><span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span><span class="nx">h</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L657" class="blob-num js-line-number" data-line-number="657"></td>
        <td id="LC657" class="blob-code js-file-line"><span class="nx">h</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">)])}</span><span class="kd">function</span> <span class="nx">h</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="o">===</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">));</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">c</span><span class="o">/</span><span class="mi">2</span><span class="o">/</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">+</span><span class="mf">0.5</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">y</span><span class="p">));</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">clone</span><span class="p">()}</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">this</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">],</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="p">[],</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">m</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]],</span><span class="nx">n</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]],</span><span class="nx">p</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="mi">2</span><span class="p">]];</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">index</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">index</span><span class="p">,[</span><span class="nx">m</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">n</span><span class="p">.</span><span class="nx">clone</span><span class="p">(),</span><span class="nx">p</span><span class="p">.</span><span class="nx">clone</span><span class="p">()])}</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">){</span><span class="nx">n</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L658" class="blob-num js-line-number" data-line-number="658"></td>
        <td id="LC658" class="blob-code js-file-line"><span class="nx">l</span><span class="p">);</span><span class="nb">Math</span><span class="p">.</span><span class="nx">pow</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="nx">l</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">a</span><span class="p">]),</span><span class="nx">m</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">b</span><span class="p">]),</span><span class="nx">t</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">n</span><span class="p">.</span><span class="nx">c</span><span class="p">]),</span><span class="nx">n</span><span class="o">=</span><span class="p">[],</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">p</span><span class="o">&lt;=</span><span class="nx">b</span><span class="p">;</span><span class="nx">p</span><span class="o">++</span><span class="p">){</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="o">=</span><span class="p">[];</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">lerp</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">p</span><span class="o">/</span><span class="nx">b</span><span class="p">)),</span><span class="nx">r</span><span class="o">=</span><span class="nx">e</span><span class="p">(</span><span class="nx">m</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">lerp</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">p</span><span class="o">/</span><span class="nx">b</span><span class="p">)),</span><span class="nx">s</span><span class="o">=</span><span class="nx">b</span><span class="o">-</span><span class="nx">p</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">v</span><span class="o">&lt;=</span><span class="nx">s</span><span class="p">;</span><span class="nx">v</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="p">][</span><span class="nx">v</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="o">==</span><span class="nx">v</span><span class="o">&amp;&amp;</span><span class="nx">p</span><span class="o">==</span><span class="nx">b</span><span class="o">?</span><span class="nx">q</span><span class="o">:</span><span class="nx">e</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">clone</span><span class="p">().</span><span class="nx">lerp</span><span class="p">(</span><span class="nx">r</span><span class="p">,</span><span class="nx">v</span><span class="o">/</span><span class="nx">s</span><span class="p">))}</span><span class="k">for</span><span class="p">(</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">p</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">p</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">v</span><span class="o">&lt;</span><span class="mi">2</span><span class="o">*</span><span class="p">(</span><span class="nx">b</span><span class="o">-</span><span class="nx">p</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">;</span><span class="nx">v</span><span class="o">++</span><span class="p">)</span><span class="nx">l</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">v</span><span class="o">/</span><span class="mi">2</span><span class="p">),</span><span class="mi">0</span><span class="o">==</span><span class="nx">v</span><span class="o">%</span><span class="mi">2</span><span class="o">?</span><span class="nx">f</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="p">][</span><span class="nx">l</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">l</span><span class="p">],</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="p">][</span><span class="nx">l</span><span class="p">])</span><span class="o">:</span><span class="nx">f</span><span class="p">(</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="p">][</span><span class="nx">l</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">l</span><span class="o">+</span><span class="mi">1</span><span class="p">],</span><span class="nx">n</span><span class="p">[</span><span class="nx">p</span><span class="o">+</span><span class="mi">1</span><span class="p">][</span><span class="nx">l</span><span class="p">])}</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">][</span><span class="nx">i</span><span class="p">],</span><span class="nx">a</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">x</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">l</span><span class="p">)),</span></td>
      </tr>
      <tr>
        <td id="L659" class="blob-num js-line-number" data-line-number="659"></td>
        <td id="LC659" class="blob-code js-file-line"><span class="nx">n</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">l</span><span class="p">)),</span><span class="mf">0.9</span><span class="o">&lt;</span><span class="nx">m</span><span class="o">&amp;&amp;</span><span class="mf">0.1</span><span class="o">&gt;</span><span class="nx">n</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="mf">0.2</span><span class="o">&gt;</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">x</span><span class="o">+=</span><span class="mi">1</span><span class="p">),</span><span class="mf">0.2</span><span class="o">&gt;</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">x</span><span class="o">+=</span><span class="mi">1</span><span class="p">),</span><span class="mf">0.2</span><span class="o">&gt;</span><span class="nx">l</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">x</span><span class="o">+=</span><span class="mi">1</span><span class="p">));</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">j</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="nx">c</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">mergeVertices</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">boundingSphere</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Sphere</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PolyhedronGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">IcosahedronGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">radius</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">detail</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">+</span><span class="nb">Math</span><span class="p">.</span><span class="nx">sqrt</span><span class="p">(</span><span class="mi">5</span><span class="p">))</span><span class="o">/</span><span class="mi">2</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PolyhedronGeometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,[[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="nx">c</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="nx">c</span><span class="p">],[</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],[</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],[</span><span class="o">-</span><span class="nx">c</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">]],[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">7</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">10</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">11</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">5</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">11</span><span class="p">,</span><span class="mi">10</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">10</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">6</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">8</span><span class="p">],[</span><span class="mi">3</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">9</span><span class="p">],[</span><span class="mi">4</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">11</span><span class="p">],[</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">10</span><span class="p">],[</span><span class="mi">8</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="mi">7</span><span class="p">],[</span><span class="mi">9</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">]],</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">IcosahedronGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OctahedronGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PolyhedronGeometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]],[[</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">3</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">4</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">]],</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">OctahedronGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TetrahedronGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PolyhedronGeometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,[[</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">],[</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">]],[[</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">0</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">],[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">0</span><span class="p">],[</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">]],</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">TetrahedronGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParametricGeometry</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">faceVertexUvs</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">d</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">d</span><span class="o">?!</span><span class="mi">1</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;=</span><span class="nx">c</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">){</span><span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="o">/</span><span class="nx">c</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;=</span><span class="nx">b</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">j</span><span class="o">=</span><span class="nx">i</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">),</span><span class="nx">e</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">j</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="nx">a</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="nx">g</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="p">(</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="p">(</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">*</span><span class="nx">m</span><span class="o">+</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">i</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="o">/</span><span class="nx">c</span><span class="p">),</span><span class="nx">p</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">b</span><span class="p">,</span><span class="nx">g</span><span class="o">/</span><span class="nx">c</span><span class="p">),</span><span class="nx">t</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">i</span><span class="o">/</span><span class="nx">b</span><span class="p">,(</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">),</span><span class="nx">q</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">((</span><span class="nx">i</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">b</span><span class="p">,(</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">),</span><span class="nx">d</span><span class="o">?</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">l</span><span class="p">)),</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face3</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L660" class="blob-num js-line-number" data-line-number="660"></td>
        <td id="LC660" class="blob-code js-file-line"><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">)),</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">]),</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">t</span><span class="p">]))</span><span class="o">:</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">)),</span><span class="nx">h</span><span class="p">.</span><span class="nx">push</span><span class="p">([</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">t</span><span class="p">]));</span><span class="k">this</span><span class="p">.</span><span class="nx">computeCentroids</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeFaceNormals</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">computeVertexNormals</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ParametricGeometry</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">AxisHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="o">||</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">));</span><span class="nx">b</span><span class="p">.</span><span class="nx">colors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16711680</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16755200</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">65280</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">11206400</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">255</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">43775</span><span class="p">));</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">vertexColors</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="p">});</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinePieces</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L661" class="blob-num js-line-number" data-line-number="661"></td>
        <td id="LC661" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">AxisHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="mi">16776960</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">line</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nx">d</span><span class="p">}));</span><span class="k">this</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">line</span><span class="p">);</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CylinderGeometry</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.05</span><span class="p">,</span><span class="mf">0.25</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">applyMatrix</span><span class="p">((</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">).</span><span class="nx">makeTranslation</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.875</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">cone</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nx">d</span><span class="p">}));</span></td>
      </tr>
      <tr>
        <td id="L662" class="blob-num js-line-number" data-line-number="662"></td>
        <td id="LC662" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">cone</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cone</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setDirection</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setLength</span><span class="p">(</span><span class="nx">c</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setDirection</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(</span><span class="nx">c</span><span class="p">){</span><span class="mf">0.99999</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="o">:-</span><span class="mf">0.99999</span><span class="o">&gt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">).</span><span class="nx">normalize</span><span class="p">(),</span><span class="nx">b</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">acos</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="k">this</span><span class="p">.</span><span class="nx">quaternion</span><span class="p">.</span><span class="nx">setFromAxisAngle</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">))}}();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setLength</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">a</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L663" class="blob-num js-line-number" data-line-number="663"></td>
        <td id="LC663" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">ArrowHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setColor</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">line</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">cone</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">setHex</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BoxHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">)];</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span><span class="nx">b</span><span class="p">[</span><span class="mi">7</span><span class="p">]);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">16776960</span><span class="p">}),</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinePieces</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L664" class="blob-num js-line-number" data-line-number="664"></td>
        <td id="LC664" class="blob-code js-file-line"><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">a</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BoxHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L665" class="blob-num js-line-number" data-line-number="665"></td>
        <td id="LC665" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">BoxHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">;</span><span class="kc">null</span><span class="o">===</span><span class="nx">b</span><span class="p">.</span><span class="nx">boundingBox</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">computeBoundingBox</span><span class="p">();</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">.</span><span class="nx">min</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">boundingBox</span><span class="p">.</span><span class="nx">max</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">vertices</span><span class="p">;</span><span class="nx">d</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="mi">6</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">d</span><span class="p">[</span><span class="mi">7</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">computeBoundingSphere</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BoundingBoxHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">8947848</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">box</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Box3</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CubeGeometry</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">wireframe</span><span class="o">:!</span><span class="mi">0</span><span class="p">}))};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BoundingBoxHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">BoundingBoxHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">box</span><span class="p">.</span><span class="nx">setFromObject</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">box</span><span class="p">.</span><span class="nx">size</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">scale</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">box</span><span class="p">.</span><span class="nx">center</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">position</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">function</span> <span class="nx">b</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="nx">c</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">d</span><span class="p">)}</span><span class="kd">function</span> <span class="nx">c</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">);</span><span class="nx">d</span><span class="p">.</span><span class="nx">colors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="nx">b</span><span class="p">));</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="p">[]);</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="p">].</span><span class="nx">push</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">)}</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">16777215</span><span class="p">,</span><span class="nx">vertexColors</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceColors</span><span class="p">}),</span><span class="nx">f</span><span class="o">=</span><span class="p">{};</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n1&quot;</span><span class="p">,</span><span class="s2">&quot;n2&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n2&quot;</span><span class="p">,</span><span class="s2">&quot;n4&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n4&quot;</span><span class="p">,</span><span class="s2">&quot;n3&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n3&quot;</span><span class="p">,</span><span class="s2">&quot;n1&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;f1&quot;</span><span class="p">,</span><span class="s2">&quot;f2&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;f2&quot;</span><span class="p">,</span><span class="s2">&quot;f4&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;f4&quot;</span><span class="p">,</span><span class="s2">&quot;f3&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;f3&quot;</span><span class="p">,</span><span class="s2">&quot;f1&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n1&quot;</span><span class="p">,</span><span class="s2">&quot;f1&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L666" class="blob-num js-line-number" data-line-number="666"></td>
        <td id="LC666" class="blob-code js-file-line"><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n2&quot;</span><span class="p">,</span><span class="s2">&quot;f2&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n3&quot;</span><span class="p">,</span><span class="s2">&quot;f3&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;n4&quot;</span><span class="p">,</span><span class="s2">&quot;f4&quot;</span><span class="p">,</span><span class="mi">16755200</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">,</span><span class="s2">&quot;n1&quot;</span><span class="p">,</span><span class="mi">16711680</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">,</span><span class="s2">&quot;n2&quot;</span><span class="p">,</span><span class="mi">16711680</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">,</span><span class="s2">&quot;n3&quot;</span><span class="p">,</span><span class="mi">16711680</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">,</span><span class="s2">&quot;n4&quot;</span><span class="p">,</span><span class="mi">16711680</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;u1&quot;</span><span class="p">,</span><span class="s2">&quot;u2&quot;</span><span class="p">,</span><span class="mi">43775</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;u2&quot;</span><span class="p">,</span><span class="s2">&quot;u3&quot;</span><span class="p">,</span><span class="mi">43775</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;u3&quot;</span><span class="p">,</span><span class="s2">&quot;u1&quot;</span><span class="p">,</span><span class="mi">43775</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="mi">16777215</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;p&quot;</span><span class="p">,</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="mi">3355443</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;cn1&quot;</span><span class="p">,</span><span class="s2">&quot;cn2&quot;</span><span class="p">,</span><span class="mi">3355443</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;cn3&quot;</span><span class="p">,</span><span class="s2">&quot;cn4&quot;</span><span class="p">,</span><span class="mi">3355443</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;cf1&quot;</span><span class="p">,</span><span class="s2">&quot;cf2&quot;</span><span class="p">,</span><span class="mi">3355443</span><span class="p">);</span><span class="nx">b</span><span class="p">(</span><span class="s2">&quot;cf3&quot;</span><span class="p">,</span><span class="s2">&quot;cf4&quot;</span><span class="p">,</span><span class="mi">3355443</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinePieces</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">camera</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">pointMap</span><span class="o">=</span><span class="nx">f</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">()};</span></td>
      </tr>
      <tr>
        <td id="L667" class="blob-num js-line-number" data-line-number="667"></td>
        <td id="LC667" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L668" class="blob-num js-line-number" data-line-number="668"></td>
        <td id="LC668" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Camera</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Projector</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">d</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">){</span><span class="nx">a</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">unprojectVector</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="nx">d</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">pointMap</span><span class="p">[</span><span class="nx">d</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">d</span><span class="p">){</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">e</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="nx">d</span><span class="p">[</span><span class="nx">h</span><span class="p">]].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">)}}</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">camera</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;t&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;n1&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;n2&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;n3&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;n4&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;f1&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;f2&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;f3&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;f4&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;u1&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L669" class="blob-num js-line-number" data-line-number="669"></td>
        <td id="LC669" class="blob-code js-file-line"><span class="mf">0.7</span><span class="p">,</span><span class="mf">1.1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;u2&quot;</span><span class="p">,</span><span class="o">-</span><span class="mf">0.7</span><span class="p">,</span><span class="mf">1.1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;u3&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;cf1&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;cf2&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;cf3&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;cf4&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;cn1&quot;</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;cn2&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;cn3&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="nx">d</span><span class="p">(</span><span class="s2">&quot;cn4&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">}}();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLightHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PlaneGeometry</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="nx">b</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">wireframe</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">fog</span><span class="o">:!</span><span class="mi">1</span><span class="p">});</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">color</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">intensity</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">lightPlane</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lightPlane</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">computeLineDistances</span><span class="p">();</span></td>
      </tr>
      <tr>
        <td id="L670" class="blob-num js-line-number" data-line-number="670"></td>
        <td id="LC670" class="blob-code js-file-line"><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">fog</span><span class="o">:!</span><span class="mi">1</span><span class="p">});</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">color</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">intensity</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">targetLine</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">targetLine</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLightHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L671" class="blob-num js-line-number" data-line-number="671"></td>
        <td id="LC671" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLightHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="nx">a</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">).</span><span class="nx">negate</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">lightPlane</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">lightPlane</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">color</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">intensity</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">targetLine</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">targetLine</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">targetLine</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lightPlane</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">color</span><span class="p">)}}();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceNormalsHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">16776960</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">1</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">c</span><span class="o">&lt;</span><span class="nx">e</span><span class="p">;</span><span class="nx">c</span><span class="o">++</span><span class="p">)</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">linewidth</span><span class="o">:</span><span class="nx">d</span><span class="p">}),</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinePieces</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normalMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceNormalsHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L672" class="blob-num js-line-number" data-line-number="672"></td>
        <td id="LC672" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceNormalsHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">normalMatrix</span><span class="p">.</span><span class="nx">getNormalMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="nx">c</span><span class="p">[</span><span class="nx">e</span><span class="p">];</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">normal</span><span class="p">).</span><span class="nx">applyMatrix3</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normalMatrix</span><span class="p">).</span><span class="nx">normalize</span><span class="p">().</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="nx">e</span><span class="p">;</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">h</span><span class="p">.</span><span class="nx">centroid</span><span class="p">).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="o">+</span><span class="mi">1</span><span class="p">].</span><span class="nx">addVectors</span><span class="p">(</span><span class="nx">b</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">a</span><span class="p">)}</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L673" class="blob-num js-line-number" data-line-number="673"></td>
        <td id="LC673" class="blob-code js-file-line"><span class="o">!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">}}();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GridHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">vertexColors</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexColors</span><span class="p">});</span><span class="k">this</span><span class="p">.</span><span class="nx">color1</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">4473924</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">color2</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">8947848</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=-</span><span class="nx">a</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;=</span><span class="nx">a</span><span class="p">;</span><span class="nx">e</span><span class="o">+=</span><span class="nx">b</span><span class="p">){</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="o">-</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="nx">a</span><span class="p">),</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">a</span><span class="p">));</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">color1</span><span class="o">:</span><span class="k">this</span><span class="p">.</span><span class="nx">color2</span><span class="p">;</span><span class="nx">c</span><span class="p">.</span><span class="nx">colors</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">f</span><span class="p">)}</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinePieces</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">GridHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L674" class="blob-num js-line-number" data-line-number="674"></td>
        <td id="LC674" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">GridHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setColors</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">color1</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">color2</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">HemisphereLightHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">colors</span><span class="o">=</span><span class="p">[</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">];</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="nx">c</span><span class="p">.</span><span class="nx">applyMatrix</span><span class="p">((</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">).</span><span class="nx">makeRotationX</span><span class="p">(</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">8</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">;</span><span class="nx">d</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">faces</span><span class="p">[</span><span class="nx">d</span><span class="p">].</span><span class="nx">color</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">colors</span><span class="p">[</span><span class="mi">4</span><span class="o">&gt;</span><span class="nx">d</span><span class="o">?</span><span class="mi">0</span><span class="o">:</span><span class="mi">1</span><span class="p">];</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">vertexColors</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">FaceColors</span><span class="p">,</span><span class="nx">wireframe</span><span class="o">:!</span><span class="mi">0</span><span class="p">});</span><span class="k">this</span><span class="p">.</span><span class="nx">lightSphere</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">lightSphere</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L675" class="blob-num js-line-number" data-line-number="675"></td>
        <td id="LC675" class="blob-code js-file-line"><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">HemisphereLightHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">HemisphereLightHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">colors</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">color</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">intensity</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">colors</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">groundColor</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">intensity</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">lightSphere</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">).</span><span class="nx">negate</span><span class="p">());</span><span class="k">this</span><span class="p">.</span><span class="nx">lightSphere</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">colorsNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">}}();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLightHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SphereGeometry</span><span class="p">(</span><span class="nx">b</span><span class="p">,</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">wireframe</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">fog</span><span class="o">:!</span><span class="mi">1</span><span class="p">});</span><span class="nx">d</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">color</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">intensity</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLightHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PointLightHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">color</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">intensity</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLightHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CylinderGeometry</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix</span><span class="p">((</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">).</span><span class="nx">makeTranslation</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="o">-</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="nx">a</span><span class="p">.</span><span class="nx">applyMatrix</span><span class="p">((</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">).</span><span class="nx">makeRotationX</span><span class="p">(</span><span class="o">-</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="o">/</span><span class="mi">2</span><span class="p">));</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshBasicMaterial</span><span class="p">({</span><span class="nx">wireframe</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">fog</span><span class="o">:!</span><span class="mi">1</span><span class="p">});</span><span class="k">this</span><span class="p">.</span><span class="nx">cone</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">cone</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLightHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L676" class="blob-num js-line-number" data-line-number="676"></td>
        <td id="LC676" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLightHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">distance</span><span class="o">?</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">distance</span><span class="o">:</span><span class="mi">1</span><span class="nx">E4</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="nx">b</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">tan</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">angle</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">cone</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">cone</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">).</span><span class="nx">negate</span><span class="p">());</span><span class="k">this</span><span class="p">.</span><span class="nx">cone</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">color</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">light</span><span class="p">.</span><span class="nx">intensity</span><span class="p">)}}();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexNormalsHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">16711680</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">linewidth</span><span class="o">:</span><span class="nx">d</span><span class="p">}),</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinePieces</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">normalMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexNormalsHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L677" class="blob-num js-line-number" data-line-number="677"></td>
        <td id="LC677" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexNormalsHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;b&quot;</span><span class="p">,</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="s2">&quot;d&quot;</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">normalMatrix</span><span class="p">.</span><span class="nx">getNormalMatrix</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">vertexNormals</span><span class="p">[</span><span class="nx">l</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">l</span><span class="p">]]]).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">n</span><span class="p">).</span><span class="nx">applyMatrix3</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">normalMatrix</span><span class="p">).</span><span class="nx">normalize</span><span class="p">().</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L678" class="blob-num js-line-number" data-line-number="678"></td>
        <td id="LC678" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">]);</span><span class="nx">h</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="nx">h</span><span class="o">+=</span><span class="mi">1</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">}}();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexTangentsHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="o">=</span><span class="nx">b</span><span class="o">||</span><span class="mi">1</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="nx">c</span><span class="o">||</span><span class="mi">255</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="nx">d</span><span class="o">||</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">e</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">;</span><span class="nx">e</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">e</span><span class="p">].</span><span class="nx">vertexTangents</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">h</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">;</span><span class="nx">h</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">linewidth</span><span class="o">:</span><span class="nx">d</span><span class="p">}),</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinePieces</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">()};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexTangentsHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L679" class="blob-num js-line-number" data-line-number="679"></td>
        <td id="LC679" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">VertexTangentsHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">return</span> <span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;b&quot;</span><span class="p">,</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="s2">&quot;d&quot;</span><span class="p">];</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">object</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">g</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">;</span><span class="nx">g</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">j</span><span class="o">=</span><span class="nx">e</span><span class="p">[</span><span class="nx">g</span><span class="p">],</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">n</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">vertexTangents</span><span class="p">[</span><span class="nx">l</span><span class="p">];</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">j</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="nx">l</span><span class="p">]]]).</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">n</span><span class="p">).</span><span class="nx">transformDirection</span><span class="p">(</span><span class="nx">f</span><span class="p">).</span><span class="nx">multiplyScalar</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">]);</span><span class="nx">h</span><span class="o">+=</span><span class="mi">1</span><span class="p">;</span><span class="nx">c</span><span class="p">[</span><span class="nx">h</span><span class="p">].</span><span class="nx">copy</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L680" class="blob-num js-line-number" data-line-number="680"></td>
        <td id="LC680" class="blob-code js-file-line"><span class="nx">h</span><span class="o">+=</span><span class="mi">1</span><span class="p">}</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">verticesNeedUpdate</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="k">return</span> <span class="k">this</span><span class="p">}}();</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WireframeHelper</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">],</span><span class="nx">c</span><span class="o">=</span><span class="p">{},</span><span class="nx">d</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="o">-</span><span class="nx">b</span><span class="p">},</span><span class="nx">e</span><span class="o">=</span><span class="p">[</span><span class="s2">&quot;a&quot;</span><span class="p">,</span><span class="s2">&quot;b&quot;</span><span class="p">,</span><span class="s2">&quot;c&quot;</span><span class="p">,</span><span class="s2">&quot;d&quot;</span><span class="p">],</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Geometry</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">vertices</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">faces</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">i</span><span class="o">&lt;</span><span class="nx">j</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">l</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="nx">m</span><span class="o">=</span><span class="nx">l</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Face4</span><span class="o">?</span><span class="mi">4</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">n</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">n</span><span class="o">++</span><span class="p">){</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">e</span><span class="p">[</span><span class="nx">n</span><span class="p">]];</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">l</span><span class="p">[</span><span class="nx">e</span><span class="p">[(</span><span class="nx">n</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span><span class="o">%</span><span class="nx">m</span><span class="p">]];</span><span class="nx">b</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="kd">var</span> <span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">toString</span><span class="p">();</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">0</span><span class="p">]]),</span><span class="nx">f</span><span class="p">.</span><span class="nx">vertices</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">h</span><span class="p">[</span><span class="nx">b</span><span class="p">[</span><span class="mi">1</span><span class="p">]]),</span><span class="nx">c</span><span class="p">[</span><span class="nx">p</span><span class="p">]</span><span class="o">=!</span><span class="mi">0</span><span class="p">)}</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">LineBasicMaterial</span><span class="p">({</span><span class="nx">color</span><span class="o">:</span><span class="mi">16777215</span><span class="p">}),</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinePieces</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixAutoUpdate</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L681" class="blob-num js-line-number" data-line-number="681"></td>
        <td id="LC681" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">WireframeHelper</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Line</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImmediateRenderObject</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(){}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ImmediateRenderObject</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">lensFlares</span><span class="o">=</span><span class="p">[];</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">customUpdateCallback</span><span class="o">=</span><span class="k">void</span> <span class="mi">0</span><span class="p">;</span><span class="k">void</span> <span class="mi">0</span><span class="o">!==</span><span class="nx">a</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Object3D</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L682" class="blob-num js-line-number" data-line-number="682"></td>
        <td id="LC682" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">add</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">b</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="o">=-</span><span class="mi">1</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">f</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">f</span><span class="o">=</span><span class="mi">1</span><span class="p">);</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Color</span><span class="p">(</span><span class="mi">16777215</span><span class="p">));</span><span class="k">void</span> <span class="mi">0</span><span class="o">===</span><span class="nx">d</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NormalBlending</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="nx">c</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="p">));</span><span class="k">this</span><span class="p">.</span><span class="nx">lensFlares</span><span class="p">.</span><span class="nx">push</span><span class="p">({</span><span class="nx">texture</span><span class="o">:</span><span class="nx">a</span><span class="p">,</span><span class="nx">size</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">distance</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">x</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">y</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">z</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">scale</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">rotation</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">opacity</span><span class="o">:</span><span class="nx">f</span><span class="p">,</span><span class="nx">color</span><span class="o">:</span><span class="nx">e</span><span class="p">,</span><span class="nx">blending</span><span class="o">:</span><span class="nx">d</span><span class="p">})};</span></td>
      </tr>
      <tr>
        <td id="L683" class="blob-num js-line-number" data-line-number="683"></td>
        <td id="LC683" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlare</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">updateLensFlares</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lensFlares</span><span class="p">.</span><span class="nx">length</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="mi">2</span><span class="o">*-</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">e</span><span class="o">=</span><span class="mi">2</span><span class="o">*-</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="o">&lt;</span><span class="nx">b</span><span class="p">;</span><span class="nx">a</span><span class="o">++</span><span class="p">)</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">lensFlares</span><span class="p">[</span><span class="nx">a</span><span class="p">],</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">x</span><span class="o">+</span><span class="nx">d</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">distance</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">y</span><span class="o">+</span><span class="nx">e</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">distance</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">wantedRotation</span><span class="o">=</span><span class="mf">0.25</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nb">Math</span><span class="p">.</span><span class="nx">PI</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">rotation</span><span class="o">+=</span><span class="mf">0.25</span><span class="o">*</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">wantedRotation</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">rotation</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">,</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="o">=</span><span class="p">{};</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsList</span><span class="o">=</span><span class="p">[];</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">createAnimation</span><span class="p">(</span><span class="s2">&quot;__default&quot;</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">c</span><span class="o">/</span><span class="mi">1</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">setAnimationWeight</span><span class="p">(</span><span class="s2">&quot;__default&quot;</span><span class="p">,</span><span class="mi">1</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="o">=</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L684" class="blob-num js-line-number" data-line-number="684"></td>
        <td id="LC684" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">createAnimation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="p">{</span><span class="nx">startFrame</span><span class="o">:</span><span class="nx">b</span><span class="p">,</span><span class="nx">endFrame</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">length</span><span class="o">:</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="nx">fps</span><span class="o">:</span><span class="nx">d</span><span class="p">,</span><span class="nx">duration</span><span class="o">:</span><span class="p">(</span><span class="nx">c</span><span class="o">-</span><span class="nx">b</span><span class="p">)</span><span class="o">/</span><span class="nx">d</span><span class="p">,</span><span class="nx">lastFrame</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">currentFrame</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">active</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">time</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">direction</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">weight</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span><span class="nx">directionBackwards</span><span class="o">:!</span><span class="mi">1</span><span class="p">,</span><span class="nx">mirroredLoop</span><span class="o">:!</span><span class="mi">1</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">]</span><span class="o">=</span><span class="nx">b</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsList</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">b</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L685" class="blob-num js-line-number" data-line-number="685"></td>
        <td id="LC685" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">autoCreateAnimations</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="sr">/([a-z]+)(\d+)/</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="o">=</span><span class="p">{},</span><span class="nx">e</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">geometry</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">h</span><span class="p">;</span><span class="nx">f</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">e</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">[</span><span class="nx">f</span><span class="p">].</span><span class="nx">name</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="nx">b</span><span class="p">);</span><span class="k">if</span><span class="p">(</span><span class="nx">g</span><span class="o">&amp;&amp;</span><span class="mi">1</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">length</span><span class="p">){</span><span class="kd">var</span> <span class="nx">i</span><span class="o">=</span><span class="nx">g</span><span class="p">[</span><span class="mi">1</span><span class="p">];</span><span class="nx">d</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">||</span><span class="p">(</span><span class="nx">d</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span><span class="o">=</span><span class="p">{</span><span class="nx">start</span><span class="o">:</span><span class="kc">Infinity</span><span class="p">,</span><span class="nx">end</span><span class="o">:-</span><span class="kc">Infinity</span><span class="p">});</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span><span class="nx">f</span><span class="o">&lt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">start</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">start</span><span class="o">=</span><span class="nx">f</span><span class="p">);</span><span class="nx">f</span><span class="o">&gt;</span><span class="nx">g</span><span class="p">.</span><span class="nx">end</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">end</span><span class="o">=</span><span class="nx">f</span><span class="p">);</span><span class="nx">c</span><span class="o">||</span><span class="p">(</span><span class="nx">c</span><span class="o">=</span><span class="nx">i</span><span class="p">)}}</span><span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">d</span><span class="p">)</span><span class="nx">g</span><span class="o">=</span><span class="nx">d</span><span class="p">[</span><span class="nx">i</span><span class="p">],</span><span class="k">this</span><span class="p">.</span><span class="nx">createAnimation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">start</span><span class="p">,</span><span class="nx">g</span><span class="p">.</span><span class="nx">end</span><span class="p">,</span><span class="nx">a</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">firstAnimation</span><span class="o">=</span><span class="nx">c</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L686" class="blob-num js-line-number" data-line-number="686"></td>
        <td id="LC686" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationDirectionForward</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="nx">a</span><span class="p">.</span><span class="nx">direction</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationDirectionBackward</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="nx">a</span><span class="p">.</span><span class="nx">direction</span><span class="o">=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">a</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=!</span><span class="mi">0</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationFPS</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">fps</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">duration</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">end</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">start</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">fps</span><span class="p">)};</span></td>
      </tr>
      <tr>
        <td id="L687" class="blob-num js-line-number" data-line-number="687"></td>
        <td id="LC687" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationDuration</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">duration</span><span class="o">=</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">fps</span><span class="o">=</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">end</span><span class="o">-</span><span class="nx">c</span><span class="p">.</span><span class="nx">start</span><span class="p">)</span><span class="o">/</span><span class="nx">c</span><span class="p">.</span><span class="nx">duration</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationWeight</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">weight</span><span class="o">=</span><span class="nx">b</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">setAnimationTime</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="kd">var</span> <span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">c</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="nx">b</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getAnimationTime</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">time</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L688" class="blob-num js-line-number" data-line-number="688"></td>
        <td id="LC688" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">getAnimationDuration</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">duration</span><span class="p">;</span><span class="k">return</span> <span class="nx">b</span><span class="p">};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">playAnimation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">];</span><span class="nx">b</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">active</span><span class="o">=!</span><span class="mi">0</span><span class="p">)</span><span class="o">:</span><span class="nx">console</span><span class="p">.</span><span class="nx">warn</span><span class="p">(</span><span class="s2">&quot;animation[&quot;</span><span class="o">+</span><span class="nx">a</span><span class="o">+</span><span class="s2">&quot;] undefined&quot;</span><span class="p">)};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">stopAnimation</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">a</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsMap</span><span class="p">[</span><span class="nx">a</span><span class="p">])</span><span class="nx">a</span><span class="p">.</span><span class="nx">active</span><span class="o">=!</span><span class="mi">1</span><span class="p">};</span></td>
      </tr>
      <tr>
        <td id="L689" class="blob-num js-line-number" data-line-number="689"></td>
        <td id="LC689" class="blob-code js-file-line"><span class="nx">THREE</span><span class="p">.</span><span class="nx">MorphBlendMesh</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">b</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">c</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsList</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">b</span><span class="o">&lt;</span><span class="nx">c</span><span class="p">;</span><span class="nx">b</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="k">this</span><span class="p">.</span><span class="nx">animationsList</span><span class="p">[</span><span class="nx">b</span><span class="p">];</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">active</span><span class="p">){</span><span class="kd">var</span> <span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">duration</span><span class="o">/</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">+=</span><span class="nx">d</span><span class="p">.</span><span class="nx">direction</span><span class="o">*</span><span class="nx">a</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">mirroredLoop</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">duration</span><span class="o">||</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="p">)</span><span class="nx">d</span><span class="p">.</span><span class="nx">direction</span><span class="o">*=-</span><span class="mi">1</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">duration</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">duration</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=!</span><span class="mi">0</span><span class="p">),</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">=!</span><span class="mi">1</span><span class="p">)}</span><span class="k">else</span> <span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">%=</span><span class="nx">d</span><span class="p">.</span><span class="nx">duration</span><span class="p">,</span><span class="mi">0</span><span class="o">&gt;</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">+=</span><span class="nx">d</span><span class="p">.</span><span class="nx">duration</span><span class="p">);</span><span class="kd">var</span> <span class="nx">f</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">startFrame</span><span class="o">+</span><span class="nx">THREE</span><span class="p">.</span><span class="nb">Math</span><span class="p">.</span><span class="nx">clamp</span><span class="p">(</span><span class="nb">Math</span><span class="p">.</span><span class="nx">floor</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">/</span><span class="nx">e</span><span class="p">),</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">length</span><span class="o">-</span><span class="mi">1</span><span class="p">),</span><span class="nx">h</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">weight</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L690" class="blob-num js-line-number" data-line-number="690"></td>
        <td id="LC690" class="blob-code js-file-line"><span class="nx">f</span><span class="o">!==</span><span class="nx">d</span><span class="p">.</span><span class="nx">currentFrame</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">lastFrame</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">currentFrame</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="o">*</span><span class="nx">h</span><span class="p">,</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="nx">f</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">lastFrame</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">currentFrame</span><span class="p">,</span><span class="nx">d</span><span class="p">.</span><span class="nx">currentFrame</span><span class="o">=</span><span class="nx">f</span><span class="p">);</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">time</span><span class="o">%</span><span class="nx">e</span><span class="o">/</span><span class="nx">e</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">directionBackwards</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="p">);</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">currentFrame</span><span class="p">]</span><span class="o">=</span><span class="nx">e</span><span class="o">*</span><span class="nx">h</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">morphTargetInfluences</span><span class="p">[</span><span class="nx">d</span><span class="p">.</span><span class="nx">lastFrame</span><span class="p">]</span><span class="o">=</span><span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="nx">e</span><span class="p">)</span><span class="o">*</span><span class="nx">h</span><span class="p">}}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LensFlarePlugin</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="kd">var</span> <span class="nx">d</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createProgram</span><span class="p">(),</span><span class="nx">e</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">),</span><span class="nx">f</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">),</span><span class="nx">g</span><span class="o">=</span><span class="s2">&quot;precision &quot;</span><span class="o">+</span><span class="nx">c</span><span class="o">+</span><span class="s2">&quot; float;\n&quot;</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">e</span><span class="p">,</span><span class="nx">g</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">f</span><span class="p">,</span><span class="nx">g</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">f</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">f</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">linkProgram</span><span class="p">(</span><span class="nx">d</span><span class="p">);</span><span class="k">return</span> <span class="nx">d</span><span class="p">}</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">t</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">context</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">t</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">getPrecision</span><span class="p">();</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span><span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L691" class="blob-num js-line-number" data-line-number="691"></td>
        <td id="LC691" class="blob-code js-file-line"><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">t</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">f</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">f</span><span class="p">[</span><span class="nx">t</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">STATIC_DRAW</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">STATIC_DRAW</span><span class="p">);</span><span class="nx">i</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createTexture</span><span class="p">();</span><span class="nx">j</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createTexture</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">RGB</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L692" class="blob-num js-line-number" data-line-number="692"></td>
        <td id="LC692" class="blob-code js-file-line"><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">RGB</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">UNSIGNED_BYTE</span><span class="p">,</span><span class="kc">null</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_S</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_T</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_MAG_FILTER</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">NEAREST</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_MIN_FILTER</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">NEAREST</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texImage2D</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">RGBA</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">RGBA</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">UNSIGNED_BYTE</span><span class="p">,</span><span class="kc">null</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_S</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_WRAP_T</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">CLAMP_TO_EDGE</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L693" class="blob-num js-line-number" data-line-number="693"></td>
        <td id="LC693" class="blob-code js-file-line"><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_MAG_FILTER</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">NEAREST</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">texParameteri</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_MIN_FILTER</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">NEAREST</span><span class="p">);</span><span class="mi">0</span><span class="o">&gt;=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getParameter</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">MAX_VERTEX_TEXTURE_IMAGE_UNITS</span><span class="p">)</span><span class="o">?</span><span class="p">(</span><span class="nx">l</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderFlares</span><span class="p">.</span><span class="nx">lensFlare</span><span class="p">,</span><span class="nx">d</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">l</span><span class="o">=!</span><span class="mi">0</span><span class="p">,</span><span class="nx">m</span><span class="o">=</span><span class="nx">a</span><span class="p">(</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderFlares</span><span class="p">.</span><span class="nx">lensFlareVertexTexture</span><span class="p">,</span><span class="nx">d</span><span class="p">));</span><span class="nx">n</span><span class="o">=</span><span class="p">{};</span><span class="nx">p</span><span class="o">=</span><span class="p">{};</span><span class="nx">n</span><span class="p">.</span><span class="nx">vertex</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getAttribLocation</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="s2">&quot;position&quot;</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">uv</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getAttribLocation</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="s2">&quot;uv&quot;</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">renderType</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="s2">&quot;renderType&quot;</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="s2">&quot;map&quot;</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">occlusionMap</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="s2">&quot;occlusionMap&quot;</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">opacity</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L694" class="blob-num js-line-number" data-line-number="694"></td>
        <td id="LC694" class="blob-code js-file-line"><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="s2">&quot;opacity&quot;</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="s2">&quot;color&quot;</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">scale</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="s2">&quot;scale&quot;</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="s2">&quot;rotation&quot;</span><span class="p">);</span><span class="nx">p</span><span class="p">.</span><span class="nx">screenPosition</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="s2">&quot;screenPosition&quot;</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">){</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">__webglFlares</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">v</span><span class="p">){</span><span class="kd">var</span> <span class="nx">z</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="nx">f</span><span class="o">/</span><span class="nx">e</span><span class="p">,</span><span class="nx">F</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">e</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="nx">I</span><span class="o">=</span><span class="mi">16</span><span class="o">/</span><span class="nx">f</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">I</span><span class="o">*</span><span class="nx">C</span><span class="p">,</span><span class="nx">I</span><span class="p">),</span><span class="nx">A</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">K</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">B</span><span class="o">=</span><span class="nx">p</span><span class="p">,</span><span class="nx">I</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">useProgram</span><span class="p">(</span><span class="nx">m</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">vertex</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">n</span><span class="p">.</span><span class="nx">uv</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L695" class="blob-num js-line-number" data-line-number="695"></td>
        <td id="LC695" class="blob-code js-file-line"><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">occlusionMap</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">map</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">I</span><span class="p">.</span><span class="nx">vertex</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">I</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">depthMask</span><span class="p">(</span><span class="o">!</span><span class="mi">1</span><span class="p">);</span><span class="kd">var</span> <span class="nx">J</span><span class="p">,</span><span class="nx">N</span><span class="p">,</span><span class="nx">y</span><span class="p">,</span><span class="nx">M</span><span class="p">,</span><span class="nx">w</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">J</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">J</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">;</span><span class="nx">J</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">I</span><span class="o">=</span><span class="mi">16</span><span class="o">/</span><span class="nx">f</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">I</span><span class="o">*</span><span class="nx">C</span><span class="p">,</span><span class="nx">I</span><span class="p">),</span><span class="nx">M</span><span class="o">=</span><span class="nx">a</span><span class="p">[</span><span class="nx">J</span><span class="p">],</span><span class="nx">z</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="nx">M</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">12</span><span class="p">],</span><span class="nx">M</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">13</span><span class="p">],</span><span class="nx">M</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">14</span><span class="p">]),</span><span class="nx">z</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">),</span><span class="nx">z</span><span class="p">.</span><span class="nx">applyProjection</span><span class="p">(</span><span class="nx">d</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">),</span><span class="nx">A</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">z</span><span class="p">),</span><span class="nx">K</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">F</span><span class="o">+</span><span class="nx">F</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L696" class="blob-num js-line-number" data-line-number="696"></td>
        <td id="LC696" class="blob-code js-file-line"><span class="nx">K</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">A</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">H</span><span class="o">+</span><span class="nx">H</span><span class="p">,</span><span class="nx">l</span><span class="o">||</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="nx">K</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">K</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="nx">K</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">f</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">copyTexImage2D</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">RGB</span><span class="p">,</span><span class="nx">K</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="nx">K</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">renderType</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform2f</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">scale</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">y</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">screenPosition</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">j</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">copyTexImage2D</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">RGBA</span><span class="p">,</span><span class="nx">K</span><span class="p">.</span><span class="nx">x</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="nx">K</span><span class="p">.</span><span class="nx">y</span><span class="o">-</span><span class="mi">8</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">renderType</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L697" class="blob-num js-line-number" data-line-number="697"></td>
        <td id="LC697" class="blob-code js-file-line"><span class="nx">b</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE1</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE_2D</span><span class="p">,</span><span class="nx">i</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">M</span><span class="p">.</span><span class="nx">positionScreen</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">A</span><span class="p">);</span><span class="nx">M</span><span class="p">.</span><span class="nx">customUpdateCallback</span><span class="o">?</span><span class="nx">M</span><span class="p">.</span><span class="nx">customUpdateCallback</span><span class="p">(</span><span class="nx">M</span><span class="p">)</span><span class="o">:</span><span class="nx">M</span><span class="p">.</span><span class="nx">updateLensFlares</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">renderType</span><span class="p">,</span><span class="mi">2</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">N</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">y</span><span class="o">=</span><span class="nx">M</span><span class="p">.</span><span class="nx">lensFlares</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">N</span><span class="o">&lt;</span><span class="nx">y</span><span class="p">;</span><span class="nx">N</span><span class="o">++</span><span class="p">)</span><span class="nx">w</span><span class="o">=</span><span class="nx">M</span><span class="p">.</span><span class="nx">lensFlares</span><span class="p">[</span><span class="nx">N</span><span class="p">],</span><span class="mf">0.001</span><span class="o">&lt;</span><span class="nx">w</span><span class="p">.</span><span class="nx">opacity</span><span class="o">&amp;&amp;</span><span class="mf">0.001</span><span class="o">&lt;</span><span class="nx">w</span><span class="p">.</span><span class="nx">scale</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">A</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">z</span><span class="p">,</span><span class="nx">I</span><span class="o">=</span><span class="nx">w</span><span class="p">.</span><span class="nx">size</span><span class="o">*</span><span class="nx">w</span><span class="p">.</span><span class="nx">scale</span><span class="o">/</span><span class="nx">f</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">I</span><span class="o">*</span><span class="nx">C</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">I</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">screenPosition</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">A</span><span class="p">.</span><span class="nx">z</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform2f</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">scale</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">rotation</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">rotation</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">opacity</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L698" class="blob-num js-line-number" data-line-number="698"></td>
        <td id="LC698" class="blob-code js-file-line"><span class="nx">w</span><span class="p">.</span><span class="nx">opacity</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">B</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">setBlending</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">blending</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">blendSrc</span><span class="p">,</span><span class="nx">w</span><span class="p">.</span><span class="nx">blendDst</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">setTexture</span><span class="p">(</span><span class="nx">w</span><span class="p">.</span><span class="nx">texture</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="mi">0</span><span class="p">))}</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">DEPTH_TEST</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">depthMask</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">)}}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShadowMapPlugin</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">,</span><span class="nx">i</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">j</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">l</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">context</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderLib</span><span class="p">.</span><span class="nx">depthRGBA</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">h</span><span class="p">});</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">morphTargets</span><span class="o">:!</span><span class="mi">0</span><span class="p">});</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L699" class="blob-num js-line-number" data-line-number="699"></td>
        <td id="LC699" class="blob-code js-file-line"><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">skinning</span><span class="o">:!</span><span class="mi">0</span><span class="p">});</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">morphTargets</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">skinning</span><span class="o">:!</span><span class="mi">0</span><span class="p">});</span><span class="nx">c</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">=!</span><span class="mi">0</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">){</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowMapEnabled</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowMapAutoUpdate</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">c</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">){</span><span class="kd">var</span> <span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="p">,</span><span class="nx">s</span><span class="p">,</span><span class="nx">v</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">F</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="p">[];</span><span class="nx">r</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">frontFace</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">CCW</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowMapCullFace</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CullFaceFront</span><span class="o">?</span></td>
      </tr>
      <tr>
        <td id="L700" class="blob-num js-line-number" data-line-number="700"></td>
        <td id="LC700" class="blob-code js-file-line"><span class="nx">a</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">FRONT</span><span class="p">)</span><span class="o">:</span><span class="nx">a</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">BACK</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">__lights</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">p</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">;</span><span class="nx">p</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">__lights</span><span class="p">[</span><span class="nx">p</span><span class="p">],</span><span class="nx">q</span><span class="p">.</span><span class="nx">castShadow</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCascade</span><span class="p">)</span><span class="k">for</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">s</span><span class="o">&lt;</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCascadeCount</span><span class="p">;</span><span class="nx">s</span><span class="o">++</span><span class="p">){</span><span class="kd">var</span> <span class="nx">I</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCascadeArray</span><span class="p">[</span><span class="nx">s</span><span class="p">])</span><span class="nx">I</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCascadeArray</span><span class="p">[</span><span class="nx">s</span><span class="p">];</span><span class="k">else</span><span class="p">{</span><span class="nx">F</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="nx">z</span><span class="o">=</span><span class="nx">s</span><span class="p">;</span><span class="nx">I</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">;</span><span class="nx">I</span><span class="p">.</span><span class="nx">isVirtual</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">I</span><span class="p">.</span><span class="nx">onlyShadow</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">I</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">I</span><span class="p">.</span><span class="nx">shadowCameraNear</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowCameraNear</span><span class="p">;</span><span class="nx">I</span><span class="p">.</span><span class="nx">shadowCameraFar</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowCameraFar</span><span class="p">;</span><span class="nx">I</span><span class="p">.</span><span class="nx">shadowCameraLeft</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowCameraLeft</span><span class="p">;</span><span class="nx">I</span><span class="p">.</span><span class="nx">shadowCameraRight</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowCameraRight</span><span class="p">;</span></td>
      </tr>
      <tr>
        <td id="L701" class="blob-num js-line-number" data-line-number="701"></td>
        <td id="LC701" class="blob-code js-file-line"><span class="nx">I</span><span class="p">.</span><span class="nx">shadowCameraBottom</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowCameraBottom</span><span class="p">;</span><span class="nx">I</span><span class="p">.</span><span class="nx">shadowCameraTop</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowCameraTop</span><span class="p">;</span><span class="nx">I</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="p">;</span><span class="nx">I</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="p">;</span><span class="nx">I</span><span class="p">.</span><span class="nx">shadowBias</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowCascadeBias</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">I</span><span class="p">.</span><span class="nx">shadowMapWidth</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowCascadeWidth</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">I</span><span class="p">.</span><span class="nx">shadowMapHeight</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowCascadeHeight</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">I</span><span class="p">.</span><span class="nx">pointsWorld</span><span class="o">=</span><span class="p">[];</span><span class="nx">I</span><span class="p">.</span><span class="nx">pointsFrustum</span><span class="o">=</span><span class="p">[];</span><span class="nx">C</span><span class="o">=</span><span class="nx">I</span><span class="p">.</span><span class="nx">pointsWorld</span><span class="p">;</span><span class="nx">v</span><span class="o">=</span><span class="nx">I</span><span class="p">.</span><span class="nx">pointsFrustum</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">G</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">8</span><span class="o">&gt;</span><span class="nx">G</span><span class="p">;</span><span class="nx">G</span><span class="o">++</span><span class="p">)</span><span class="nx">C</span><span class="p">[</span><span class="nx">G</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">,</span><span class="nx">v</span><span class="p">[</span><span class="nx">G</span><span class="p">]</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector3</span><span class="p">;</span><span class="nx">C</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowCascadeNearZ</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">F</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowCascadeFarZ</span><span class="p">[</span><span class="nx">z</span><span class="p">];</span><span class="nx">v</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">C</span><span class="p">);</span><span class="nx">v</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">C</span><span class="p">);</span><span class="nx">v</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L702" class="blob-num js-line-number" data-line-number="702"></td>
        <td id="LC702" class="blob-code js-file-line"><span class="mi">1</span><span class="p">,</span><span class="nx">C</span><span class="p">);</span><span class="nx">v</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">C</span><span class="p">);</span><span class="nx">v</span><span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">F</span><span class="p">);</span><span class="nx">v</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="nx">F</span><span class="p">);</span><span class="nx">v</span><span class="p">[</span><span class="mi">6</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">F</span><span class="p">);</span><span class="nx">v</span><span class="p">[</span><span class="mi">7</span><span class="p">].</span><span class="nx">set</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="nx">F</span><span class="p">);</span><span class="nx">I</span><span class="p">.</span><span class="nx">originalCamera</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">v</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Gyroscope</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCascadeOffset</span><span class="p">;</span><span class="nx">v</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">I</span><span class="p">);</span><span class="nx">v</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">I</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span><span class="nx">n</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">v</span><span class="p">);</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCascadeArray</span><span class="p">[</span><span class="nx">s</span><span class="p">]</span><span class="o">=</span><span class="nx">I</span><span class="p">;</span><span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&quot;Created virtualLight&quot;</span><span class="p">,</span><span class="nx">I</span><span class="p">)}</span><span class="nx">z</span><span class="o">=</span><span class="nx">q</span><span class="p">;</span><span class="nx">C</span><span class="o">=</span><span class="nx">s</span><span class="p">;</span><span class="nx">F</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">shadowCascadeArray</span><span class="p">[</span><span class="nx">C</span><span class="p">];</span><span class="nx">F</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span><span class="nx">F</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">z</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span><span class="nx">F</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="nx">F</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="p">;</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">shadowDarkness</span><span class="p">;</span><span class="nx">F</span><span class="p">.</span><span class="nx">shadowBias</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">shadowCascadeBias</span><span class="p">[</span><span class="nx">C</span><span class="p">];</span><span class="nx">v</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">shadowCascadeNearZ</span><span class="p">[</span><span class="nx">C</span><span class="p">];</span></td>
      </tr>
      <tr>
        <td id="L703" class="blob-num js-line-number" data-line-number="703"></td>
        <td id="LC703" class="blob-code js-file-line"><span class="nx">z</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">shadowCascadeFarZ</span><span class="p">[</span><span class="nx">C</span><span class="p">];</span><span class="nx">F</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">pointsFrustum</span><span class="p">;</span><span class="nx">F</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">v</span><span class="p">;</span><span class="nx">F</span><span class="p">[</span><span class="mi">1</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">v</span><span class="p">;</span><span class="nx">F</span><span class="p">[</span><span class="mi">2</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">v</span><span class="p">;</span><span class="nx">F</span><span class="p">[</span><span class="mi">3</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">v</span><span class="p">;</span><span class="nx">F</span><span class="p">[</span><span class="mi">4</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">z</span><span class="p">;</span><span class="nx">F</span><span class="p">[</span><span class="mi">5</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">z</span><span class="p">;</span><span class="nx">F</span><span class="p">[</span><span class="mi">6</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">z</span><span class="p">;</span><span class="nx">F</span><span class="p">[</span><span class="mi">7</span><span class="p">].</span><span class="nx">z</span><span class="o">=</span><span class="nx">z</span><span class="p">;</span><span class="nx">H</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">I</span><span class="p">;</span><span class="nx">r</span><span class="o">++</span><span class="p">}</span><span class="k">else</span> <span class="nx">H</span><span class="p">[</span><span class="nx">r</span><span class="p">]</span><span class="o">=</span><span class="nx">q</span><span class="p">,</span><span class="nx">r</span><span class="o">++</span><span class="p">;</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">H</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">p</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">;</span><span class="nx">p</span><span class="o">++</span><span class="p">){</span><span class="nx">q</span><span class="o">=</span><span class="nx">H</span><span class="p">[</span><span class="nx">p</span><span class="p">];</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowMap</span><span class="o">||</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">LinearFilter</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowMapType</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">PCFSoftShadowMap</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">s</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">NearestFilter</span><span class="p">),</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowMap</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">WebGLRenderTarget</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowMapWidth</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowMapHeight</span><span class="p">,{</span><span class="nx">minFilter</span><span class="o">:</span><span class="nx">s</span><span class="p">,</span><span class="nx">magFilter</span><span class="o">:</span><span class="nx">s</span><span class="p">,</span><span class="nx">format</span><span class="o">:</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">RGBAFormat</span><span class="p">}),</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowMapSize</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Vector2</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowMapWidth</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowMapHeight</span><span class="p">),</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L704" class="blob-num js-line-number" data-line-number="704"></td>
        <td id="LC704" class="blob-code js-file-line"><span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="p">){</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SpotLight</span><span class="p">)</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">PerspectiveCamera</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCameraFov</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowMapWidth</span><span class="o">/</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowMapHeight</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCameraNear</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCameraFar</span><span class="p">);</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">q</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">DirectionalLight</span><span class="p">)</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">OrthographicCamera</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCameraLeft</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCameraRight</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCameraTop</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCameraBottom</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCameraNear</span><span class="p">,</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCameraFar</span><span class="p">);</span><span class="k">else</span><span class="p">{</span><span class="nx">console</span><span class="p">.</span><span class="nx">error</span><span class="p">(</span><span class="s2">&quot;Unsupported light type for shadow&quot;</span><span class="p">);</span><span class="k">continue</span><span class="p">}</span><span class="nx">m</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="p">);</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">m</span><span class="p">.</span><span class="nx">autoUpdate</span><span class="o">&amp;&amp;</span><span class="nx">m</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">()}</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L705" class="blob-num js-line-number" data-line-number="705"></td>
        <td id="LC705" class="blob-code js-file-line"><span class="o">!</span><span class="nx">q</span><span class="p">.</span><span class="nx">cameraHelper</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">cameraHelper</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">CameraHelper</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="p">),</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="p">.</span><span class="nx">add</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">cameraHelper</span><span class="p">));</span><span class="k">if</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">isVirtual</span><span class="o">&amp;&amp;</span><span class="nx">I</span><span class="p">.</span><span class="nx">originalCamera</span><span class="o">==</span><span class="nx">n</span><span class="p">){</span><span class="nx">s</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">r</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="p">;</span><span class="nx">v</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">pointsFrustum</span><span class="p">;</span><span class="nx">F</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">pointsWorld</span><span class="p">;</span><span class="nx">i</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="kc">Infinity</span><span class="p">,</span><span class="kc">Infinity</span><span class="p">,</span><span class="kc">Infinity</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="o">-</span><span class="kc">Infinity</span><span class="p">,</span><span class="o">-</span><span class="kc">Infinity</span><span class="p">,</span><span class="o">-</span><span class="kc">Infinity</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">z</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="mi">8</span><span class="o">&gt;</span><span class="nx">z</span><span class="p">;</span><span class="nx">z</span><span class="o">++</span><span class="p">)</span><span class="nx">C</span><span class="o">=</span><span class="nx">F</span><span class="p">[</span><span class="nx">z</span><span class="p">],</span><span class="nx">C</span><span class="p">.</span><span class="nx">copy</span><span class="p">(</span><span class="nx">v</span><span class="p">[</span><span class="nx">z</span><span class="p">]),</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShadowMapPlugin</span><span class="p">.</span><span class="nx">__projector</span><span class="p">.</span><span class="nx">unprojectVector</span><span class="p">(</span><span class="nx">C</span><span class="p">,</span><span class="nx">s</span><span class="p">),</span><span class="nx">C</span><span class="p">.</span><span class="nx">applyMatrix4</span><span class="p">(</span><span class="nx">r</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">),</span><span class="nx">C</span><span class="p">.</span><span class="nx">x</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">C</span><span class="p">.</span><span class="nx">x</span><span class="o">&gt;</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">x</span><span class="p">),</span><span class="nx">C</span><span class="p">.</span><span class="nx">y</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">C</span><span class="p">.</span><span class="nx">y</span><span class="o">&gt;</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">C</span><span class="p">.</span><span class="nx">z</span><span class="o">&lt;</span><span class="nx">i</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">i</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">z</span><span class="p">),</span><span class="nx">C</span><span class="p">.</span><span class="nx">z</span><span class="o">&gt;</span><span class="nx">j</span><span class="p">.</span><span class="nx">z</span><span class="o">&amp;&amp;</span></td>
      </tr>
      <tr>
        <td id="L706" class="blob-num js-line-number" data-line-number="706"></td>
        <td id="LC706" class="blob-code js-file-line"><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">z</span><span class="o">=</span><span class="nx">C</span><span class="p">.</span><span class="nx">z</span><span class="p">);</span><span class="nx">r</span><span class="p">.</span><span class="nx">left</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">right</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">x</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">top</span><span class="o">=</span><span class="nx">j</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">bottom</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">y</span><span class="p">;</span><span class="nx">r</span><span class="p">.</span><span class="nx">updateProjectionMatrix</span><span class="p">()}</span><span class="nx">r</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowMap</span><span class="p">;</span><span class="nx">v</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowMatrix</span><span class="p">;</span><span class="nx">s</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCamera</span><span class="p">;</span><span class="nx">s</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">getPositionFromMatrix</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">target</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">lookAt</span><span class="p">(</span><span class="nx">l</span><span class="p">);</span><span class="nx">s</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="nx">s</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">q</span><span class="p">.</span><span class="nx">cameraHelper</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">q</span><span class="p">.</span><span class="nx">cameraHelper</span><span class="p">.</span><span class="nx">visible</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="p">);</span><span class="nx">q</span><span class="p">.</span><span class="nx">shadowCameraVisible</span><span class="o">&amp;&amp;</span><span class="nx">q</span><span class="p">.</span><span class="nx">cameraHelper</span><span class="p">.</span><span class="nx">update</span><span class="p">();</span><span class="nx">v</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.5</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">v</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">);</span><span class="nx">v</span><span class="p">.</span><span class="nx">multiply</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">);</span></td>
      </tr>
      <tr>
        <td id="L707" class="blob-num js-line-number" data-line-number="707"></td>
        <td id="LC707" class="blob-code js-file-line"><span class="nx">g</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span><span class="nx">s</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">setFromMatrix</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">setRenderTarget</span><span class="p">(</span><span class="nx">r</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span><span class="nx">F</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">q</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">q</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">z</span><span class="o">=</span><span class="nx">F</span><span class="p">[</span><span class="nx">q</span><span class="p">],</span><span class="nx">v</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span><span class="nx">z</span><span class="p">.</span><span class="nx">render</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="nx">v</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">v</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">||</span><span class="nx">v</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">)</span><span class="o">||!</span><span class="nx">v</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">||</span><span class="nx">h</span><span class="p">.</span><span class="nx">intersectsObject</span><span class="p">(</span><span class="nx">v</span><span class="p">)))</span><span class="nx">v</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">z</span><span class="p">.</span><span class="nx">render</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">q</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">q</span><span class="o">++</span><span class="p">)</span><span class="nx">z</span><span class="o">=</span><span class="nx">F</span><span class="p">[</span><span class="nx">q</span><span class="p">],</span><span class="nx">z</span><span class="p">.</span><span class="nx">render</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">v</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">buffer</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">material</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="o">?</span></td>
      </tr>
      <tr>
        <td id="L708" class="blob-num js-line-number" data-line-number="708"></td>
        <td id="LC708" class="blob-code js-file-line"><span class="nx">v</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="nx">v</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">v</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">G</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">,</span><span class="nx">G</span><span class="o">=</span><span class="nx">v</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="o">&amp;&amp;</span><span class="nx">G</span><span class="p">.</span><span class="nx">skinning</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="nx">v</span><span class="p">.</span><span class="nx">customDepthMaterial</span><span class="o">?</span><span class="nx">v</span><span class="p">.</span><span class="nx">customDepthMaterial</span><span class="o">:</span><span class="nx">G</span><span class="o">?</span><span class="nx">C</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">e</span><span class="o">:</span><span class="nx">C</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">z</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">renderBufferDirect</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">v</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">renderBuffer</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span><span class="nx">m</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">C</span><span class="p">,</span><span class="nx">z</span><span class="p">,</span><span class="nx">v</span><span class="p">));</span><span class="nx">F</span><span class="o">=</span><span class="nx">m</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">;</span><span class="nx">q</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">r</span><span class="o">=</span><span class="nx">F</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">q</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">q</span><span class="o">++</span><span class="p">)</span><span class="nx">z</span><span class="o">=</span><span class="nx">F</span><span class="p">[</span><span class="nx">q</span><span class="p">],</span><span class="nx">v</span><span class="o">=</span><span class="nx">z</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="nx">v</span><span class="p">.</span><span class="nx">castShadow</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">,</span><span class="nx">v</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">renderImmediateObject</span><span class="p">(</span><span class="nx">s</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L709" class="blob-num js-line-number" data-line-number="709"></td>
        <td id="LC709" class="blob-code js-file-line"><span class="nx">m</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">v</span><span class="p">))}</span><span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getClearColor</span><span class="p">();</span><span class="nx">t</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getClearAlpha</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="nx">p</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">p</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">shadowMapCullFace</span><span class="o">===</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">CullFaceFront</span><span class="o">&amp;&amp;</span><span class="nx">a</span><span class="p">.</span><span class="nx">cullFace</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">BACK</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShadowMapPlugin</span><span class="p">.</span><span class="nx">__projector</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Projector</span><span class="p">;</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">SpritePlugin</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="kd">function</span> <span class="nx">a</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">return</span> <span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">!==</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">z</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">z</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">id</span><span class="o">-</span><span class="nx">a</span><span class="p">.</span><span class="nx">id</span><span class="p">}</span><span class="kd">var</span> <span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="p">,</span><span class="nx">g</span><span class="p">,</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">,</span><span class="nx">l</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">){</span><span class="nx">b</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">context</span><span class="p">;</span><span class="nx">c</span><span class="o">=</span><span class="nx">a</span><span class="p">;</span><span class="nx">d</span><span class="o">=</span><span class="nx">a</span><span class="p">.</span><span class="nx">getPrecision</span><span class="p">();</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">Float32Array</span><span class="p">(</span><span class="mi">16</span><span class="p">);</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">Uint16Array</span><span class="p">(</span><span class="mi">6</span><span class="p">);</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=-</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">a</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">;</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">2</span><span class="p">;</span><span class="nx">f</span><span class="p">[</span><span class="nx">a</span><span class="o">++</span><span class="p">]</span><span class="o">=</span><span class="mi">3</span><span class="p">;</span><span class="nx">h</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">g</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createBuffer</span><span class="p">();</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L710" class="blob-num js-line-number" data-line-number="710"></td>
        <td id="LC710" class="blob-code js-file-line"><span class="nx">e</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">STATIC_DRAW</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bufferData</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">STATIC_DRAW</span><span class="p">);</span><span class="kd">var</span> <span class="nx">a</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderSprite</span><span class="p">.</span><span class="nx">sprite</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createProgram</span><span class="p">(),</span><span class="nx">p</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">FRAGMENT_SHADER</span><span class="p">),</span><span class="nx">t</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">createShader</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">VERTEX_SHADER</span><span class="p">),</span><span class="nx">q</span><span class="o">=</span><span class="s2">&quot;precision &quot;</span><span class="o">+</span><span class="nx">d</span><span class="o">+</span><span class="s2">&quot; float;\n&quot;</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">p</span><span class="p">,</span><span class="nx">q</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">shaderSource</span><span class="p">(</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="o">+</span><span class="nx">a</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">p</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">compileShader</span><span class="p">(</span><span class="nx">t</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">attachShader</span><span class="p">(</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">linkProgram</span><span class="p">(</span><span class="nx">n</span><span class="p">);</span><span class="nx">i</span><span class="o">=</span><span class="nx">n</span><span class="p">;</span><span class="nx">j</span><span class="o">=</span><span class="p">{};</span><span class="nx">l</span><span class="o">=</span><span class="p">{};</span><span class="nx">j</span><span class="p">.</span><span class="nx">position</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getAttribLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;position&quot;</span><span class="p">);</span><span class="nx">j</span><span class="p">.</span><span class="nx">uv</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getAttribLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L711" class="blob-num js-line-number" data-line-number="711"></td>
        <td id="LC711" class="blob-code js-file-line"><span class="s2">&quot;uv&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">uvOffset</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;uvOffset&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">uvScale</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;uvScale&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">rotation</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;rotation&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">scale</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;scale&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">alignment</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;alignment&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">color</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;color&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">map</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;map&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">opacity</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;opacity&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;useScreenCoordinates&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;sizeAttenuation&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">screenPosition</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L712" class="blob-num js-line-number" data-line-number="712"></td>
        <td id="LC712" class="blob-code js-file-line"><span class="s2">&quot;screenPosition&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">modelViewMatrix</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;modelViewMatrix&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;projectionMatrix&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">fogType</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;fogType&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">fogDensity</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;fogDensity&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">fogNear</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;fogNear&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">fogFar</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;fogFar&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">fogColor</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;fogColor&quot;</span><span class="p">);</span><span class="nx">l</span><span class="p">.</span><span class="nx">alphaTest</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getUniformLocation</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="s2">&quot;alphaTest&quot;</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">t</span><span class="p">){</span><span class="kd">var</span> <span class="nx">q</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">__webglSprites</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="k">if</span><span class="p">(</span><span class="nx">r</span><span class="p">){</span><span class="kd">var</span> <span class="nx">s</span><span class="o">=</span><span class="nx">j</span><span class="p">,</span><span class="nx">v</span><span class="o">=</span><span class="nx">l</span><span class="p">,</span><span class="nx">z</span><span class="o">=</span><span class="nx">t</span><span class="o">/</span></td>
      </tr>
      <tr>
        <td id="L713" class="blob-num js-line-number" data-line-number="713"></td>
        <td id="LC713" class="blob-code js-file-line"><span class="nx">f</span><span class="p">,</span><span class="nx">f</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">f</span><span class="p">,</span><span class="nx">C</span><span class="o">=</span><span class="mf">0.5</span><span class="o">*</span><span class="nx">t</span><span class="p">;</span><span class="nx">b</span><span class="p">.</span><span class="nx">useProgram</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">position</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enableVertexAttribArray</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">uv</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ARRAY_BUFFER</span><span class="p">,</span><span class="nx">h</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">position</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">vertexAttribPointer</span><span class="p">(</span><span class="nx">s</span><span class="p">.</span><span class="nx">uv</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">FLOAT</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="mi">16</span><span class="p">,</span><span class="mi">8</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">bindBuffer</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">ELEMENT_ARRAY_BUFFER</span><span class="p">,</span><span class="nx">g</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">e</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">activeTexture</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TEXTURE0</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">map</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span><span class="kd">var</span> <span class="nx">F</span><span class="o">=</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">,</span><span class="nx">H</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">fog</span><span class="p">;</span><span class="nx">H</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">fogColor</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="p">),</span></td>
      </tr>
      <tr>
        <td id="L714" class="blob-num js-line-number" data-line-number="714"></td>
        <td id="LC714" class="blob-code js-file-line"><span class="nx">H</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Fog</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">fogNear</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">near</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">fogFar</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">far</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">fogType</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">F</span><span class="o">=</span><span class="nx">s</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span><span class="o">:</span><span class="nx">H</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">FogExp2</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">fogDensity</span><span class="p">,</span><span class="nx">H</span><span class="p">.</span><span class="nx">density</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">fogType</span><span class="p">,</span><span class="mi">2</span><span class="p">),</span><span class="nx">F</span><span class="o">=</span><span class="nx">s</span><span class="o">=</span><span class="mi">2</span><span class="p">))</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">fogType</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">F</span><span class="o">=</span><span class="nx">s</span><span class="o">=</span><span class="mi">0</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="kd">var</span> <span class="nx">I</span><span class="p">,</span><span class="nx">G</span><span class="p">,</span><span class="nx">A</span><span class="o">=</span><span class="p">[],</span><span class="nx">H</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">H</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">H</span><span class="o">++</span><span class="p">)</span><span class="nx">I</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">H</span><span class="p">],</span><span class="nx">G</span><span class="o">=</span><span class="nx">I</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="nx">I</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">!==</span><span class="nx">G</span><span class="p">.</span><span class="nx">opacity</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="o">?</span><span class="nx">I</span><span class="p">.</span><span class="nx">z</span><span class="o">=-</span><span class="nx">I</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span><span class="o">:</span><span class="p">(</span><span class="nx">I</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">,</span><span class="nx">I</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">I</span><span class="p">.</span><span class="nx">z</span><span class="o">=-</span><span class="nx">I</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">[</span><span class="mi">14</span><span class="p">]));</span><span class="nx">q</span><span class="p">.</span><span class="nx">sort</span><span class="p">(</span><span class="nx">a</span><span class="p">);</span><span class="k">for</span><span class="p">(</span><span class="nx">H</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="nx">H</span><span class="o">&lt;</span><span class="nx">r</span><span class="p">;</span><span class="nx">H</span><span class="o">++</span><span class="p">)</span><span class="nx">I</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L715" class="blob-num js-line-number" data-line-number="715"></td>
        <td id="LC715" class="blob-code js-file-line"><span class="nx">q</span><span class="p">[</span><span class="nx">H</span><span class="p">],</span><span class="nx">G</span><span class="o">=</span><span class="nx">I</span><span class="p">.</span><span class="nx">material</span><span class="p">,</span><span class="nx">I</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="mi">0</span><span class="o">!==</span><span class="nx">G</span><span class="p">.</span><span class="nx">opacity</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">map</span><span class="o">&amp;&amp;</span><span class="nx">G</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">image</span><span class="o">&amp;&amp;</span><span class="nx">G</span><span class="p">.</span><span class="nx">map</span><span class="p">.</span><span class="nx">image</span><span class="p">.</span><span class="nx">width</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">alphaTest</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">alphaTest</span><span class="p">),</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">G</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="o">?</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">screenPosition</span><span class="p">,(</span><span class="nx">I</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">x</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="o">-</span><span class="nx">f</span><span class="p">)</span><span class="o">/</span><span class="nx">f</span><span class="p">,(</span><span class="nx">C</span><span class="o">-</span><span class="nx">I</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">y</span><span class="o">*</span><span class="nx">c</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="p">)</span><span class="o">/</span><span class="nx">C</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">max</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">Math</span><span class="p">.</span><span class="nx">min</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="nx">I</span><span class="p">.</span><span class="nx">position</span><span class="p">.</span><span class="nx">z</span><span class="p">))),</span><span class="nx">A</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="p">,</span><span class="nx">A</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="nx">c</span><span class="p">.</span><span class="nx">devicePixelRatio</span><span class="p">)</span><span class="o">:</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">useScreenCoordinates</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">sizeAttenuation</span><span class="o">?</span><span class="mi">1</span><span class="o">:</span><span class="mi">0</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniformMatrix4fv</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">modelViewMatrix</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L716" class="blob-num js-line-number" data-line-number="716"></td>
        <td id="LC716" class="blob-code js-file-line"><span class="o">!</span><span class="mi">1</span><span class="p">,</span><span class="nx">I</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">elements</span><span class="p">),</span><span class="nx">A</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span><span class="nx">A</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">=</span><span class="mi">1</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="nx">d</span><span class="p">.</span><span class="nx">fog</span><span class="o">&amp;&amp;</span><span class="nx">G</span><span class="p">.</span><span class="nx">fog</span><span class="o">?</span><span class="nx">F</span><span class="o">:</span><span class="mi">0</span><span class="p">,</span><span class="nx">s</span><span class="o">!==</span><span class="nx">e</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1i</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">fogType</span><span class="p">,</span><span class="nx">e</span><span class="p">),</span><span class="nx">s</span><span class="o">=</span><span class="nx">e</span><span class="p">),</span><span class="nx">e</span><span class="o">=</span><span class="mi">1</span><span class="o">/</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">scaleByViewport</span><span class="o">?</span><span class="nx">t</span><span class="o">:</span><span class="mi">1</span><span class="p">),</span><span class="nx">A</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">*=</span><span class="nx">e</span><span class="o">*</span><span class="nx">z</span><span class="o">*</span><span class="nx">I</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">A</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">*=</span><span class="nx">e</span><span class="o">*</span><span class="nx">I</span><span class="p">.</span><span class="nx">scale</span><span class="p">.</span><span class="nx">y</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform2f</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">uvScale</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">uvScale</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">uvScale</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform2f</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">uvOffset</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">uvOffset</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">uvOffset</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform2f</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">alignment</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">alignment</span><span class="p">.</span><span class="nx">x</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">alignment</span><span class="p">.</span><span class="nx">y</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">opacity</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">opacity</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform3f</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">color</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">color</span><span class="p">.</span><span class="nx">b</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform1f</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">rotation</span><span class="p">,</span><span class="nx">I</span><span class="p">.</span><span class="nx">rotation</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">uniform2fv</span><span class="p">(</span><span class="nx">v</span><span class="p">.</span><span class="nx">scale</span><span class="p">,</span><span class="nx">A</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">setBlending</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">blending</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">blendEquation</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L717" class="blob-num js-line-number" data-line-number="717"></td>
        <td id="LC717" class="blob-code js-file-line"><span class="nx">G</span><span class="p">.</span><span class="nx">blendSrc</span><span class="p">,</span><span class="nx">G</span><span class="p">.</span><span class="nx">blendDst</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">depthTest</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">setDepthWrite</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">depthWrite</span><span class="p">),</span><span class="nx">c</span><span class="p">.</span><span class="nx">setTexture</span><span class="p">(</span><span class="nx">G</span><span class="p">.</span><span class="nx">map</span><span class="p">,</span><span class="mi">0</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">drawElements</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">TRIANGLES</span><span class="p">,</span><span class="mi">6</span><span class="p">,</span><span class="nx">b</span><span class="p">.</span><span class="nx">UNSIGNED_SHORT</span><span class="p">,</span><span class="mi">0</span><span class="p">));</span><span class="nx">b</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">b</span><span class="p">.</span><span class="nx">CULL_FACE</span><span class="p">)}}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">DepthPassPlugin</span><span class="o">=</span><span class="kd">function</span><span class="p">(){</span><span class="k">this</span><span class="p">.</span><span class="nx">enabled</span><span class="o">=!</span><span class="mi">1</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">renderTarget</span><span class="o">=</span><span class="kc">null</span><span class="p">;</span><span class="kd">var</span> <span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">d</span><span class="p">,</span><span class="nx">e</span><span class="p">,</span><span class="nx">f</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Frustum</span><span class="p">,</span><span class="nx">g</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Matrix4</span><span class="p">;</span><span class="k">this</span><span class="p">.</span><span class="nx">init</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">g</span><span class="p">){</span><span class="nx">a</span><span class="o">=</span><span class="nx">g</span><span class="p">.</span><span class="nx">context</span><span class="p">;</span><span class="nx">b</span><span class="o">=</span><span class="nx">g</span><span class="p">;</span><span class="kd">var</span> <span class="nx">g</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderLib</span><span class="p">.</span><span class="nx">depthRGBA</span><span class="p">,</span><span class="nx">h</span><span class="o">=</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">UniformsUtils</span><span class="p">.</span><span class="nx">clone</span><span class="p">(</span><span class="nx">g</span><span class="p">.</span><span class="nx">uniforms</span><span class="p">);</span><span class="nx">c</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">h</span><span class="p">});</span><span class="nx">d</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">morphTargets</span><span class="o">:!</span><span class="mi">0</span><span class="p">});</span><span class="nx">e</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L718" class="blob-num js-line-number" data-line-number="718"></td>
        <td id="LC718" class="blob-code js-file-line"><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">skinning</span><span class="o">:!</span><span class="mi">0</span><span class="p">});</span><span class="nx">f</span><span class="o">=</span><span class="k">new</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderMaterial</span><span class="p">({</span><span class="nx">fragmentShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">fragmentShader</span><span class="p">,</span><span class="nx">vertexShader</span><span class="o">:</span><span class="nx">g</span><span class="p">.</span><span class="nx">vertexShader</span><span class="p">,</span><span class="nx">uniforms</span><span class="o">:</span><span class="nx">h</span><span class="p">,</span><span class="nx">morphTargets</span><span class="o">:!</span><span class="mi">0</span><span class="p">,</span><span class="nx">skinning</span><span class="o">:!</span><span class="mi">0</span><span class="p">});</span><span class="nx">c</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">d</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">e</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="nx">f</span><span class="p">.</span><span class="nx">_shadowPass</span><span class="o">=!</span><span class="mi">0</span><span class="p">};</span><span class="k">this</span><span class="p">.</span><span class="nx">render</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">){</span><span class="k">this</span><span class="p">.</span><span class="nx">enabled</span><span class="o">&amp;&amp;</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)};</span><span class="k">this</span><span class="p">.</span><span class="nx">update</span><span class="o">=</span><span class="kd">function</span><span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">j</span><span class="p">){</span><span class="kd">var</span> <span class="nx">l</span><span class="p">,</span><span class="nx">m</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">t</span><span class="p">,</span><span class="nx">q</span><span class="p">;</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">disable</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">setDepthTest</span><span class="p">(</span><span class="o">!</span><span class="mi">0</span><span class="p">);</span><span class="o">!</span><span class="mi">0</span><span class="o">===</span><span class="nx">i</span><span class="p">.</span><span class="nx">autoUpdate</span><span class="o">&amp;&amp;</span><span class="nx">i</span><span class="p">.</span><span class="nx">updateMatrixWorld</span><span class="p">();</span><span class="nx">j</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">.</span><span class="nx">getInverse</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">);</span><span class="nx">g</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">projectionMatrix</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L719" class="blob-num js-line-number" data-line-number="719"></td>
        <td id="LC719" class="blob-code js-file-line"><span class="nx">j</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">);</span><span class="nx">h</span><span class="p">.</span><span class="nx">setFromMatrix</span><span class="p">(</span><span class="nx">g</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">setRenderTarget</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">renderTarget</span><span class="p">);</span><span class="nx">b</span><span class="p">.</span><span class="nx">clear</span><span class="p">();</span><span class="nx">q</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglObjects</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span><span class="nx">n</span><span class="p">.</span><span class="nx">render</span><span class="o">=!</span><span class="mi">1</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">Mesh</span><span class="o">||</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">)</span><span class="o">||!</span><span class="nx">t</span><span class="p">.</span><span class="nx">frustumCulled</span><span class="o">||</span><span class="nx">h</span><span class="p">.</span><span class="nx">intersectsObject</span><span class="p">(</span><span class="nx">t</span><span class="p">)))</span><span class="nx">t</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">n</span><span class="p">.</span><span class="nx">render</span><span class="o">=!</span><span class="mi">0</span><span class="p">;</span><span class="kd">var</span> <span class="nx">r</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="k">if</span><span class="p">(</span><span class="nx">n</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">n</span><span class="p">.</span><span class="nx">render</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span><span class="nx">n</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">buffer</span><span class="p">,</span><span class="o">!</span><span class="p">(</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">ParticleSystem</span><span class="p">)</span><span class="o">||</span><span class="nx">t</span><span class="p">.</span><span class="nx">customDepthMaterial</span><span class="p">))(</span><span class="nx">r</span><span class="o">=</span></td>
      </tr>
      <tr>
        <td id="L720" class="blob-num js-line-number" data-line-number="720"></td>
        <td id="LC720" class="blob-code js-file-line"><span class="nx">t</span><span class="p">.</span><span class="nx">material</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">MeshFaceMaterial</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">material</span><span class="p">.</span><span class="nx">materials</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">:</span><span class="nx">t</span><span class="p">.</span><span class="nx">material</span><span class="p">)</span><span class="o">&amp;&amp;</span><span class="nx">b</span><span class="p">.</span><span class="nx">setMaterialFaces</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">material</span><span class="p">),</span><span class="nx">p</span><span class="o">=</span><span class="mi">0</span><span class="o">&lt;</span><span class="nx">t</span><span class="p">.</span><span class="nx">geometry</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">.</span><span class="nx">length</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">morphTargets</span><span class="p">,</span><span class="nx">r</span><span class="o">=</span><span class="nx">t</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">SkinnedMesh</span><span class="o">&amp;&amp;</span><span class="nx">r</span><span class="p">.</span><span class="nx">skinning</span><span class="p">,</span><span class="nx">p</span><span class="o">=</span><span class="nx">t</span><span class="p">.</span><span class="nx">customDepthMaterial</span><span class="o">?</span><span class="nx">t</span><span class="p">.</span><span class="nx">customDepthMaterial</span><span class="o">:</span><span class="nx">r</span><span class="o">?</span><span class="nx">p</span><span class="o">?</span><span class="nx">f</span><span class="o">:</span><span class="nx">e</span><span class="o">:</span><span class="nx">p</span><span class="o">?</span><span class="nx">d</span><span class="o">:</span><span class="nx">c</span><span class="p">,</span><span class="nx">n</span> <span class="k">instanceof</span> <span class="nx">THREE</span><span class="p">.</span><span class="nx">BufferGeometry</span><span class="o">?</span><span class="nx">b</span><span class="p">.</span><span class="nx">renderBufferDirect</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">)</span><span class="o">:</span><span class="nx">b</span><span class="p">.</span><span class="nx">renderBuffer</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">p</span><span class="p">,</span><span class="nx">n</span><span class="p">,</span><span class="nx">t</span><span class="p">);</span><span class="nx">q</span><span class="o">=</span><span class="nx">i</span><span class="p">.</span><span class="nx">__webglObjectsImmediate</span><span class="p">;</span><span class="nx">l</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span><span class="k">for</span><span class="p">(</span><span class="nx">m</span><span class="o">=</span><span class="nx">q</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span><span class="nx">l</span><span class="o">&lt;</span><span class="nx">m</span><span class="p">;</span><span class="nx">l</span><span class="o">++</span><span class="p">)</span><span class="nx">n</span><span class="o">=</span><span class="nx">q</span><span class="p">[</span><span class="nx">l</span><span class="p">],</span><span class="nx">t</span><span class="o">=</span><span class="nx">n</span><span class="p">.</span><span class="nx">object</span><span class="p">,</span><span class="nx">t</span><span class="p">.</span><span class="nx">visible</span><span class="o">&amp;&amp;</span><span class="p">(</span><span class="nx">t</span><span class="p">.</span><span class="nx">_modelViewMatrix</span><span class="p">.</span><span class="nx">multiplyMatrices</span><span class="p">(</span><span class="nx">j</span><span class="p">.</span><span class="nx">matrixWorldInverse</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L721" class="blob-num js-line-number" data-line-number="721"></td>
        <td id="LC721" class="blob-code js-file-line"><span class="nx">t</span><span class="p">.</span><span class="nx">matrixWorld</span><span class="p">),</span><span class="nx">b</span><span class="p">.</span><span class="nx">renderImmediateObject</span><span class="p">(</span><span class="nx">j</span><span class="p">,</span><span class="nx">i</span><span class="p">.</span><span class="nx">__lights</span><span class="p">,</span><span class="kc">null</span><span class="p">,</span><span class="nx">c</span><span class="p">,</span><span class="nx">t</span><span class="p">));</span><span class="nx">l</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getClearColor</span><span class="p">();</span><span class="nx">m</span><span class="o">=</span><span class="nx">b</span><span class="p">.</span><span class="nx">getClearAlpha</span><span class="p">();</span><span class="nx">a</span><span class="p">.</span><span class="nx">clearColor</span><span class="p">(</span><span class="nx">l</span><span class="p">.</span><span class="nx">r</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">g</span><span class="p">,</span><span class="nx">l</span><span class="p">.</span><span class="nx">b</span><span class="p">,</span><span class="nx">m</span><span class="p">);</span><span class="nx">a</span><span class="p">.</span><span class="nx">enable</span><span class="p">(</span><span class="nx">a</span><span class="p">.</span><span class="nx">BLEND</span><span class="p">)}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderFlares</span><span class="o">=</span><span class="p">{</span><span class="nx">lensFlareVertexTexture</span><span class="o">:</span><span class="p">{</span><span class="nx">vertexShader</span><span class="o">:</span><span class="s2">&quot;uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.1 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.9 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) );\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility =        visibility.r / 9.0;\nvVisibility *= 1.0 - visibility.g / 9.0;\nvVisibility *=       visibility.b / 9.0;\nvVisibility *= 1.0 - visibility.a / 9.0;\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L722" class="blob-num js-line-number" data-line-number="722"></td>
        <td id="LC722" class="blob-code js-file-line"><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}&quot;</span><span class="p">},</span><span class="nx">lensFlare</span><span class="o">:</span><span class="p">{</span><span class="nx">vertexShader</span><span class="o">:</span><span class="s2">&quot;uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L723" class="blob-num js-line-number" data-line-number="723"></td>
        <td id="LC723" class="blob-code js-file-line"><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a;\nvisibility += texture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}&quot;</span><span class="p">}};</span><span class="nx">THREE</span><span class="p">.</span><span class="nx">ShaderSprite</span><span class="o">=</span><span class="p">{</span><span class="nx">sprite</span><span class="o">:</span><span class="p">{</span><span class="nx">vertexShader</span><span class="o">:</span><span class="s2">&quot;uniform int useScreenCoordinates;\nuniform int sizeAttenuation;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( sizeAttenuation == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}&quot;</span><span class="p">,</span></td>
      </tr>
      <tr>
        <td id="L724" class="blob-num js-line-number" data-line-number="724"></td>
        <td id="LC724" class="blob-code js-file-line"><span class="nx">fragmentShader</span><span class="o">:</span><span class="s2">&quot;uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a &lt; alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType &gt; 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}&quot;</span><span class="p">}};</span></td>
      </tr>
</table>

  </div>

  </div>
</div>

<a href="#jump-to-line" rel="facebox[.linejump]" data-hotkey="l" style="display:none">Jump to Line</a>
<div id="jump-to-line" style="display:none">
  <form accept-charset="UTF-8" class="js-jump-to-line-form">
    <input class="linejump-input js-jump-to-line-field" type="text" placeholder="Jump to line&hellip;" autofocus>
    <button type="submit" class="button">Go</button>
  </form>
</div>

        </div>

      </div><!-- /.repo-container -->
      <div class="modal-backdrop"></div>
    </div><!-- /.container -->
  </div><!-- /.site -->


    </div><!-- /.wrapper -->

      <div class="container">
  <div class="site-footer" role="contentinfo">
    <ul class="site-footer-links right">
      <li><a href="https://status.github.com/">Status</a></li>
      <li><a href="http://developer.github.com">API</a></li>
      <li><a href="http://training.github.com">Training</a></li>
      <li><a href="http://shop.github.com">Shop</a></li>
      <li><a href="/blog">Blog</a></li>
      <li><a href="/about">About</a></li>

    </ul>

    <a href="/" aria-label="Homepage">
      <span class="mega-octicon octicon-mark-github" title="GitHub"></span>
    </a>

    <ul class="site-footer-links">
      <li>&copy; 2014 <span title="0.10722s from github-fe121-cp1-prd.iad.github.net">GitHub</span>, Inc.</li>
        <li><a href="/site/terms">Terms</a></li>
        <li><a href="/site/privacy">Privacy</a></li>
        <li><a href="/security">Security</a></li>
        <li><a href="/contact">Contact</a></li>
    </ul>
  </div><!-- /.site-footer -->
</div><!-- /.container -->


    <div class="fullscreen-overlay js-fullscreen-overlay" id="fullscreen_overlay">
  <div class="fullscreen-container js-suggester-container">
    <div class="textarea-wrap">
      <textarea name="fullscreen-contents" id="fullscreen-contents" class="fullscreen-contents js-fullscreen-contents js-suggester-field" placeholder=""></textarea>
    </div>
  </div>
  <div class="fullscreen-sidebar">
    <a href="#" class="exit-fullscreen js-exit-fullscreen tooltipped tooltipped-w" aria-label="Exit Zen Mode">
      <span class="mega-octicon octicon-screen-normal"></span>
    </a>
    <a href="#" class="theme-switcher js-theme-switcher tooltipped tooltipped-w"
      aria-label="Switch themes">
      <span class="octicon octicon-color-mode"></span>
    </a>
  </div>
</div>



    <div id="ajax-error-message" class="flash flash-error">
      <span class="octicon octicon-alert"></span>
      <a href="#" class="octicon octicon-x flash-close js-ajax-error-dismiss" aria-label="Dismiss error"></a>
      Something went wrong with that request. Please try again.
    </div>


      <script crossorigin="anonymous" src="https://assets-cdn.github.com/assets/frameworks-7697aacc55f84bd4542cfa34f8052d9a7e3d1378.js" type="text/javascript"></script>
      <script async="async" crossorigin="anonymous" src="https://assets-cdn.github.com/assets/github-86730ac1df5543b876a014a6824213397ee7e926.js" type="text/javascript"></script>
      
      
        <script async src="https://www.google-analytics.com/analytics.js"></script>
  </body>
</html>

